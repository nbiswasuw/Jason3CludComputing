<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Research.Science.Data</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Research.Science.Data.ArrayWrapper">
            <summary>
            Keeps array, its rank and type. Empty and zero-rank arrays are supported.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayWrapper.array">
            <summary>Array of holding actual data. Can be null if there is no data</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayWrapper.rank">
            <summary>Rank of array. Valid even if <see cref="F:Microsoft.Research.Science.Data.ArrayWrapper.array"/> field is null</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayWrapper.type">
            <summary>Type of array elements. Valid even if <see cref="F:Microsoft.Research.Science.Data.ArrayWrapper.type"/> field is null</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ArrayWrapper.#ctor(System.Int32,System.Type)">
            <summary>Initializes a new instance of ArrayWrapper with specified rank and type of elements
            but without data</summary>
            <param name="rank">Rank of array. Zero-ranked arrays are also supported.</param>
            <param name="type">Type of array elements</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ArrayWrapper.GetShape">
            <summary>Return array with shape of wrapper array. Returned array is a copy, so
            it can be modified in any way without affecting ArrayWrapper</summary>
            <returns>Array of integers containing sizes of dimensions</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ArrayWrapper.GetData(System.Int32[],System.Int32[])">
            <summary>Returns copy of data from part of wrapper array</summary>
            <param name="origin">The origin of the window (e.g., the left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the region. Null means entire array.</param>
            <returns>An array of data from the specified region.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ArrayWrapper.PutData(System.Int32[],System.Array)">
            <summary>Writes the data to the wrapped array starting with the specified origin indices.
            </summary>
            <param name="origin">Indices to start adding of data. Null means all zeros.</param>
            <param name="a">Data to add to the variable.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ArrayWrapper.Copy">
            <summary>Creates a copy of ArrayWrapper instance</summary>
            <returns>Full copy of ArrayWrapper</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ArrayWrapper.Data">
            <summary>Gets or sets data for the array</summary>
            <remarks>Array is not copied to the wrapper, so modification of assigned
            array means modification of ArrayWrapper</remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ArrayWrapper.Rank">
            <summary>Returns rank of wrapper array. Note that zero-ranked array are supported</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ArrayWrapper.DataType">
            <summary>Return type of elements for this array</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.IDataRequestable">
            <summary>
            Supports asynchronous data requests.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.IDataRequestable.RequestData(System.Int32[],System.Int32[],Microsoft.Research.Science.Data.VariableResponseHandler)">
            <summary>
             Starts an asynchronous get operation.
            </summary>
            <param name="origin">The origin of the window (left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the corned. Null means maximal shape.</param>
            <param name="responseHandler">Delegate for the request completion notification.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.IDataRequestable.RequestData(System.Int32[],System.Int32[],System.Int32[],Microsoft.Research.Science.Data.VariableResponseHandler)">
            <summary>
             Starts an asynchronous get operation.
            </summary>
            <param name="origin">The origin of the window (left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the corned. Null means maximal shape.</param>
            <param name="stride">Steps to stride the variable.</param>
            <param name="responseHandler">Delegate for the request completion notification.</param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.IMultipleDataRequestable">
            <summary>
            Supports asynchronous multiple data requests.
            </summary>
            <remarks>
            Asynchronously invokes the <see cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/> method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.IMultipleDataRequestable.RequestMultipleData(Microsoft.Research.Science.Data.AsyncMultipleDataResponseHandler,Microsoft.Research.Science.Data.DataRequest[])">
            <summary>
            Asynchronous request for multiple data of the proxy. 
            </summary>
            <param name="requests">Data requests describing what data is to be returned.</param>
            <param name="responseHandler">The handler to receive either response of a fault.</param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableResponseHandler">
            <summary>
            The handler for asynchronous variable data requests.
            </summary>
            <param name="response">Result of the request.</param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.AsyncMultipleDataResponseHandler">
            <summary>
            The handler for asynchronous GetMultipleData requests.
            </summary>
            <param name="response">Result of the request.</param>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/>
        </member>
        <member name="T:Microsoft.Research.Science.Data.AsyncMultipleDataResponse">
            <summary>
            Result of an asynchronous request for multiple data.
            </summary>
            <remarks>
            <para>
            See remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/> and 
            <see cref="M:Microsoft.Research.Science.Data.IMultipleDataRequestable.RequestMultipleData(Microsoft.Research.Science.Data.AsyncMultipleDataResponseHandler,Microsoft.Research.Science.Data.DataRequest[])"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.#ctor(Microsoft.Research.Science.Data.MultipleDataResponse)">
            <summary>
            Creates an instance in case of success.
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.#ctor(System.Exception)">
            <summary>
            Creates an instance in case of failure.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.Response">
            <summary>
            Gets the response containing data for all requests.
            </summary>
            <remarks>
            <para>
            The property returns <c>null</c>, if <see cref="P:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.IsSuccess"/> is <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.IsSuccess">
            <summary>
            Gets the value indicating whether the operation has been successful or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.Exception">
            <summary>
            Gets the exception describing failure in case when <see cref="P:Microsoft.Research.Science.Data.AsyncMultipleDataResponse.IsSuccess"/> property is false.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableResponse">
            <summary>
            Represents the result of an asynchronous request for variable's data.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableResponse.#ctor(Microsoft.Research.Science.Data.Variable,System.Int32[],System.Int32[],System.Array,System.Int32)">
            <summary>
            Use on success.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableResponse.#ctor(Microsoft.Research.Science.Data.Variable,System.Int32[],System.Int32[],System.Exception)">
            <summary>
            Use on failure.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.IsSuccess">
            <summary>
            Gets the value indicating whether the operation has been successful or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Exception">
            <summary>
            Gets the exception describing failure in case when <see cref="P:Microsoft.Research.Science.Data.VariableResponse.IsSuccess"/> property is false.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Variable">
            <summary>
            Gets the variable that is the target of the request.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Origin">
            <summary>
            Gets the origin of the requested region.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Stride">
            <summary>
            Gets the stride of the requested region.
            </summary>
            <remarks>
            If the request has had no stride, gets null.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Shape">
            <summary>
            Gets the shape of the requested region.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Data">
            <summary>
            Gets the requested data.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableResponse.Version">
            <summary>Gets version number this response is originating from.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReadOnlyCollectionCombination`1">
            <summary>
            Enables smooth iteration through two collections as a single one.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSet">
             <summary>
             Facilitates creating, reading and modifying of a scientific data set.
             </summary>
             <remarks> 
             <para>The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is a top-level class of the Scientific DataSet library that is aimed to
             provide a single data model for different scientific data sets. 
             Applications are able to store and retrieve data uniformly, having an abstract view on 
             various custom data storages. This makes an application less 
             dependent on data formats and significantly eases data transfer between software components.</para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> bundles several related arrays and associated metadata in 
             a single self-descriptive package and enforces certain constraints on arrays' shapes to 
             ensure data consistency. An underlying data model of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> 
             is based on a long-term community experience. 
             The SDS Data Model has commonality to the Unidata’s Common Data Model, 
             being chosen since CDM has been successfully tested by time. 
             </para>
             <para>To create or open a data set, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> method with a proper 
             DataSet URI:
             <example>
             <code>
             DataSet dataSet = DataSet.Open("csv_for_autotypes.csv"); 
             DataSet dataSet = DataSet.Open("msds:csv?file=csv_for_autotypes.csv"); 
             DataSet dataSet = DataSet.Open(@"c:\data\ncfile.nc"); 
             DataSet dataSet = DataSet.Open("msds:nc?file=ncfile.nc"); 
             DataSet dataSet = DataSet.Open("msds:as?server=(local)&amp;database=ActiveStorage&amp;integrated security=true&amp;GroupName=mm5&amp;UseNetcdfConventions=true");
             </code>
             </example>
             </para>
             <para>
             Particular <see cref="T:Microsoft.Research.Science.Data.DataSet"/> implementation, providing an access to the specified
             data storage, is chosen on a basis of the URI. Such implementation
             named <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider.
             </para>
             <para>
             Current release contains following providers:
             <list type="bullet">
             <item><description>
             <see cref="T:Microsoft.Research.Science.Data.Memory.MemoryDataSet"></see></description></item>
             <item><description>
             <see cref="T:Microsoft.Research.Science.Data.CSV.CsvDataSet"></see></description></item>
             <item><description><see cref="T:Microsoft.Research.Science.Data.NetCDF4.NetCDFDataSet"/></description></item>
             </list>
             </para>
             <para>A provider might have extra parameters specified in the URI. 
             For example, it can be security credentials, behavioral properties etc. 
             For more information see documentation of a particular provider. 
             To customize a URI prior to opening a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, use capabilities
             exposed by the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class.
             </para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> consists of a collection of <see cref="T:Microsoft.Research.Science.Data.Variable"/> objects.
             Each <see cref="T:Microsoft.Research.Science.Data.Variable"/> represents a single array with a collection of attributes
             (see <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/>) attached.
             If a provider works with large data sets, typically it doesn't loads all data in memory,
             but provides on-demand data access through variables.
             <example>
             The following code iterates through all variables of a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> 
             loaded from "sample.csv" file and prints information about the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to the console:
             <code>
            using(DataSet ds = new DataSet.Open("sample.csv"))
            {
                 Console.WriteLine ("Scientfic DataSet " + ds.Name + "(" + ds.DataSetGuid + ")" + " contents: ");
            
                 Console.WriteLine (" Variables:");
                 foreach (Variable v in sds.Variables)
                 {
                     Console.WriteLine (v.ToString());
                 }
            }
             </code>
             </example>
             </para>
             <para>
             Relationships between variables are expressed using a concept of shared dimensions. 
             A DataSet dimension is a distinct named index space. 
             For example, saying that variable <c>Observation</c> shares the dimension with variable <c>X</c>
             we mean that <c>Observation[i]</c> relate somehow to <c>X[i]</c> for all indices i 
             from the shared index space. Additionally this introduces a constraint to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>: 
             the lengths of these two variables must always be the same.</para>
             <para>
             In common the rule says that lengths of a shared dimension for all variables, depending on it, must be equal.
             </para>
             <para>In addition to metadata attached to each <see cref="T:Microsoft.Research.Science.Data.Variable"/>, there is a global
             metadata attached to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> (see <see cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/>).
             Metadata is a dictionary of string keys and typed values, 
             represented as a <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> class.
             </para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance can be read-only (see <see cref="P:Microsoft.Research.Science.Data.DataSet.IsReadOnly"/>). Such
             <see cref="T:Microsoft.Research.Science.Data.DataSet"/> cannot be modified.
             </para>
             <para>
             New <see cref="T:Microsoft.Research.Science.Data.Variable"/> can be added to a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> using 
             <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/>.
             <example>
             The following code adds a column to a comma separated text file "Tutorial1.csv":
             <code>
             using(DataSet ds = DataSet.Open("Tutorial1.csv"))
             {
                 // read input data
                 double[] x = (double[])ds["X"].GetData();
                 double[] y = (double[])ds["Observation"].GetData();
                 // compute
                 var xm = x.Sum() / x.Length;
                 var ym = y.Sum() / y.Length;
                 var a = x.Zip(y, (xx, yy) =&gt; (xx - xm) * (yy - ym)).Sum()
                  / x.Select(xx =&gt; (xx - xm) * (xx - xm)).Sum();
                 var b = ym - a * xm;
                 var model = x.Select(xx =&gt; a * xx + b).ToArray();
                 // Adding new variable
                 ds.AddVariable&lt;double&gt;("Model", model);
             }
             </code>
             </example>
             </para>
             <para>
             The extensions <see cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
             enable work with <see cref="T:Microsoft.Research.Science.Data.DataSet"/> in a way close to a procedural API. The previous example
             can be rewritten using the extensions:
             <example>
             <code>
             using(DataSet ds = sds.DataSet.Open("Tutorial1.csv"))
             {
                 // read input data 
                 var x = ds.GetData&lt;double[]&gt;("X");
                 var y = ds.GetData&lt;double[]&gt;("Observation");
                 // compute
                 var xm = x.Sum() / x.Length;
                 var ym = y.Sum() / y.Length;
                 var a = x.Zip(y, (xx, yy) =&gt; (xx - xm) * (yy - ym)).Sum()
                   / x.Select(xx =&gt; (xx - xm) * (xx - xm)).Sum();
                 var b = ym - a * xm;
                 var model = x.Select(xx =&gt; a * xx + b).ToArray();
                 // Adding new variable
                 ds.Add&lt;double[]&gt;("Model");
                 ds.PutData&lt;double[]&gt;("Model", model);
             }
             </code>
             </example>
             </para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> uses two-phase transaction mechanism to commit changes. See remarks for the
             <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method for details. See also remarks for the
             <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/> property. 
             </para>    
             </remarks>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/>
             <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
             <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
             <seealso cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/>
             <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
             <seealso cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.GlobalMetadataVariableID">
            <summary>
            ID of the variable that contains global metadata of the DataSet.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])">
             <summary>
             Gets data from several variables atomically with a guarantee that the data belong to the same DataSet version.
             </summary>
             <param name="requests">Data requests describing what data is to be returned.</param>
             <returns>All requested data.</returns>
             <remarks>
             <para>
             The problem is to get consistent data from one version of a DataSet.
             A typical program flow for working with data from several related variables 
             involve several consequent calls of the <see cref="M:Microsoft.Research.Science.Data.Variable.GetData"/>. 
             If the data set is being changed in the background by another process, 
             the data returned may come from different versions (see <see cref="P:Microsoft.Research.Science.Data.DataSet.Version"/>). 
             This is inappropriate for many applications.
             </para>
             <para>
             The solution is to use <see cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/> method which performs several
             <see cref="M:Microsoft.Research.Science.Data.Variable.GetData"/> operations atomically and guarantees that 
             all returned arrays belong to the same DataSet version.
             </para>
             <example>
             The following example gets data from two variables atomically:
             <code>
             DataSet ds = . . .;
             var v1 = ds.AddVariable&lt;string&gt;("v1", "x");
             var v2 = ds.AddVariable&lt;double&gt;("v2", "x", "y");
             
             . . .
             
             MultipleDataResponse response = ds.GetMultipleData(
            			// requesting 10 first elements from "v1":
            			DataRequest.GetData(v1, null, new int[1] { 10 }), 
            			// requesting 10x20 first elements from "v2":
            			DataRequest.GetData(v2, null, new int[2] { 10, 20 }));
            
             DataResponse r1 = response[v1.ID];
             DataResponse r2 = response[v2.ID];
            	
             // All the data belong to the version "response.Version".
             string[] d1 = (string[]) r1.Data;
             double[,] d2 = (double[,]) r2.Data;
             </code>
             </example>
             </remarks>
             <seealso cref="T:Microsoft.Research.Science.Data.DataRequest"/>
             <seealso cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/>
             <exception cref="T:System.ArgumentNullException"><paramref name="requests"/> or one of its elements is null.</exception>
             <exception cref="T:System.ArgumentException">One of requested variable belongs to another DataSet.</exception>
             <exception cref="T:System.ApplicationException">Version of the DataSet unexpectedly changed during getting data.</exception>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.TraceDataSet">
            <summary>
            Filters trace messages related to the DataSet.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Create(System.String)">
            <summary>
            Opens connection to a data set for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">Uri of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to open.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            The method is obsolete. Use <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> instead.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/> 
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>		
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The provider is not registered.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)">
            <summary>
            Opens connection to a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">URI of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to open.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            <para>
            The method uses the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> class
            that enables creating an instance of a particular <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider on a basis of the
            <paramref name="uri"/>. The URI is either a file path (with possible parameters appended
            through '?') or a URI with schema "msds" and correct provider name and set of parameters. 
            See also <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class.
            <example>
            <para>For example, provider <see cref="T:Microsoft.Research.Science.Data.CSV.CsvDataSet"/> accepts following URIs:</para>
            <code>
            c:\data\test.csv
            c:\data\test.csv?openMode=createNew
            msds:csv?file=c:\data\test.csv&amp;openMode=createNew
            </code>
            <para>The URI "msds:nc?file=c:\data.test.csv" will cause an error for it has wrong provider name ("nc" instead of "csv").</para>
            </example>
            </para>
            <para>
            A provider should have the <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/> attribute specifying 
            a provider name. There might also be declared attributes 
            <see cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/> to 
            associate extensions with the provider,
            and <see cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/> to associate a concrete <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            type with the provider (see also <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)"/>).
            <example>
            <code>
            [DataSetProviderName("csv")]
            [DataSetProviderFileExtension(".csv")] 
            [DataSetProviderUriTypeAttribute(typeof(CsvUri))]
            public class CsvDataSet : DataSet
            </code>
            </example>
            </para>
            <para>
            The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class has property <see cref="P:Microsoft.Research.Science.Data.DataSet.URI"/> returning a URI of a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance. 
            </para>
            <para>For developers: there is a class <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            implementing basic functionality on parsing and 
            verifying DataSet URIs and it should be used to embed the support of URI to 
            DataSet provider.</para>
            <para>
            See also remarks for <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/> 
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>		
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The provider is not registered.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Create(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Opens connection to a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">URI of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to open.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>        
            <remarks>
            The method is obsolete. Use <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/> instead.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> 
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Opens connection to a data set for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">URI of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to open.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>        
            <remarks>
            <para>
            The method creates a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance for the specified <paramref name="uri"/>.
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> and <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> 
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The provider is not registered.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateMetadata">
            <summary>
            Creates <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> instance.
            </summary>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.</returns>
            <remarks>
            <para>
            Constructor of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> is internal.
            Therefore providers should use this method to create an instance of the 
            <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.StartChangesFor(Microsoft.Research.Science.Data.MetadataDictionary)">
            <summary>
            Starts changes for the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.
            </summary>
            <returns>Instance containing changes of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.</returns>
            <remarks>
            <para>
            The StartChanges methods of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> is internal.
            Therefore providers should use <see cref="M:Microsoft.Research.Science.Data.DataSet.StartChangesFor(Microsoft.Research.Science.Data.MetadataDictionary)"/> to start changes for the
            <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateMultipleDataResponse(System.Int32,Microsoft.Research.Science.Data.DataResponse[])">
            <summary>
            Creates <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/> instance.
            </summary>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/>.</returns>
            <remarks>
            <para>
            Constructor of the <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/> is internal.
            Therefore providers should use this method to create an instance of the 
            <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateDataResponse(Microsoft.Research.Science.Data.DataRequest,System.Array)">
            <summary>
            Creates <see cref="T:Microsoft.Research.Science.Data.DataResponse"/> instance.
            </summary>
            <param name="data"></param>
            <param name="request"></param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataResponse"/>.</returns>
            <remarks>
            <para>
            Constructor of the <see cref="T:Microsoft.Research.Science.Data.DataResponse"/> is internal.
            Therefore providers should use this method to create an instance of the 
            <see cref="T:Microsoft.Research.Science.Data.DataResponse"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetType(System.String)">
            <summary>
            Gets the <see cref="T:System.Type"/> with the specified name, performing a case-sensitive search.
            </summary>
            <param name="typeName">The assembly-qualified name of the type to get. If the type is in the core <see cref="T:Microsoft.Research.Science.Data.DataSet"/> assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</param>
            <returns>The <see cref="T:System.Type"/> with the specified name, if found; otherwise, a null reference.</returns>
            <remarks>This method is equivalent to <see cref="M:System.Type.GetType(string)"/> except when assembly is not specified in <paramref name="typeName"/>. In that case it searches the type in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> assembly, not in the calling assembly.</remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.changeSetId">
            <summary>Unique number of committed changeset (version). 
            Changeset ids can be compared. Greater changeset id
            means more recent changeset</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.autocommit">
            <summary>If autocommit is true, tries to commit after every change.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.uri">
            <summary>
            URI of the DataSet.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.readOnly">
            <summary>
            Determines whether data set is read only.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.variables">
            <summary>Committed collection of variables.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.changes">
            <summary>Represents recent changes in data set.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.commitedDimensions">
            <summary>List of current committed dimensions.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.includedDataSets">
            <summary>Other data sets that were referenced in uri.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.incomingReferences">
            <summary>List of data sets referring this data set.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.outcomingReferences">
            <summary>List of data sets referred by this data set.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.#ctor">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            <para>
            Initializes the instance's collections of variables and coordinate systems
            and starts changes (see <see cref="M:Microsoft.Research.Science.Data.DataSet.StartChanges"></see>).
            </para>
            <para>
            Initializes the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance with coordinate systems support enabled
            and generic global metadata variable. See also <see cref="M:Microsoft.Research.Science.Data.DataSet.#ctor(System.Boolean,System.Boolean)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <param name="createGlobalMetadataVariable">Determines whether to create a generic global metadata variable
            or not.</param>
            <param name="supportsCoordinateSystems">If true, the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider supports coordinate systems; otherwise, it doesn't.</param>
            <remarks>
            <para>
            Initializes the instance's collections of variables and coordinate systems
            and starts changes (see <see cref="M:Microsoft.Research.Science.Data.DataSet.StartChanges"></see>).
            </para>
            <para>
            If <paramref name="createGlobalMetadataVariable"/> is <c>true</c>, 
            an isntance of the <see cref="T:Microsoft.Research.Science.Data.MetadataContainerVariable"/> with <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/>
            equal to <see cref="F:Microsoft.Research.Science.Data.DataSet.GlobalMetadataVariableID"/> is created to store global metadata of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            Otherwise, the provider must add (<see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableToCollection(Microsoft.Research.Science.Data.Variable)"/>) a custom variable with 
            <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> == <see cref="F:Microsoft.Research.Science.Data.DataSet.GlobalMetadataVariableID"/>
            on its own. Read about global metadata in remarks for <see cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnDataSetChanged(Microsoft.Research.Science.Data.DataSetChangeAction,Microsoft.Research.Science.Data.DataSet.Changes,System.Object)">
            <summary>
            Invoked when something has changed within the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <param name="action"></param>
            <param name="changes"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FireEventChanged(Microsoft.Research.Science.Data.DataSetChangeAction,Microsoft.Research.Science.Data.DataSet.Changes,System.Object)">
            <summary>
            Fires the Changed event.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FireEventCommitting(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Returns false if it is required cancel the committing.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.committedHandlers">
            <summary>
            Private event Committed handlers.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FireEventCommitted(Microsoft.Research.Science.Data.DataSetChangeset,Microsoft.Research.Science.Data.DataSetSchema)">
            <summary>
            Fires the <see cref="E:Microsoft.Research.Science.Data.DataSet.Committed"/> event.
            </summary>
            <param name="changes">Committed changes.</param>
            <param name="committedSchema">Committed schema.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FireEventChanging(Microsoft.Research.Science.Data.DataSetChangeAction,System.Object)">
            <summary>
            Fires the Changing event and
            returns false, if changing is canceled.
            </summary>
            <param name="action"></param>
            <param name="target"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetNextVariableId">
            <summary>
            Gets next id for variable. Used by Variable ctor.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ProposeNextVarID(System.Int32)">
            <summary>
            Proposes the <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> that is to be given to the next added 
            <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
            </summary>
            <param name="nextVarID">Proposed ID for the next <see cref="T:Microsoft.Research.Science.Data.Variable"/></param>
            <remarks>If the <paramref name="nextVarID"/> is less then current, the current ID remains unchanged.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ClearVariableCollection">
            <summary>
            Removes all variables from the collection.
            Starts new change transaction.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ClearCSCollection">
            <summary>
            Removes all cs from the collection.
            Starts new change transaction.
            </summary>
            <remarks>
            For example, can be used by the provider on loading from file
            to clear existing collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.IsReference(Microsoft.Research.Science.Data.Variable,Microsoft.Research.Science.Data.Variable)">
            <summary>Checks whether one variable is reference to another</summary>
            <param name="v1">Referencing variable</param>
            <param name="v2">Referenced variable</param>
            <returns>true is v1 references v2 or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.IncludeDataSet(System.String)">
            <summary>Includes variables from DataSet</summary>
            <param name="uri">DataSet uri</param>
            <remarks>All variables are added if no fragment part present in uri</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableToCollection(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Adds the variable to the inner collection of variables.
            Should be used by derived classes and the <see cref="T:Microsoft.Research.Science.Data.Variable"/> only to extend the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableToCollection(Microsoft.Research.Science.Data.Variable,Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Adds the variable to the inner collection of variables.
            Should be used by derived classes and the 
            <see cref="T:Microsoft.Research.Science.Data.Variable"/>class only to extend the collection.
            Parameter <paramref name="proposedChanges"/> must be prepared.
            </summary>
            <param name="proposedChanges">Container for the changes to be accumulated in.</param>
            <param name="var"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CheckOnAddVariable(Microsoft.Research.Science.Data.Variable)">
            <summary>
            This methods is called when the variable is to be added to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            It is possible to override this method to filter out variables, and
            it is enough to throw an exception to reject the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateVariable``1(System.String,System.String[])">
            <summary>
            Creates new specific variable (doesn't add it to the collection).
            </summary>
            <typeparam name="DataType"></typeparam>
            <param name="varName"></param>
            <param name="dims"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateVariable(System.Type,System.String,System.String[])">
            <summary>
            Untyped version of <see cref="M:Microsoft.Research.Science.Data.DataSet.CreateVariable``1(System.String,System.String[])"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])">
            <summary>
            Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <param name="varName">Name of the variable.</param>
            <param name="dims">List of names of the variable's dimensions.</param>
            <returns>New variable.</returns>
            <remarks>
            <para>See list of supported types in remarks for the <see cref="T:Microsoft.Research.Science.Data.Variable"/> class.</para>
            <para>
            See remarks for the method <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.Array,System.String[])">
            <summary>
            Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <param name="varName">Name of the variable.</param>
            <param name="array">Initial data for the variable.</param>
            <param name="dims">List of names of the variable's dimensions. If null, dimensions are auto-named.</param>
            <returns>New variable.</returns>
            <remarks>
            <para>See list of supported types in remarks for the <see cref="T:Microsoft.Research.Science.Data.Variable"/> class.</para>
            <para>
            If both <paramref name="array"/> and <paramref name="dims"/> are null,
             or  <paramref name="array"/> is null and <paramref name="dims"/> is an empty array,
            then <see cref="T:Microsoft.Research.Science.Data.DataSet"/> creates a scalar <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
            </para>
            <para>
            See also remarks for the method <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,Microsoft.Research.Science.Data.CoordinateSystem,System.String[])">
            <summary>
            Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <param name="varName">Name of the variable.</param>
            <param name="dims">List of names of the variable's dimensions. If null, names are inferred.</param>
            <param name="cs">Default coordinate system for the variable being added.</param>
            <returns>New variable.</returns>
            <remarks>
            See remarks for the method <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.Array,Microsoft.Research.Science.Data.CoordinateSystem,System.String[])">
            <summary>
            Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <param name="varName">Name of the variable.</param>
            <param name="array">Initial data for the variable.</param>
            <param name="dims">List of names of the variable's dimensions.</param>
            <param name="cs">Default coordinate system for the variable being added.</param>
            <returns>New variable.</returns>
            <remarks>
            See also remarks for the method <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])">
             <summary>
             Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
             </summary>
             <param name="dataType">Type of data for the variable.</param>
             <param name="varName">Name of the variable.</param>
             <param name="array">Initial data for the variable.</param>
             <param name="dims">List of names of the variable's dimensions.</param>
             <returns>New variable.</returns>		
             <remarks>
             <para>See list of supported types in remarks for the <see cref="T:Microsoft.Research.Science.Data.Variable"/> class.</para>
             <para>New variable can be defined and added into a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> at any time 
             (obviously, this procedure changes the schema of a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>). 
             The creating and adding of a variable are performed as a single operation by 
             AddVariable methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. 
             These methods accept at least a name of a variable, its type and dimensions, and return new variable 
             instance.
             </para>		
             <para>
             Parameters <paramref name="array"/> and <paramref name="dims"/> can be null.
             A rank of the variable (i.e. a number of dimensions) is either equal to the rank of <paramref name="array"/>
             (if it is not a null) or a length of the <paramref name="dims"/>. Initial data of the new variable is
             an <paramref name="array"/>. If both array and dims are nulls (or <paramref name="dims"/> 
             is an empty array), then the variable is a scalar, 
             i.e. has rank zero (read more in remarks for <see cref="T:Microsoft.Research.Science.Data.Variable"/>).
             </para>
             <example>
             <para>
             Let’s get an example of the methods use:
             </para>
             <code>
             public void AddVariables1(DataSet sds)
             {
            		// Variable "A" is a 1d variable of type DateTime depending on dimension "x"
                 Variable&lt;DateTime&gt; time = sds.AddVariable&lt;DateTime&gt;("A", "x");
                 time.Metadata["DisplayName"] = "Time";
             
                 Variable&lt;double&gt; u = sds.AddVariable&lt;double&gt;("B", "x");
                 u.Metadata["DisplayName"] = "U-component of velocity";
             
                 Variable&lt;double&gt; v = sds.AddVariable&lt;double&gt;("C", "x");
                 v.Metadata["DisplayName"] = "V-component of velocity";
             } 
             </code>
             <para>
             In the example, three one-dimensional variables A, B and C are added to the given <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance.
             All variables depends on same dimension named <c>"x"</c>.
             The <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> property defines corresponded metadata entry.
             </para>
             </example>
             <para>
             The very important is that the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class sets relations between added variables. 
             The rule is: all dimensions of different variables with same name are considered as related 
             (i.e. they share same dimension). This means that values with equal indices by related 
             dimensions in different variables are considered as corresponded, and lengths 
             of related dimensions in different variable must be equal. See <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> 
             about constraints on data.
             </para>
             <para>Therefore in the given example all arrays depend on the same dimension named "x". 
             This leads to the constraint when lengths of A, B and C must be equal, and A, 
             for instance, can be an axis for B and C.
             </para>	
             <para>
             Dimension name is an arbitrary string, used only to specify 
             which dimensions of different variables are related.
             </para>
             <para><see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> of a variable is computed as a number of specified dimensions. 
             Thus all dimensions must be given.
             </para>
             <example>
             <code>
            public void AddVariables2(DataSet sds)
            {
             sds.AddVariable&lt;double&gt;("lat", "y");
             sds.AddVariable&lt;double&gt;("lon", "x");
             sds.AddVariable&lt;double&gt;("pressure", "x", "y");
            } 
             </code>
             <para>
             In this example, variables <c>lat and lon</c> are one-dimensional, 
             pressure is two-dimensional variable, and a pair <c>lon</c> and <c>pressure</c> 
             (by first dimension), and another pair lat and pressure (by second dimension) 
             depend on a same dimension. In other words, values <c>pressure[i,j]</c> 
             corresponds to both <c>lon[i]</c> and <c>lat[j]</c>.
             </para>
             </example>
             <para>
             The constraint on variables requests that their dimensions with same name must have same length.
             </para>		
             </remarks>
             <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,Microsoft.Research.Science.Data.CoordinateSystem,System.String[])">
            <summary>
            Creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <param name="dataType">Type of data for the variable.</param>
            <param name="varName">Name of the variable.</param>
            <param name="array">Initial data for the variable.</param>
            <param name="dims">List of names of the variable's dimensions.</param>
            <param name="cs">Default coordinate system for the variable being added.</param>
            <returns>New variable.</returns>		
            <remarks>
            The method is obsolete. See method
            <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>
            instead.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference``1(Microsoft.Research.Science.Data.Variable{``0},System.String[])">
            <summary>
            Creates a reference variable.
            </summary>
            <param name="var">Target variable.</param>
            <param name="dims">If not null, defines dimensions of the variable within this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <returns>Reference variable to the given variable.</returns>
            <remarks>
            <para>See remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference(Microsoft.Research.Science.Data.Variable,System.String[])"/>.
            </para></remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference(Microsoft.Research.Science.Data.Variable,System.String[])"/>
            <exception cref="T:System.NotSupportedException">References within the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> are prohibited.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference(Microsoft.Research.Science.Data.Variable,System.String[])">
             <summary>
             Creates a reference variable.
             </summary>
             <param name="var">Target variable.</param>
             <param name="dims">If not null, defines dimensions of the variable within this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
             <returns>Reference variable to the given variable.</returns>
             <remarks>
             <para>It is prohibited to create a reference to a variable from the same <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
             </para>
             <para>
             If <paramref name="dims"/> is null or an empty array, the reference variable has the same dimensions,
             as the <paramref name="var"/> does.
             </para>
             <para>
             Reference variable is a special kind of variables whose purpose is to refer another variable.
             All requests to data and metadata are translated to corresponding requests for the
             underlying variable.
             Changes to underlying variable generate corresponding events for the reference variable, etc.
             Both target and reference variables share the metadata collection.
             Names of dimensions and coordinate systems can change independently and 
             don't cause another variable to be changed.
             </para>
             <para>
             If a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has incoming or outcoming reference, it is linked to another
             <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and they can be committed only together (i.e. "distributed" commit happens).
             The <see cref="P:Microsoft.Research.Science.Data.DataSet.IsLinked"/> property gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>
             has incoming or outcoming references or not.
             The <see cref="M:Microsoft.Research.Science.Data.DataSet.GetLinkedDataSets"/> method returns list of linked DataSets.
             </para>
             </remarks>
             <example>
             The following example creates two DtaSets; creates a variable in the first and
             adds a reference to the variable into the second.
             Then it changes both data and metadata for both variables and checks how these
             changes are propogated.
             <code>
             using (DataSet ds1 = DataSet.Open("msds:csv?file=test.csv&amp;openMode=create"))
             using (DataSet ds2 = DataSet.Open("msds:csv?file=test2.csv&amp;openMode=create"))
            	{
            		ds1.IsAutocommitEnabled = false;
            		ds2.IsAutocommitEnabled = false;
             
            		// Adding a variable "v1" into ds1
            		Variable&lt;int&gt; v = ds1.AddVariable&lt;int&gt;("v1", "1");
            		// Adding a reference to "v1" into ds2
            		Variable&lt;int&gt; rf = ds2.AddVariableByReference&lt;int&gt;(v);
            
            		// ds1 and ds2 are linked through the variable that is changed.
            		// Therefore, a distributed commit happens and both DataSets are to be committed 
            		// within a single transaction.
            		ds1.Commit();
            		Assert.IsFalse(ds1.HasChanges); 
            		Assert.IsFalse(ds2.HasChanges); // ds2 is committed, too
            
            		//-- Changing var
            		int[] a1 = new int[] { 1, 2, 3 };
            		v.Append(a1);  // changing "v1"
            		Assert.IsTrue(ds1.HasChanges);
            		Assert.IsTrue(ds2.HasChanges); // true for the rf is changed
            		ds2.Commit(); // distributed commit commits ds1 and ds2
            
            		// Both variables have same data:
            		Assert.IsTrue(Compare(a1, v.GetData()));  
            		Assert.IsTrue(Compare(a1, rf.GetData()));
            
            		//-- Changing ref var
            		int[] a2 = new int[] { 1, 2, 3, 4, 5, 6 };
            		rf.PutData(a2); // changing reference to "v1"
            		Assert.IsTrue(ds1.HasChanges); // v1 is changed
            		Assert.IsTrue(ds2.HasChanges);
            		ds1.Commit(); // distributed commit
            		Assert.IsTrue(Compare(a2, v.GetData())); // same data
            		Assert.IsTrue(Compare(a2, rf.GetData()));
            
            		//-- Changing var metadata
            		// Metadata changes are propogated, too.
            		v.Metadata["test"] = 10.0;
            		Assert.IsTrue(ds1.HasChanges);
            		Assert.IsTrue(ds2.HasChanges);
            		ds1.Commit();
            		Assert.AreEqual(10.0, (double)v.Metadata["test"]); 
            		Assert.AreEqual(10.0, (double)rf.Metadata["test"]); 
            
            		//-- Changing ref var
            		// Metadata changes are propogated, too.
            		rf.Metadata["test"] = 9.0;
            		Assert.IsTrue(ds1.HasChanges);
            		Assert.IsTrue(ds2.HasChanges);
            		ds1.Commit();
            		Assert.AreEqual(9.0, (double)v.Metadata["test"]);
            		Assert.AreEqual(9.0, (double)rf.Metadata["test"]);
            
            		//-- Changing both
            		rf.Metadata["test"] = 8.0;
            		v.Metadata["test"] = 7.0; // latest must be actual
            		Assert.IsTrue(ds1.HasChanges);
            		Assert.IsTrue(ds2.HasChanges);
            		ds1.Commit();
            		Assert.AreEqual(7.0, (double)v.Metadata["test"]);
            		Assert.AreEqual(7.0, (double)rf.Metadata["test"]);
            	}
             </code>
             </example>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference``1(Microsoft.Research.Science.Data.Variable{``0},System.String[])"/>
             <exception cref="T:System.NotSupportedException">References within the DataSet are prohibited.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddIncomingReference(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Adds incoming refence to the data set.
            The method is called from another data set when it adds a reference to the
            variable from this data set.
            </summary>
            <param name="refVar"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.RemoveIncomingReference(Microsoft.Research.Science.Data.DataSet)">
            <summary>
            Removes all incoming references whose source is given data set.
            This method is invoked by the referal data set.
            </summary>
            <param name="sourceDataSet"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.RemoveIncomingReference(Microsoft.Research.Science.Data.DataSetLink)">
            <summary>
            Removes given incomingLink:
            finds the entry that refers the variable from the given link and
            removes it.
            This method is invoked by the referal data set.
            </summary>
            <param name="incomingLink"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ReferencedVariableGotNewCoordinateSystem(System.Object,Microsoft.Research.Science.Data.CoordinateSystemAddedEventArgs)">
            <summary>
            This method handles cases when a cs has been added to the 
            referenced variable, hence we have to add the same cs to our cs collection.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetAutoDimensions(System.String[])">
            <summary>
            Fills the prepared string array <paramref name="dims"/> with names of dimensions
            those are assigned automicatically.
            </summary>
            <param name="dims">An array to fill with dimensions names.</param>
            <remarks>
            <para>If the <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable(System.Type,System.String,System.Array,System.String[])"/>
            has no dimensions specified, it automatically names the dimensions.
            These names can be found using <see cref="M:Microsoft.Research.Science.Data.DataSet.GetAutoDimensions(System.String[])"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.Boolean,System.String,System.String[])">
            <summary>
            Sets up and adds a <see cref="T:Microsoft.Research.Science.Data.Variable"/> to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> by value, not as a reference.		
            </summary>
            <param name="var">A variable to add.</param>
            <param name="varName">The name of the variable in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <param name="dims">List of names of the variable's dimensions in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <param name="includeCoordinateSystems"></param>
            <returns>Just added variable.</returns>
            <remarks>
            All the data and metadata of the <paramref name="var"/> 
            (and optionally of all related coordinate systems and their axes)
            will be copied to the new just created variable using the data set's data access provider.
            Real copy process is done during committing (at the precommit phase).
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.Boolean)">
            <summary>
            Adds a variable to the data set by value.
            It means that all its data (and optionally of all related coordinate systems and their axes)
            will be copied using the data set's data access provider.
            </summary>
            <param name="var">A variable to add.</param>    
            <param name="includeCoordinateSystems"></param>
            <returns>Just added variable.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Sets up and adds a <see cref="T:Microsoft.Research.Science.Data.Variable"/> to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> by value.		
            </summary>
            <param name="var">A variable to add.</param>
            <returns>Created variable.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.String,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.String,System.String[])">
            <summary>
            Sets up and adds a <see cref="T:Microsoft.Research.Science.Data.Variable"/> to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> by value.
            </summary>
            <param name="var">A variable to add.</param>
            <param name="name">The name of the created variable in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <param name="dims">The created variable's dimensions.</param>
            <returns>Created variable.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.String,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0})">
            <summary>
            Sets up and adds a <see cref="T:Microsoft.Research.Science.Data.Variable"/> to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> by value.
            </summary>
            <param name="var">A variable to add.</param>
            <returns>Created variable.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.String,System.String[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.String,System.String[])">
             <summary>
             Sets up and adds a <see cref="T:Microsoft.Research.Science.Data.Variable"/> to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> by value.	
             </summary>
             <typeparam name="DataType">Type of data.</typeparam>
             <param name="var">A variable to add.</param>
             <param name="name">The name of the created variable in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
             <param name="dims">The created variable's dimensions.</param>
             <returns>Created variable.</returns>
             <remarks>
             <para>
             The method creates new <see cref="T:Microsoft.Research.Science.Data.Variable"/> in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> with the same rank and data type as <paramref name="var"/> 
             and copies all the data and metadata from the <paramref name="var"/> 
             to the created <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
             </para>
             <para>
             Please note, if the <paramref name="var"/> has changes (see <see cref="P:Microsoft.Research.Science.Data.Variable.HasChanges"></see>),
             proposed data also is copied into the target <see cref="T:Microsoft.Research.Science.Data.Variable"/>. But all modifications of the <paramref name="var"/>
             done after the method is finished, do not affect the method's resulting <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
             </para>
             </remarks>
             <example>
             <code>
            	int[] a1 = new int[] { 1, 2, 3 };
            	string[,] a2 = new string[,] { { "a", "b", "c" }, { "d", "e", "f" }, { "g", "h", "i" } };
            
            	using (DataSet src = DataSet.Open("msds:csv?file=test.csv&amp;openMode=create"))
            	using (DataSet dst = DataSet.Open("msds:memory"))		
             {
            		src.IsAutocommitEnabled = false;
            		dst.IsAutocommitEnabled = false;
            		
            		var var1 = src.AddVariable&lt;int&gt;("var1", "x");
            		var var2 = src.AddVariable&lt;string&gt;("var2", "y", "z");
            
            		var1.PutData(a1);
            		var2.PutData(a2);
            		src.Commit();
            
            		var1.Append(new int[] { 4 }); // adding "4" to proposed schema of var1
            		// dvar1 is a deep copy of var1, including proposed schema:
            		var dvar1 = dst.AddVariableByValue&lt;int&gt;(var1); 
            		var dvar2 = dst.AddVariableByValue&lt;string&gt;(var2);
            
            		// Adding "5" to proposed schema of dvar1.
            		// It doesn't affect var1!
            		dvar1.Append(new int[] { 5 });
            
            		// Committing both data sets 
            		dst.Commit();
            		src.Commit();
            
            		Assert.IsFalse(src.HasChanges);
            		Assert.IsFalse(dst.HasChanges);
             
            		Assert.IsTrue(Compare(new int[] { 1, 2, 3, 4 }, var1.GetData()));
            		Assert.IsTrue(Compare(a2, var2.GetData()));
            		Assert.IsTrue(Compare(a2, dvar2.GetData()));
            		Assert.IsTrue(Compare(new int[] { 1, 2, 3, 4, 5 }, dvar1.GetData()));
            	}
             </code>
             </example>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Clone(System.String)">Creates a deep copy of a DataSet.</seealso>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.Boolean,System.String,System.String[])">
            <summary>
            Sets up and adds a variable to the data set by value, not as a reference.
            It means that all its data (and optionally of all related coordinate systems and their axes)
            will be copied using the data set's data access provider.
            </summary>
            <param name="var">A variable to add.</param>
            <param name="varName">The name of the variable in the data set.</param>
            <param name="dims">List of names of the variable's dimensions in the data set.</param>
            <param name="includeCoordinateSystems"></param>
            <returns>Just added variable.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue``1(Microsoft.Research.Science.Data.Variable{``0},System.Boolean)">
            <summary>
            Adds a variable to the data set by value, not as a reference.
            It means that all its data (and optionally of all related coordinate systems and their axes)
            will be copied using the data set's data access provider.
            </summary>
            <param name="var">A variable to add.</param>   
            <param name="includeCoordinateSystems"></param>
            <returns>Just added variable.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetCoordinateSystems(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the specified version of read-only collection of coordinate systems.
            </summary>
            <param name="version">The version of schema to take CoordinateSystems from.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddCoordinateSystemToCollection(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            Adds the coordinate system to the internal collection of coordinate systems 
            and fires appropriate events.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.AddCoordinateSystemToCollection(Microsoft.Research.Science.Data.CoordinateSystem,Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Adds the coordinate system to the internal collection of coordinate systems 
            and fires appropriate events.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateCoordinateSystem(System.String,Microsoft.Research.Science.Data.Variable[])">
            <summary>
            Creates a coordinate system with specified name and attaches it to the data set.
            </summary>
            <param name="name">Name of the coordinate system.</param>
            <param name="axes">Axes contained by the coordinate system.</param>
            <returns>The <see cref="T:Microsoft.Research.Science.Data.CoordinateSystem"/> instance.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.DataSet"/> prohibits different coordinate systems with the same name.
            An attempt to add a coordinate system with existing name leads to an exception.
            </para>
            <para>
            After a coordinate system is added, it should be filled with axes
            using <see cref="M:Microsoft.Research.Science.Data.CoordinateSystem.AddAxis(Microsoft.Research.Science.Data.Variable)"/> methods. After a coordinate system
            is committed, it cannot be modified.
            </para>
            <para>
            A coordinate system can be added to a variable, it means that the variable
            is defined in that coordinate system. And there are constraints on this type
            of relations. See details in remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method.
            </para>
            <example>
            The following example creates a variable "time" to store time moments;
            a coordinate system "Time" with one axis "time";
            and a variable "airTemp" defined in that coordinate system.
            Note that "time" and "airTemp" depend on the same dimension.
            <code>
            using (DataSet ds = CreateDataSet())
            {
            	ds1.IsAutocommitEnabled = false;
            	
            	Variable time = ds.AddVariable&lt;int&gt;("time", "t");
            	CoordinateSystem cs = ds.CreateCoordinateSystem("Time", time);
            	// cs has one axis "time"
            	
            	Variable var = ds.AddVariable&lt;int&gt;("airTemp", "time");
            	var.AddCoordinateSystem(cs);
            	ds.Commit();
            }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateCoordinateSystem(System.String,Microsoft.Research.Science.Data.Variable[],Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Creates a coordinate system with specified name and places it in the given changeset.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetChanges">
            <summary>
            Gets a copy of the DataSet that contains all changes made to it since last committing.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetSchema">
            <summary>
            Gets the schema of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <returns>Committed schema of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>The method returns the committed schema of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            To get proposed schema, use <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>.</remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>Gets the specified version of <see cref="T:Microsoft.Research.Science.Data.DataSet"/> schema.</summary>
            <param name="version">Version of the schema to get.</param>
            <returns>Specified version of schema of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is modified (see <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/> property),
            it has two versions of the schema. First is a committed schema (the version named <see cref="F:Microsoft.Research.Science.Data.SchemaVersion.Committed"/>),
            second is a proposed schema (the version named <see cref="F:Microsoft.Research.Science.Data.SchemaVersion.Proposed"/>). 
            The committed schema describes the actual content of the underlying storage and always
            satisfies the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> constraints.
            The proposed schema may not to satisfy <see cref="T:Microsoft.Research.Science.Data.DataSet"/> constraints and is being accumulated
            as a user modifies the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> (if the <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/> is false).
            After sucessful <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>, the proposed schema becomes committed.
            Version <see cref="F:Microsoft.Research.Science.Data.SchemaVersion.Recent"/> corresponds to the proposed version, if it exists;
            or to the committed version, otherwise.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CaptureCommittedSchema">
            <summary>
            Builds committed schema for the data set and saves it in the
            field committedSchema.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TryCommit">
            <summary>
            Checks constraints and if the check succeeds, commits all recent changes.
            </summary>
            <returns>If commit succeeds, returns true; otherwise, returns false or throws an exception.</returns>
            <remarks>
            <para>
            If commit succeeds, returns true.
            If commit is failed because of failed constraints check, returns false; 
            otherwise, throws an exception describing the failure reason.
            See also <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Commit">
            <summary>
            Checks constraints and if the check succeeds, commits all recent changes.
            </summary>
            <remarks>
            <para>
            Two-phase transaction mechanism is used to commit the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> or a number
            of linked by reference variables <see cref="T:Microsoft.Research.Science.Data.DataSet"/>s (see also 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.GetLinkedDataSets"/>).
            This approach guarantees that persistent data are always in a consistent state, 
            i.e. satisfy required constraints.
            The rule says that all variables sharing a dimension must have equal length
            by that dimension. The dimensions are shared between two or more variables if 
            they have same name. Dimensions names are specified when a <see cref="T:Microsoft.Research.Science.Data.Variable"/>
            is added to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> (see <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.Array,System.String[])"/>).
            </para>
            <para>
            If any changes are made in a schema or data of a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, these changes are 
            accumulated until a user tries to commit them. 
            Therefore, if a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has any changes (see <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/>), 
            there are two versions of a schema available in the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>
            (see <see cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>): 
            first is a committed schema (it is always consistent) and second is a proposed schema 
            (it has no constraints); see also <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>. 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> of proposed changes can succeed only if all 
            constraints are satisfied; in this case proposed changes become new consistent state of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            If the check fails, a user can either try to fix changes or 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> to a previous consistent state.
            </para>
            <para>
            To ease the work with the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, the autocommitting capability is added 
            and is enabled by default (see <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/> property). 
            When it is enabled, the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> tries to commit after every change of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            Consider disable it to increase the performance.
            </para>
            <example>
            <code>
            ds.IsAutocommitEnabled = false;
            . . .
            
            try {
            	// Renaming just added (not yet committed) variable "A", i.e. changing its schema:
            	ds.Variables["A", SchemaVersion.Recent].Name = "D"; 
            	. . .
            	ds.Commit();
            }
            catch  { // commit failed
            	ds.Rollback();
            }
            </code>
            </example>
            <para>
            If constraints check fails, the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method throws 
            <see cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/> exception with information about the fault.
            </para>
            <para>
            See also method <see cref="M:Microsoft.Research.Science.Data.DataSet.TryCommit"/> and property
            <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException">Thrown if commit has failed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Thrown if the DataSet is read only.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if the DataSet is disposed.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TryCommit"/>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CommitCustomChanges(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Commits custom changes.
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ApplyChanges(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Applies given changeset to the data set.
            The process includes both precommit and final commit stages.
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Rollback">
            <summary>
            Rolls back all changes.
            </summary>
            <remarks>Throws no exceptions.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.RollbackCore">
            <summary>
            Implements rollback mechanism for this DataSet (not distributed).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Precommit(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Makes precommit procedure for every variable of the data set and
            returns recent dimension list.
            </summary>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FinalCommit(Microsoft.Research.Science.Data.DataSet.PrecommitOutput)">
            <summary>
            Performs final committing procedure and is called after all changes have been succeeded.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TransformAppendToPut(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Transforms all appended data pieces transforms into put pieces.
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TransformAppendToPut(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Transforms all appended data pieces transforms into put pieces
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CheckChangeset(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Checks all constraints for given changeset and if
            the check failed, throws an exception. 
            No events are thrown during the process.
            </summary>
            <param name="changeset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.UpdateChanges(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Forces dependant variables to update their changes
            (possibly, take it from their source variables).
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CheckConstraints(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Checks global contraints on variables and coordinate systems
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetRecentVariables">
            <summary>
            Returns the recent collection of the variables.
            </summary>
            <remarks> 
            When the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is committed it is committed collection of variables,
            when proposed it is proposed and committed variables.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetRecentVariables(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Returns the collection of the variables including committed and added variables
            from proposed changes.
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.StartChanges">
            <summary>
            Starts the state changing transaction.
            </summary>
            <remarks>
            <para>
            It is used to accumulate changes from public data set API.
            </para>
            <para>
            If the changes has already been started, the method does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CheckComplementarityConstraints(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Checks constraints when the variable has been committed internally, i.e. in local Commit() call.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnTransactionOpened">
            <summary>
            The method is called when new transaction is started.
            </summary>
            <remarks>
            The method is called when a first change has been made in committed data set or its dependencies.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnPrecommitting(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            The method is called at the beggining of the precommit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            The method is called at the beggining of the precommit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, right before individual 
            precommit calls for every its variable, but after the Committing event has fired. 
            At Precommit stage it is required to change the state.
            Override it if you want to perform precommit stage for the data set on your own way.
            For example, it is possible to make actual change of the variables' state simultaneously here.
            On errors an exception should be thrown.
            </remarks>
            <param name="changes">Proposed changes</param>
            <returns>True to continue committing; False to cancel.</returns>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnPrecommit(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
             The method is called at the end of the precommit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            The method is called at the end of the precommit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, right after individual 
            precommit calls for every its variable. 
            At Precommit stage it is required to change the state.
            Override it if you want to perform precommit stage for the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> on your own way.
            For example, it is possible to make actual change of the variables' state simultaneously here.
            On errors an exception should be thrown.
            </remarks>
            <param name="changes">Proposed changes</param>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnCommit">
            <summary>
            The method is called at the end of the commit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            The method is called at the end of the commit stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, right after individual 
            commit calls for every variable. 
            At Commit stage it is required to commit the change of state.
            Override it if you want to perform commit stage for the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> on your own way.
            For example, it is possible to commit actual change of the variables' state simultaneously here.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Undo">
            <summary>
            The method is called when the precommit fails. Providers can cancel possible preparations for committed.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.OnRollback">
            <summary>
            The method is called at the end of the rollback stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            The method is called at the end of the rollback stage of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, right after individual 
            rollback calls for every variable. 
            At Rollback stage it is required to rollback the change of state.
            Override it if you want to perform rollback stage for the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> on your own way.
            For example, it is possible to rollback actual change of the variables' state simultaneously here.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.RollbackLinkedDataSets">
            <summary>
            Makes distributed rollback operations for linked data sets.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.DistributedCommitChanges(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Makes distributed commit;
            given changes are for this data set;
            all others do commit their local changes.
            </summary>
            <param name="proposedChangesForMe">Changes for the DataSet initiated the commit.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetLinkedDataSets">
            <summary>
            Gets DataSets those are linked with this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <returns>An array of DataSets.</returns>
            <remarks>
            <para>If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is linked (see <see cref="P:Microsoft.Research.Science.Data.DataSet.IsLinked"/>),
            this method returns an array of DataSets those have references to this <see cref="T:Microsoft.Research.Science.Data.DataSet"/> or
            targets of references contained in this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, and
            recursively for those DataSets. Also, the returned array always contains
            this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </para>
            <para>If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is not linked, the returned array contains one element - this <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </para>
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.IsLinked"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetActiveLinkedDataSet">
            <summary>
            Builds the list of data sets linked to this data sets with active links
            (i.e. via variables with changes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetActiveLinkedDataSet(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Builds the list of data sets linked to this data sets with active links
            (i.e. via variables with changes).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a stridden variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data element.</typeparam>
            <param name="name">Name of the output variable. <c>null</c> is supported.</param>
            <param name="raw">Source variable to stride.</param>
            <param name="origin">Starting indices. <c>null</c> means all zeros.</param>
            <param name="stride">Stride indices, must contain values greater or equal to 0. <c>null</c> means all 1.</param>
            <param name="count">A number of values in a stridden variable. count[i] == 0 means unlimited i-th dimension,
            <c>null</c> means all zeros.</param>
            <param name="hiddenEntries">Collection of attributes which are not to be inherited from the underlying metadata.
            These entries are changed independently by source and stridden variable.</param>
            <param name="readOnlyEntries">Collection of attributes of a source variable that cannot be changed through this collection.</param>
            <returns>A stridden variable.</returns>
            <remarks>
            <para>
            The method creates a stridden variable, implementing the interface
            <see cref="T:Microsoft.Research.Science.Data.IStriddenVariable"/>, and returns it. 
            The stridden variable has the same type as the <paramref name="raw"/> does.
            The values of that variable are taken from <paramref name="raw"/>.</para>
            <para>
            Subsetting parameters for a stridden variable are: <paramref name="origin"/>, <paramref name="stride"/>,
            <paramref name="count"/>. They are defined when a variable is created.
            Length of the parameters must be equal to the rank of the source variable.
            </para>
            <para>
            <list type="bullet">
            <item><description>origin == null: all start indices are zeros;</description></item>
            <item><description>count == null: all dimensions of a stridden variable are unlimited and depend on the source variable;</description></item>
            <item><description>stride == null: stride is 1 for all dimensions;</description></item>
            <item><description>count[i] == 0: i-th dimension is unlimited and always is equal to the length of the source variable;</description></item>
            <item><description>stride[j] == 0: removes dimension j from result, corresponding count[j] must be 1.</description></item>
            </list>
            </para>
            <para>
            The method creates for a stridden variable new dimensions with unique complex name,
            except for the case when origin=0, stride=1, count=0 (i.e. the dimension is not strided); in this case
            the stridden variable depends on the same dimension as the source variable does.
            </para>
            <para>
            Parameters of the striding are reflected in the <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> of the stridden variable.
            Attribute names are available through const fields of the class <see cref="T:Microsoft.Research.Science.Data.StriddenVariableKeys"/>.
            Metadata attribute "indexSpaceOrigin" of type int[] describes starting indices for stridden variable.
            <list type="bullet">
            <item><description>change of the origin parameter must not lead to change of the stridden variable's shape. 
            The reason is that a shape of any variable can grow only. 
            Therefore, a stridden variable can grow only if the source variable grows.</description></item>
            <item><description>value indexSpaceOrigin[i] is changeable only if corresponding count[i] &gt; 0 
            (so that the shape of a stridden variable is fixed and cannot change).</description></item>
            </list>
            If a value of the indexSpaceOrigin is incorrect, the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> will fail. 
            </para>
            <para>
            Metadata attributes "indexSpaceStride" and "indexSpaceCount" contain arrays of strides and counts 
            respectively, thus describing parameters of the striding. 
            This are the read only attributes that never change (otherwise they would change the shape).
            </para>
            <para>
            Metadata attribute "indexSpaceSourceDims" contains an array of dimension names of
            the source variable, corresponding to origin indices. This is the read only attribute that never changes.
            </para>
            <para>
            Stridden variable implements <see cref="T:Microsoft.Research.Science.Data.IStriddenVariable"/>.
            The <see cref="T:Microsoft.Research.Science.Data.IStriddenVariable"/> interface can be used to imperatively update the origin parameter.
            See method <see cref="M:Microsoft.Research.Science.Data.IStriddenVariable.SetIndexSpaceOrigin(System.Int32[])"/>.
            </para>
            <para>
            Changes to the underlying variable are reflected in the stridden variable, but not vice versa.
            Hence a stridden variable is always read-only.
            </para>
            <para>
            If the <paramref name="name"/> is null, the name of the output variable will be the same as the name 
            of the input variable <paramref name="raw"/>.
            </para>
            <para>Both source and target variable share the metadata collection.
            But some attributes can be separated or markes as read-only for a stridden variable.
            See parameters <paramref name="hiddenEntries"/> and <paramref name="readOnlyEntries"/>.
            </para>
            <example>
            <code>
            using (DataSet target = OpenDataSet())
            {
            	target.IsAutocommitEnabled = true;
            	
            	/* Preparing the data set */
            	Variable&lt;int&gt; v1d = target.AddVariable&lt;int&gt;("test1d", "x");
            	v1d.PutData(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
            	
            	Variable&lt;int&gt; sv1d1 = target.StrideVariable(v1d, new int[] { 1 }, new int[] { 2 }, null, null, new string[] { "units" }, null);
            	sv1d1.Metadata["units"] = "DegC";
            	// Variable sv1d1 also has name "test1d" and depends on new dimension named automatically
            	
            	Assert.IsTrue(Compare(sv1d1.GetData(), new int[] { 1, 3, 5, 7, 9 })); // true
            }
            </code>
            <code>
            using (DataSet target = CreateDataSet())
            {
            	target.IsAutocommitEnabled = true;
            	
                /* Preparing the data set */
            	Variable&lt;int&gt; v2d = target.AddVariable&lt;int&gt;("test2d", new string[]{"x", "y"});
            	v2d.PutData(new int[,] { 0, 1, 2}, {4, 5, 6}, {7, 8, 9});
            	Variable&lt;int&gt; sv2d1 = target.StrideVariable(v1d, new int[,] { 1, 0 }, new int[] { 0, 1 }, null, null);
            	
            	// Dimension "x" is removed:
                Assert.IsTrue(Compare(sv2d1.GetData(), new int[] { 4, 5, 6})); // true
            }
            </code>
            <code>
            using (DataSet target = OpenDataSet())
            {
            	target.IsAutocommitEnabled = true;
            
            	/* Preparing the data set */
            	Variable&lt;int&gt; v1d = target.AddVariable&lt;int&gt;("test1d", "x");
            	v1d.PutData(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
            	
            	Variable&lt;int&gt; sv1d1 = target.StrideVariable(v1d, new int[] { 0 }, new int[] { 2 }, new int[] { 2 }, null);
            	
            	Assert.IsTrue(Compare(sv1d1.GetData(), new int[] { 0, 2 })); // true
            
            	// Changing stride origin through metadata:
            	sv1d1.Metadata[StriddenVariableKeys.KeyForOrigin] = new int[] { 2 };
            	
            	Assert.IsTrue(Compare(sv1d1.GetData(), new int[] { 2, 4 })); // true
            	
            }
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String)">
            <summary>
            Creates a stridden variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data element.</typeparam>
            <param name="name">Name of the output variable. <c>null</c> is supported.</param>
            <param name="raw">Source variable to stride.</param>
            <param name="origin">Starting indices. <c>null</c> means all zeros.</param>
            <param name="stride">Stride indices, must contain values greater or equal to 0. <c>null</c> means all 1.</param>
            <param name="count">A number of values in a stridden variable. count[i] == 0 means unlimited i-th dimension
            <c>null</c> means all zeros.</param>
            <remarks>
            Read remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String)">
             <summary>
             Creates a scaled variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
             </summary>
             <typeparam name="DataType">The type of data after scaling.</typeparam>
             <typeparam name="RawType">The type of data of the variable to scale.</typeparam>
             <param name="name">The name of the scaled variable.</param>
             <param name="raw">The variable to scale.</param>
             <param name="scale">The scale factor.</param>
             <param name="offset">The offset for scaling.</param>
             <returns>The scaled variable.</returns>
             <remarks>
             <para>
             The method creates a scaled variable and returns it.
             The scaled variable has the same rank and shape as the <paramref name="raw"/> does.
             The values of that variable are linear function of the underlying variable <paramref name="raw"/>.
             Changes to the scaled variable propagate to the underlying variable <paramref name="raw"/>.  
             Changes to the underlying variable are reflected in the scaled variable.
             </para>
             <para>Only limited set of primitive blittable type parameters are supported by this generic variable. 
             Use <see cref="T:Microsoft.Research.Science.Data.TransformedVariable`1"/> for other data types.
             These types are <see cref="T:System.Single"/> and <see cref="T:System.Double"/> for <typeparamref name="DataType"/>;
             <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, 
             <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, 
             <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/> and <see cref="T:System.Double"/> for <typeparamref name="RawType"/>.
             </para>
             <para>
             The variable <paramref name="raw"/> must belong to the same DataSet.
             Otherwise, consider first add a reference to the variable 
             (see <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.String,System.String[])"/>).
             </para>
             <para>Both source and targe variable share the metadata collection.
             See <see cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)"/>
             if there is need not to share metadata.
             </para>
             </remarks>
             <example>
             In the following example, a scalar variable (see details in remarks for 
             <see cref="T:Microsoft.Research.Science.Data.Variable"/>)
             is scaled by the formula <c>2*x - 3</c> and then transformed
             to a DateTime. The example also demonstrates two-way changing of the transformed variable and
             source scalar.
             <code>
            	using (DataSet ds = CreateDataSet())
            	{
            		ds.IsAutocommitEnabled = false;	
             
            		DateTime now = DateTime.Now;
            
            		var scalar = ds.AddVariable&lt;int&gt;("scalar");
            		scalar[null] = 5;
            		var scale = ds.ScaleVariable&lt;double, int&gt;(scalar, 2, -3, "scaled");
            		var trans = ds.TransformVariable&lt;DateTime, double&gt;(scale,
            			i =&gt; now.AddDays(i),
            			dt =&gt; dt.Subtract(now).TotalDays,
            			"date");
            
            		ds.Commit();
            
            		Assert.AreEqual(now.AddDays(7), trans[Variable.DefaultIndices]);
            		
            		trans[Variable.DefaultIndices] = now.AddDays(5);
            		ds.Commit();
            		
            		Assert.AreEqual(4, scalar[Variable.DefaultIndices]);
            	}		
             </code>
             </example>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String)"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
             <seealso cref="T:Microsoft.Research.Science.Data.TransformedVariable`1"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
             <summary>
             Creates a scaled variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
             </summary>
             <typeparam name="DataType">The type of data after scaling.</typeparam>
             <typeparam name="RawType">The type of data of the variable to scale.</typeparam>
             <param name="name">The name of the scaled variable.</param>
             <param name="raw">The variable to scale.</param>
             <param name="scale">The scale factor.</param>
             <param name="offset">The offset for scaling.</param>
             <param name="hiddenEntries">Collection of keys which are not to be inherited from the underlying metadata.
             These entries are changed independently.</param>
             <param name="readOnlyEntries">Collection of keys that cannot be changed through this collection.</param>
             <returns>The scaled variable.</returns>
             <remarks>
             <para>
             The method creates a scaled variable and returns it.
             The scaled variable has the same rank and shape as the <paramref name="raw"/> does.
             The values of that variable are linear function of the underlying variable <paramref name="raw"/>.
             Changes to the scaled variable propagate to the underlying variable <paramref name="raw"/>.  
             Changes to the underlying variable are reflected in the scaled variable.
             </para>
             <para>Only limited set of primitive blittable type parameters are supported by this generic variable. 
             Use <see cref="T:Microsoft.Research.Science.Data.TransformedVariable`1"/> for other data types.
             These types are <see cref="T:System.Single"/> and <see cref="T:System.Double"/> for <typeparamref name="DataType"/>;
             <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, 
             <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, 
             <see cref="T:System.UInt64"/>, <see cref="T:System.Single"/> and <see cref="T:System.Double"/> for <typeparamref name="RawType"/>.
             </para>
             <para>
             The variable <paramref name="raw"/> must belong to the same DataSet.
             Otherwise, consider first add a reference to the variable 
             (see <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.String,System.String[])"/>).
             </para>
             <para>Both source and targe variable share the metadata collection.
             See <see cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)"/>
             if there is need not to share metadata.
             </para>
             </remarks>
             <example>
             In the following example, a scalar variable (see details in remarks for 
             <see cref="T:Microsoft.Research.Science.Data.Variable"/>)
             is scaled by the formula <c>2*x - 3</c> and then transformed
             to a DateTime. The example also demonstrates two-way changing of the transformed variable and
             source scalar.
             <code>
            	using (DataSet ds = CreateDataSet())
            	{
            		ds.IsAutocommitEnabled = false;
            		
            		DateTime now = DateTime.Now;
            
            		var scalar = ds.AddVariable&lt;int&gt;("scalar");
            		scalar[null] = 5;
            		var scale = ds.ScaleVariable&lt;double, int&gt;(scalar, 2, -3, "scaled",new string[] { "units" }, null);
            		var trans = ds.TransformVariable&lt;DateTime, double&gt;(scale,
            			i =&gt; now.AddDays(i),
            			dt =&gt; dt.Subtract(now).TotalDays,
            			"date");
                 
                 scale.Metadata["units"] = "DegC";
             
            		ds.Commit();
            
            		Assert.AreEqual(now.AddDays(7), trans[Variable.DefaultIndices]);
            		
            		trans[Variable.DefaultIndices] = now.AddDays(5);
            		ds.Commit();
            		
            		Assert.AreEqual(4, scalar[Variable.DefaultIndices]);
            	}		
             </code>
             </example>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String)"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
             <seealso cref="T:Microsoft.Research.Science.Data.TransformedVariable`1"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.String)">
            <summary>
            Creates a transformed variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data after the transform.</typeparam>
            <typeparam name="RawType">Source variable type of data.</typeparam>
            <param name="raw">Variable to transfrom.</param>
            <param name="transform">Forward transform function.</param>
            <param name="name">Name of the transformed variable.</param>
            <returns>The transformed variable.</returns>
            <remarks>
            See remarks for 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)">
            <summary>
            Creates a transformed variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data after the transform.</typeparam>
            <typeparam name="RawType">Source variable type of data.</typeparam>
            <param name="raw">Variable to transfrom.</param>
            <param name="transform">Forward transform function.</param>
            <param name="backwardTransform">Backward transform function.</param>
            <param name="name">Name of the transformed variable.</param>
            <returns>The transformed variable.</returns>
            <remarks>
            <para>
            The method creates a new variable and returns it.
            The transformed variable has the same rank and shape as the <paramref name="raw"/> does.
            The values of that variable are computed on-the-request via the function <paramref name="transform"/>
            on the basis of the underlying variable <paramref name="raw"/>.
            Changes done to the scaled variable propogate to the underlying variable <paramref name="raw"/>.  
            </para>
            <para>
            If the <paramref name="backwardTransform"/> is not null,  
            changes done to the underlying variable are reflected in the transformed variable using the
            <paramref name="backwardTransform"/>. Otherwise, the transformed variable is read only.
            </para>
            <para>Both source and targe variable share the metadata collection.
            See <see cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)"/>
            if there is need not to share metadata.
            </para>
            <para>Example is given in the remarks for 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String)"/>.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.ScaleVariable``2(Microsoft.Research.Science.Data.Variable{``1},``0,``0,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Creates a transformed variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <typeparam name="DataType">Type of data after the transform.</typeparam>
            <typeparam name="RawType">Source variable type of data.</typeparam>
            <param name="raw">Variable to transfrom.</param>
            <param name="transform">Forward transform function.</param>
            <param name="backwardTransform">Backward transform function.</param>
            <param name="name">Name of the transformed variable.</param>
            <param name="hiddenMetadataEntries">Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</param>
            <param name="readonlyMetadataEntries">Collection of keys that cannot be changed through this collection.</param>
            <returns>The transformed variable.</returns>
            <remarks>
            <para>The <paramref name="hiddenMetadataEntries"/> and <paramref name="readonlyMetadataEntries"/> parameters 
            allow to make some metadata entries indpendent from the metadata of the underlying variable.
            These parameters can be null and this will be considered as an empty collection.</para>
            <para>The name entry is always independent from the underlying metadata.</para>
            <para>
            See details in remarks for 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])">
            <summary>
            Creates a computational variable that calculates data values basing on indexes.
            </summary>
            <typeparam name="DataType">Resulting variable's data type.</typeparam>
            <param name="name">Name of a resulting variable.</param>
            <param name="indexTransform">The function that maps an index into a value.</param>
            <param name="dims">Dimensions of a resulting variable.</param>
            <returns>A computational variable.</returns>		
            <remarks>
            <para>
            The method creates an index-transform variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </para>
            <para>
            Length of a variable is equal to a length of the dimensions it depends on 
            (<paramref name="dims"/>). If there is no any other variable depending on the same
            dimensions, their lengths are 0.
            </para>
            <example>
            <code>
            DataSet ds = . . .;
            
            Variable&lt;double&gt; var = ds.AddVariable&lt;double&gt;("var", new double[] { 3.0, 3.1, 2.9 }, "x");
            Variable&lt;int&gt; trvar = ds.CreateIndexTransformVariable&lt;int&gt;(
            	"transform", indices =&gt; 2 * indices[0] + 1, "x");
            	
            int[] data = (int[])trvar.GetData(); // data: { 1, 3, 5 } 
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.CreateRangeVariable(System.String,System.Int32,System.String)">
            <summary>
            Creates one-dimensional range variable.
            </summary>
            <param name="name">Name of a variable.</param>
            <param name="origin">Starting value.</param>
            <param name="dim">Dimension it depends on.</param>
            <returns>A range variable.</returns>
            <remarks>
            <para>The method creates one-dimensional computational variable and adds it to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            The variable contains data starting with <paramref name="origin"/> and increased by 1
            with their index increasing.
            </para>
            <para>
            Length of a variable is equal to a length of the dimension it depends on 
            (<paramref name="dim"/>). If there is no any other variable depending on the same
            dimension, its length is 0.
            </para>
            <example>
            <code>
            DataSet ds = . . .;
            
            Variable&lt;double&gt; var = ds.AddVariable&lt;double&gt;("var", new double[] { 3.0, 3.1, 2.9 }, "x");
            Variable&lt;int&gt; range = ds.CreateRangeVariable("range", 100, "x");
            int[] data = (int[])range.GetData(); // data: { 100, 101, 102 } 
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.CreateIndexTransformVariable``1(System.String,System.Func{System.Int32[],``0},System.String[])"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.TransformVariable``2(Microsoft.Research.Science.Data.Variable{``1},System.Func{``1,``0},System.Func{``0,``1},System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Finalize">
            <summary>
            Finalizes DataSet instance.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Dispose">
            <summary>
            Disposes the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            <para>
            If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, that is to be disposed, has changes, the <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> method is called
            to cancel proposed changes.
            </para>
            <para>
            It is very important to dispose the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> when there is no need in it anymore.
            At disposal, the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> can free locked resources and unmanaged memory, if required.
            </para>
            <para>
            If the disposing <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has incoming references (see also <see cref="P:Microsoft.Research.Science.Data.DataSet.IsLinked"/>),
            all <see cref="T:Microsoft.Research.Science.Data.DataSet"/>s, referring it, will be disposed, too. 
            In contrast, referred <see cref="T:Microsoft.Research.Science.Data.DataSet"/>s are not affected by this disposal.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Dispose(System.Boolean)">
            <summary>
            Disposes the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <param name="disposing">True, if the method is called from user's code; false, if called from finalizer.</param>
            <remarks>
            <para>
            If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, that is to be disposed, has changes, the <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> method is called
            to cancel proposed changes.
            </para>
            <para>
            It is very important to dispose the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> when there is no need in it anymore.
            At disposal, the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> can free locked resources and unmanaged memory, if required.
            </para>
            <para>
            If the disposing <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has incoming references (see also <see cref="P:Microsoft.Research.Science.Data.DataSet.IsLinked"/>),
            all <see cref="T:Microsoft.Research.Science.Data.DataSet"/>s, referring it, will be disposed, too. 
            In contrast, referred <see cref="T:Microsoft.Research.Science.Data.DataSet"/>s are not affected by this disposal.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetInnerChanges">
            <summary>
            Gets the inner representation of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>'s changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ClearChanges">
            <summary>
            Clears local changes of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            Clears local changes of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> (i.e. makes <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/> equal to false),
            including changes of its variables.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ToString">
            <summary>
            Returns a string representation of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <returns>A string describing the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            <para>
            The result of the <see cref="M:Microsoft.Research.Science.Data.DataSet.ToString"/> looks like the following sample text:
            </para>
            <example>
            msds:nc?file=C:\ScientificDataSet\Data\air.sig995.2007.nc
            air.sig995.2007 [1]
            DSID: f1969410-8896-4ab8-bec5-7150af1db2ca
            [4] air of type Int16 (time:1460) (lat:73) (lon:144)
            [3] time of type Double (time:1460)
            [2] lon of type Single (lon:144)
            [1] lat of type Single (lat:73)
            </example>
            <para>
            The first line shows standard <see cref="P:Microsoft.Research.Science.Data.DataSet.URI"/>. It consists of mandatory URI schema ‘msds’ and 
            SDS provider name ‘nc’ followed by optional provider parameters. 
            </para>
            <para>
            The second line starts with optional <see cref="P:Microsoft.Research.Science.Data.DataSet.Name"/>.
            Integer number at the end of the line is the <see cref="P:Microsoft.Research.Science.Data.DataSet.Version"/> number. 
            Each time <see cref="T:Microsoft.Research.Science.Data.DataSet"/> commits changes requested by a user, it increments a version number. 
            If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is modified (see <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/>), an asterisk <c>‘*’</c> is shown
            after the version number.
            </para>
            <para>
            The third line contains unique identifier of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance 
            (see <see cref="P:Microsoft.Research.Science.Data.DataSet.DataSetGuid"/>).
            </para>
            <para>
            Below goes a list of variables. 
            Each variable summary shows variable <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/>, <see cref="P:Microsoft.Research.Science.Data.Variable.Name"/>, 
            <see cref="P:Microsoft.Research.Science.Data.Variable.TypeOfData"/> and shape (see also <see cref="P:Microsoft.Research.Science.Data.Variable.Dimensions"/>). 
            Variable shape includes one dimension for vectors, two dimensions for matrices etc. 
            Variable summary shows both name and length for each of the dimensions.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.SetCompleteReadOnly">
            <summary>
            Sets the read-only flag for the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and all its variables.
            </summary>
            <remarks>
            If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has changes, the method will throw <see cref="T:System.NotSupportedException"/>.
            After the flag is set, no modifications are allowed to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </remarks>
            <exception cref="T:System.NotSupportedException"><see cref="T:Microsoft.Research.Science.Data.DataSet"/> has changes</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.IsSupported(System.Type)">
            <summary>Checks whether specified type is supported according to <see cref="T:Microsoft.Research.Science.Data.DataSet"/> specification.</summary>
            <param name="type">Type to check.</param>
            <returns>True, if <see cref="T:Microsoft.Research.Science.Data.DataSet"/> supports variables of this type; false, otherwise.</returns>
            <remarks>
            For a complete list of supported types, see remarks for the <see cref="T:Microsoft.Research.Science.Data.Variable"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Clone(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Creates a deep copy of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance.
            </summary>
            <param name="targetUri">URI of the output <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <returns>New <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance that contains copy of the input <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            <para>
            Opens the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> using given <paramref name="uri"/> and copies the current <see cref="T:Microsoft.Research.Science.Data.DataSet"/> content
            into the output <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, restoring the structure and adding variables by value (see
            <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable)"/>) to the target <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            The resulting <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is committed.
            </para>
            <para>
            The method is able to clone a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> only if it fits into a memory.
            If not, use the <c>sds copy</c> command from a command line. 
            </para>
            <para>
            The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> must not be changed during cloning.
            </para>
            <example>
            The following example constructs a read-only <see cref="T:Microsoft.Research.Science.Data.DataSet"/> based on a HTTP resource.
            Then the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is cloned into a <see cref="T:MemoryDataSet"/> which then
            can be modified.
            <code> 
            DataSet ds1 = DataSet.Open("msds:csv?file=http://arca7.wdcb.ru/DataExplorer/data.csv&amp;inferDims=true");
            DataSetUri uri = DataSetUri.Create("msds:memory");
            ... // It is possible to change properties of the uri
            DataSet ds2 = ds1.Clone(uri);
            
            ds1.Dispose();
            </code>
            </example>
            <para>
            About DataSet URI see also remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Clone(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The provider is not registered.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Clone(System.String)">
            <summary>
            Creates a deep copy of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance.
            </summary>
            <param name="targetUri">URI of the output <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</param>
            <returns>New <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance that contains copy of the input <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            See remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.Clone(Microsoft.Research.Science.Data.DataSetUri)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Clone(Microsoft.Research.Science.Data.DataSetUri)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The provider is not registered.</exception>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.GetEnumerator">
            <summary>
            Gets an enumerator for the committed variables collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the committed variables collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32)">
            <summary>
            Gets the range of a single index.
            </summary>
            <param name="index">An index.</param>
            <returns>A range of a single index.</returns>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32,System.Int32)">
            <summary>
            Gets the range of indices from "from" up to "to". 
            </summary>
            <param name="from">Origin index of the range.</param>
            <param name="to">Last index of the range.</param>
            <returns>A range containing given interval.</returns>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the range of indices from "from" up to "to". 
            </summary>
            <param name="from">Origin index of the range.</param>
            <param name="step">Range stride.</param>
            <param name="to">Last index of the range.</param>
            <returns>A stridden range.</returns>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FromToEnd(System.Int32)">
            <summary>
            Gets the range of indices from <paramref name="from"/> up to the maximum index for a given dimension.
            </summary>
            <param name="from">Origin index of the range.</param>
            <returns>An unlimited range.</returns>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.FromToEnd(System.Int32,System.Int32)">
            <summary>
            Gets the range of indices from <paramref name="from"/> up to the maximum index for a given dimension.
            </summary>
            <param name="from">Origin index of the range.</param>
            <param name="step">Range stride.</param>
            <returns>An unlimited range.</returns>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)">
            <summary>
            Gets the range of a single index to choose and reduce a dimension.
            </summary>
            <param name="index">An index.</param>
            <returns>A range of a single index.</returns>
            <remarks>
            <para>
            The rank of the resulting array is less than the rank of the variable 
            the data is read from or written to. 
            Thus <c>ds.Get&lt;double&gt;("mat", i, j)</c> is equivalent to 
            <c>ds.Get&lt;double&gt;("mat", DataSet.ReduceDim(i), DataSet.ReduceDim(j))</c>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Metadata">
             <summary>
             Gets the metadata attached to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
             </summary>
             <remarks>
             <para>
             The property gets the global <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> attached to the DataSet.
             </para>
             <example>
             The following example creates a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and fills its global metadata with different
             types of values;
             then it creates a <see cref="T:Microsoft.Research.Science.Data.Variable"/>, puts data and sets metadata of the variable.
             <code>
             string[] strings = new string[] { "a", "b", "c" };
            	DateTime[] dates = new DateTime[] { DateTime.MinValue, DateTime.Today };
            
            	using (DataSet ds = DataSet.Open("sample.csv?openMode=create"))
            	{
            		ds.IsAutocommitEnabled = false;
            
            		// Updating global metadata of the data set:
            		ds.Metadata["custom"] = "Custom Metadata";
            		ds.Metadata["strings"] = strings;
            		ds.Metadata["dates"] = dates;
            		ds.Metadata["empty"] = new int[0];
            
            		// Adding a variable
            		var var = ds.AddVariable&lt;string&gt;("var", "x");
            		// Updating local metadata of the variable
            		var.Metadata["strings"] = strings;
            		var.PutData(strings);
            
            		// Committing all changes.
            		ds.Commit();
            	}
             </code>
             </example>
             <para>
             To developers of a custom <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider:
             internally the global metadata dictionary is stored as a zero-rank variable of type 
             <see cref="T:Microsoft.Research.Science.Data.EmptyValueType"/> with <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> equal to 
             <see cref="F:Microsoft.Research.Science.Data.DataSet.GlobalMetadataVariableID"/>.
             Creating of such variable can be delegated to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> constructor
             or performed by the custom provider itself 
             (see constructor <see cref="M:Microsoft.Research.Science.Data.DataSet.#ctor(System.Boolean,System.Boolean)"/>).
             The <see cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/> property just refers the dictionary of that variable.
             Also the variable is hidden and <see cref="T:Microsoft.Research.Science.Data.ReadOnlyVariableCollection"/>
             doesn't include it in a common enumeration list and <see cref="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Count"/>
             value. To enumerate through all variables, use <see cref="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.All"/> property.
             Nevertheless, the variable is presented in the <see cref="T:Microsoft.Research.Science.Data.DataSetSchema"/>.
             </para>
             </remarks>
             <seealso cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled">
             <summary>
             Gets or sets the value indicating whether the autocommit is enabled.
             </summary>
             <remarks>
             <para>
             The property is initialized with <c>true</c> at the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> construction.
             Please consider following remarks and think about turning it off.
             </para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> uses two-phase transaction mechanism to commit accumulated changes.
             It is described in remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method.
             But the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> enables an option named "autocommitting" to simplify
             a code working with a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>. 
             If the <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/> property is <c>true</c>,
             an instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider tries to commit itself on every
             change. Therefore, if the proposed schema satisfies all constraints, the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> becomes
             committed; otherwise, it continues to be modifed until a change satisfies constraints.
             </para>
             <para>
             The use of the autocomitting option is convenient but less effecient comparing to
             manual committing. The reason is that manual commit allows to save a number of accumulated changes
             as one and once; autocommitting may lead to series of saving, each of them is usually
             an expensive operation. 
             This can significantly decrease performance, depending on a particular provider type.
             Also autocomitting can prevent from using <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> in some cases
             as it makes it possible to roll back only changes accumulated since last erroneous change,
             i.e. change that broke constraints (see example below for demonstration).
             Therefore, autocomitting should be turned off for complex tasks.
             </para>
             <para>
             When using autocomitting, there is a way to find out whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is committed or not
             after any change: it is the <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/> property that should be checked 
             (see the example below). If the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is not committed, but expected to be,
             it is still possible to get the problem description by an explicit call of the
             <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method and catching an exception.
             </para>
             <example>
             <code>
            	int[] a1 = new int[] { 1, 2, 3 };
            	int[] a2 = new int[] { 4, 5, 6 };
            	string[] a3 = new string[] { "1", "2", "3" };
            
            	using (DataSet ds = DataSet.Open("sample.csv?openMode=createNew"))
            	{
            		ds.IsAutocommitEnabled = true;
            
            		var v1 = ds.AddVariable&lt;int&gt;("v1", "1");				
            		Assert.IsFalse(ds.HasChanges);	// ds is committed		
            		// Note: each commit leads to saving all changes into the underlying storage!
            
            		var v2 = ds.AddVariable&lt;int&gt;("v2", "1");
            		Assert.IsFalse(ds.HasChanges);	// ds is committed 
            
            		var v3 = ds.AddVariable&lt;string&gt;("v3", a3, "1");
            		Assert.IsTrue(ds.HasChanges);	// ds isn't committed since v1,v2,v3 depend on "1"
            										// but shape of v1 and v2 is 0, and shape of v3 is 3.
            
            		v1.PutData(a1);					// ds still is not committed: shape of v2 is still 0,
            		Assert.IsTrue(ds.HasChanges);   // all changes are accumulated in a proposed schema.
            		v2.PutData(a2);					// ds is committed: v1,v2 and v3 have same shape
            		Assert.IsFalse(ds.HasChanges);
            
            		v1.Metadata["Units"] = "Days";  // ds is committed (metadata of v1 updated)
            		Assert.IsFalse(ds.HasChanges);
            
            		var cs = ds.CreateCoordinateSystem("cs", v3);
            		Assert.IsFalse(ds.HasChanges);  // ds is committed: cs with the single axis v3 is added
            
            		v1.AddCoordinateSystem(cs);		// ds is committed: 
            		Assert.IsFalse(ds.HasChanges);  // cs added to v1
            
            		var v4 = ds.AddVariable&lt;string&gt;("v4", "2");
            		Assert.IsFalse(ds.HasChanges);  // ds is committed: new variable v4 depending on "2"
            
            		var cs2 = ds.CreateCoordinateSystem("cs2", v4);
            		Assert.IsFalse(ds.HasChanges);	// ds is committed: new cs with an axis v4.
            		v1.AddCoordinateSystem(cs2);	// ds isn't committed: 
            		Assert.IsTrue(ds.HasChanges);	//	v1 and c2 depend on different dimensions
            
            		// Note: now we already cannot rollback adding of "cs2"!
            		ds.Rollback();	// rolling back only adding of cs2 into v4
            		Assert.IsFalse(ds.HasChanges);	// ds has no changes.		
            	}
             </code>
             </example>
             </remarks>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.AutocommitEnabled">
            <summary>
            Gets or sets the value indicating whether the autocommit is enabled.
            </summary>
            <remarks>
            <para>
            The property is obsolete. Use the propery <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            <para>
            This property refers the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> <see cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/> entry named 
            <see cref="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForName"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.DataSetGuid">
            <summary>
            Gets the globally unique identifier of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Version">
            <summary>
            Gets the current version of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            After a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance is created, its <see cref="P:Microsoft.Research.Science.Data.DataSet.Version"/> is greater than zero.
            On every successful commit the <see cref="P:Microsoft.Research.Science.Data.DataSet.Version"/> number increases by 1.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.IsReadOnly">
            <summary>
            Gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.ReadOnly">
            <summary>
            Gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is read-only.
            </summary>
            <remarks>
            <para>
            The property is obsolete. Use the propery <see cref="P:Microsoft.Research.Science.Data.DataSet.IsReadOnly"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.URI">
            <summary>
            Gets the URI identifying the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            More about DataSet URIs read in remarks for the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class.
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.ConstructionString">
            <summary>
            Gets the URI identifying the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>The property is obsolete. Use <see cref="P:Microsoft.Research.Science.Data.DataSet.URI"/> instead.</remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.IsDisposed">
            <summary>
            Gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has been disposed or not.
            </summary>
            <remarks>
            Disposed <see cref="T:Microsoft.Research.Science.Data.DataSet"/> throws <see cref="T:System.ObjectDisposedException"/> on every 
            invoke of its API.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Dispose"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Item(System.Int32)">
            <summary>
            Gets the variable with the specified index.
            </summary>
            <param name="index">Zero-based index of the variable to get.</param>
            <returns>The variable with specified index.</returns>
            <remarks>This is a short form of the <c>DataSet.Variables[int index]</c> property.</remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.Variables"/>
            <seealso cref="T:Microsoft.Research.Science.Data.ReadOnlyVariableCollection"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Item(System.String)">
            <summary>
            Gets the first variable with the specified name.
            </summary>
            <param name="variableName">The name of the variable to get.</param>
            <returns>The first variable with the specified name.</returns>
            <remarks>This is a short form of the <c>Variables[string name]</c> property.</remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.Variables"/>
            <seealso cref="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Item(System.String)"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.IsLinked">
            <summary>
            Gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has incoming or outcoming references
            to variables from another <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.GetLinkedDataSets"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference``1(Microsoft.Research.Science.Data.Variable{``0},System.String[])"/>
        </member>
        <member name="E:Microsoft.Research.Science.Data.DataSet.RolledBack">
            <summary>
            Occurs when the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is rolled back.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.DataSet.Changed">
            <summary>
            Occurs on every change of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.DataSet.Committing">
            <summary>
            Occurs when the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is committing.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.DataSet.Committed">
            <summary>
            Occurs when the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has been committed successully.
            </summary>
            <remarks>
            <para>
            The event is fired within the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> or <see cref="M:Microsoft.Research.Science.Data.DataSet.TryCommit"/>
            methods, if the commit succeeded. Therefore, the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> returns 
            only after handlers of the event finish.
            </para>
            <para>
            Please note, if within a handler of the <see cref="E:Microsoft.Research.Science.Data.DataSet.Committed"/> 
            the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is modified and the <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> invoked once again,
            the endless recursion can happen.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.Research.Science.Data.DataSet.Changing">
            <summary>
            Occurs when the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is changing.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Variables">
            <summary>
            Gets the read-only collection of <see cref="T:Microsoft.Research.Science.Data.Variable"/> objects.
            </summary>
            <remarks>
            <para>
            The property returns the read-only collection of variables, 
            including both committed and proposed variables
            at the moment of the property access. In other words, if a variable is added
            to the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> right after the collection is returned by this property,
            new variable is not contained in the collection.
            </para>
            <para>
            The returned collection <see cref="T:Microsoft.Research.Science.Data.ReadOnlyVariableCollection"/> provides special logic to 
            work separately with different schema versions. By default, without an explicit specification,
            the collection provides an access to the committed version only.
            </para>
            <para>
            The following example iterates through all variables of a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> 
            being loaded from sample.csv file and prints information about the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> to the console:
            </para>
            <example>
            <code>
            using(DataSet sds = DataSet.Open("sample.csv"))
            {
                Console.WriteLine ("ScientficDataSet " + sds.Name + (HasChanges ? "*" : "") + " contents: ");
            
                Console.WriteLine (" Variables:");
                foreach (Variable v in sds.Variables)
                {
            	    Console.WriteLine (v.ToString());
                }
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <seealso cref="T:Microsoft.Research.Science.Data.ReadOnlyVariableCollection"/>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.CoordinateSystems"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>		
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.SupportsCoordinateSystems">
            <summary>
            Gets the value, indicating whether the data set supports for coordinate systems.
            </summary> 
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.CoordinateSystems">
            <summary>
            Gets the collection of coordinate systems attached to the DataSet.
            </summary>
            <remarks>
            <para>Collection contains all coordinate system of the data set, including 
            committed and proposed coordinate systems, but the simple by name indexer of the 
            <see cref="T:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase"/> collection looks up among committed coordinate
            systems only. To get a coordinate system from a particular schema version use special indexer 
            <see cref="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/> collection:
            </para>
            <example>
            <code>
            CoordinateSystem cs = dataSet.CoordinateSystems["cs", SchemaVersion.Recent];
            </code>
            </example>
            <para>
            There is a method <see cref="M:Microsoft.Research.Science.Data.DataSet.GetCoordinateSystems(Microsoft.Research.Science.Data.SchemaVersion)"/>
            that returns a collection of coordinate systems for a given schema version only.
            </para>
            <para>
            The following example iterates through all coordinate systems of a data set 
            being loaded from sample.csv file and prints information about the data set to the console:
            </para>
            <example>
            <code>
            DataSet sds = new CsvDataSet("sample.csv");
            
            Console.WriteLine ("ScientficDataSet " + sds.Name +
            (HasChanges ? "*" : "") + " contents: ");
            
            Console.WriteLine (" Coordinate Systems:");
            foreach (CoordinateSystem s in sds.CoordinateSystems)
            {
            	Console.WriteLine (s.ToString());
            }
            </code>
            </example>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.CoordinateSystem"/>
            <seealso cref="T:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.GetCoordinateSystems(Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.Variables"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Dimensions">
            <summary>
            Gets the list of dimensions of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </summary>
            <remarks>
            <para>The property returns committed dimensions.
            To get proposed dimensions, use <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/> method.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.HasChanges">
            <summary>
            Gets the value indicating whether the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is modified.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Research.Science.Data.DataSet"/> is modified, if its schema or data are changed.
            To commit changes, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method.
            To rollback changes, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> method.
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSet.Changes">
            <summary>
            Represents proposed version of the <see cref="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSet"/>.
            </summary>
            <remarks>
            The <see cref="!:DataSet.Changes"/> instance accumulates changes as a user
            modifies the <see cref="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSet"/>. As a result, it contains proposed version of the 
            <see cref="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSet"/>. Its schema may not satisfy <see cref="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSet"/> constraints.
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSet.Changes.varChanges">
            <summary>Maps variable ID to Variable.Changes.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Changes.#ctor(Microsoft.Research.Science.Data.DataSet,System.Int32,Microsoft.Research.Science.Data.DataSetSchema,Microsoft.Research.Science.Data.VariableCollection,Microsoft.Research.Science.Data.CoordinateSystemCollection,Microsoft.Research.Science.Data.ChangesetSource)">
            <summary>
            Initializes an instance of the class.
            </summary>
            <param name="dataSet"></param>
            <param name="version"></param>
            <param name="initialSchema"></param>
            <param name="variables"></param>
            <param name="coordinateSystems"></param>
            <param name="source"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Changes.GetVariableChanges(System.Int32)">
            <summary>
            Returns the changes for a given variable (null if it has no changes).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Changes.UpdateChanges(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Updates the collection of changes for the given variable with specified change set.
            </summary>
            <param name="changes"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Changes.Clone">
            <summary>
            Makes a shallow copy of the changes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSet.Changes.GetChangeset">
            <summary>
            Gets the changes description for a public demonstration.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSetGuid">
            <summary>
            Gets the Guid of the changed DataSet.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.DataSet">
            <summary>
            Gets the DataSet instance being changed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.Version">
            <summary>
            Gets the proposed version for the changeset.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.InitialSchema">
            <summary>
            Currently committed schema of the data set.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.Variables">
            <summary>
            Gets the updated collection of variables including unmodified, updated and added variables.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.CoordinateSystems">
            <summary>
            Gets the updated collection of coordinate systems including unmodified and updated coordinate systems.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSet.Changes.ChangesetSource">
            <summary>
            Gets the source of the changeset: it can be either local or remote or both.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.MultipleDataResponse">
            <summary>
            Contains reponses on multiple data requests.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/> class contains responses for each data request
            specified in the <see cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/> method.
            Each response is represented by a <see cref="T:Microsoft.Research.Science.Data.DataResponse"/> class instance.
            The class also contains a <see cref="P:Microsoft.Research.Science.Data.MultipleDataResponse.Version"/> number of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>
            the data is taken from. 
            </para>
            <para>
            See remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.GetMultipleData(Microsoft.Research.Science.Data.DataRequest[])"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MultipleDataResponse.op_Implicit(Microsoft.Research.Science.Data.MultipleDataResponse)~Microsoft.Research.Science.Data.DataResponse[]">
            <summary>
            Converts the <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/> into an array <c>DataResponse[]</c>.
            </summary>
            <param name="response">Response to convert.</param>
            <returns>An array of <see cref="T:Microsoft.Research.Science.Data.DataResponse"/>.</returns>
            <remarks>
            <para>The conversion is to be used when the multiple data request
            contains several requests for one variable and thus
            the actual responses cannot be retrieved through the variable ID.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MultipleDataResponse.ToDataResponses">
            <summary>
            Gets an array of <c>DataResponse[]</c>.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Research.Science.Data.DataResponse"/>.</returns>
            <remarks>
            <para>The conversion is to be used when the multiple data request
            contains several requests for one variable and thus
            the actual responses cannot be retrieved through the variable ID.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MultipleDataResponse.Version">
            <summary>
            Gets the version of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> the data is taken from.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MultipleDataResponse.Count">
            <summary>
            Gets the number of individual responses contained in the <see cref="T:Microsoft.Research.Science.Data.MultipleDataResponse"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MultipleDataResponse.Item(System.Int32)">
            <summary>
            Gets the response for the variable with the given <paramref name="variableID"/>.
            </summary>
            <param name="variableID">The <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable the data is taken from.</param>
            <returns>The response for the particular variable.</returns>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataRequest">
            <summary>
            Describes a request for data of a variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataRequest.GetData(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Gets the request for the entire data of the variable <paramref name="var"/>.
            </summary>
            <param name="var">The variable to get data from.</param>
            <returns>Request for data.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataRequest.GetData(Microsoft.Research.Science.Data.Variable,System.Int32[],System.Int32[])">
            <summary>
            Gets the request for the particular data from the variable <paramref name="var"/>.
            </summary>
            <param name="var">The variable to get data from.</param>
            <param name="origin">The origin of the requested data.</param>
            <param name="shape">The shape of the requested data.</param>
            <returns>Request for data.</returns>
            <remarks>
            <para>
            If <paramref name="origin"/> is <c>null</c>, all zeros are inferred.
            If <paramref name="shape"/> is <c>null</c>, as much as available data is to
            be requested.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataRequest.GetData(Microsoft.Research.Science.Data.Variable,System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Gets the request for the particular data  fromt the variable <paramref name="var"/>.
            </summary>
            <param name="var">The variable to get data from.</param>
            <param name="origin">The origin of the requested data.</param>
            <param name="stride">The steps to subsample the data.</param>
            <param name="shape">The shape of the requested data.</param>
            <returns>Request for data.</returns>
            <remarks>
            <para>
            If <paramref name="origin"/> is <c>null</c>, all zeros are inferred.
            If <paramref name="stride"/> is <c>null</c>, no stride is done (i.e. steps equal 
            to <c>1</c> are to be used).
            If <paramref name="shape"/> is <c>null</c>, as much as available data is to
            be requested.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataRequest.Variable">
            <summary>
            Gets the variable that is to be requested.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataRequest.Origin">
            <summary>
            Gets the origin of requested data.
            </summary>
            <remarks>
            <para>Null means all zeros.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataRequest.Stride">
            <summary>
            Gets the stride of requested data.
            </summary>
            <remarks>
            <para>Null means "no stride", i.e. an array of <c>1</c>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataRequest.Shape">
            <summary>
            Gets the shape of requested data.
            </summary>
            <remarks>
            <para>Null means "as much as available".</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataResponse">
            <summary>
            Contains response on a request for a variable data.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataResponse.DataRequest">
            <summary>
            Gets the request for this response.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataResponse.Data">
            <summary>
            Gets the data contained in the response.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetChangeset">
            <summary>
            Represents changes in a DataSet.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetChangeset.GetChanges(System.Int32)">
            <summary>
            Returns changes for the variable with given id.
            If this variable hasn't been updated, returns null.
            </summary>
            <param name="varId"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetChangeset.ToString">
            <summary>
            Returns brief desrcription of the changeset.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.DataSet">
            <summary>
            Gets the changed DataSet instance.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.ChangesetSource">
            <summary>
            Gets the source of the changeset: it can be either local or remote or both.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.ProposedVersion">
            <summary>
            Get the version number proposed for this changeset.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedVariables">
            <summary>
            Gets an array of added variables.
            </summary>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetChangeset.UpdatedVariables"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.UpdatedVariables">
            <summary>
            Gets an array of updated variables.
            </summary>
            <remarks>
            The array returned by this property doesn't include added variables
            even if they are updated just after they have been added. 
            To get an array of added variables, see property <see cref="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedVariables"/>.
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedVariables"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.AllAffectedVariables">
            <summary>
            Gets an array of variables affected by the DataSet changes.
            </summary>
            <remarks>
            The array returned by this property includes both added variables (see
            <see cref="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedVariables"/>) and updated variables (<see cref="P:Microsoft.Research.Science.Data.DataSetChangeset.UpdatedVariables"/>).
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedVariables"/>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetChangeset.UpdatedVariables"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangeset.AddedCoordinateSystems">
            <summary>
            Gets an array of new coordinate systems.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetChangeAction">
            <summary>
            Kind of changes in a data set.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetChangeAction.RenameOfDataSet">
            <summary>New name is given to a data set.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetChangeAction.NewVariable">
            <summary>New variable is added to a data set.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetChangeAction.UpdateOfVariable">
            <summary>Variable is changed.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetChangeAction.NewCoordinateSystem">
            <summary>New coordinate system is added.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ChangesetSource">
            <summary>
            Describes the source of the changeset.
            </summary>
            <remarks>
            Value <see cref="F:Microsoft.Research.Science.Data.ChangesetSource.Remote"/> can be used by proxy DataSet 
            if it receives a changeset from its storage.
            Furthermore, both values can be used in a combination (via bitwise AND operation) 
            when proxy combines changes received from storage and induced through local DataSet API.
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ChangesetSource.Local">
            <summary>The changeset contains changes induced locally.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ChangesetSource.Remote">
            <summary>The changeset contains changes induced remotely.</summary>
            <remarks>
            This value can be used, for example, by proxy DataSet if it receives a changeset from its storage service.
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ChangesetSource.LocalAndRemote">
            <summary>The changeset contains both local and remote changes.</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittingEventArgs.Changes">
            <summary>
            Gets the changes to commit.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittingEventArgs.DataSet">
            <summary>
            Gets the data set that is being committed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittingEventArgs.Cancel">
            <summary>
            Gets or sets the value which indicates whether to cancel the commit or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetRolledBackEventArgs.DataSet">
            <summary>
            Gets the DataSet that has just been rolled back.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetCommittedEventHandler">
            <summary>
            The delegate for DataSet.Committed event handlers.
            </summary>
            <param name="sender">The committed data set.</param>
            <param name="e">Contains the description of the succeeded committing procedure.</param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetCommittedEventArgs">
            <summary>
            Contains the description of the succeeded committing procedure.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetCommittedEventArgs.#ctor(Microsoft.Research.Science.Data.DataSet,Microsoft.Research.Science.Data.DataSetChangeset,Microsoft.Research.Science.Data.DataSetSchema)">
            <summary>
            Initializes the instance of the class.
            </summary>
            <param name="sds">The committed data set.</param>
            <param name="changes">Committed changes.</param>
            <param name="committedSchema">DataSet schema after commit</param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittedEventArgs.Changes">
            <summary>
            Gets just committed changes.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittedEventArgs.DataSet">
            <summary>
            Gets the DataSet that has just been committed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCommittedEventArgs.CommittedSchema">
            <summary>Gets copy of DataSet schema after commit</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangedEventArgs.Changes">
            <summary>
            Gets the recent changes in the data set.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangedEventArgs.DataSet">
            <summary>
            Gets the DataSet that is changed (but not committed yet).
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangedEventArgs.Action">
            <summary>
            Gets the kind of the change.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangedEventArgs.Target">
            <summary>
            Get the target of the changes, its particular type depends on kind of the action.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangingEventArgs.DataSet">
            <summary>
            Gets the DataSet that is changed (but not committed yet).
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangingEventArgs.Action">
            <summary>
            Gets the kind of the change.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangingEventArgs.Target">
            <summary>
            Get the target of the changes, its particular type depends on kind of the action.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value which indicates whether to cancel the commit or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetLink.IsActive">
            <summary>
            Gets the value indicating that this reference has changes.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.EmptyValueType">
            <summary>
            Represents empty value for DataSet variables to contain
            metadata dictionary only.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.PureComputationalVariable`1">
            <summary>
            Represents an abstract computational variable that produces data not based on an underlying variable.
            </summary>
            <typeparam name="DataType">Type of the output data.</typeparam>
        </member>
        <member name="T:Microsoft.Research.Science.Data.TransformedVariable`1">
            <summary>
            TransformedVariable&lt;DataType&gt; class is a base abstract class for all computational variables.
            </summary>
            <typeparam name="DataType">Type of an element of the variable.</typeparam>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable`1">
            <summary>    
            Represents a single typed array or a scalar with attached metadata.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <remarks>
            <para>
            For type safety and early binding a base class of all variable’s implementations 
            is a generic class <see cref="T:Microsoft.Research.Science.Data.Variable`1"/>, where DataType is a type of an array’s element.  
            To provide a uniform work with variables of unknown or different types, 
            <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> class is derived from a non-generic class <see cref="T:Microsoft.Research.Science.Data.Variable"/>. 
            For example, the collection <see cref="P:Microsoft.Research.Science.Data.DataSet.Variables"/> 
            yields objects of the type 
            <see cref="T:Microsoft.Research.Science.Data.Variable"/> which then might be casted to the required generic type.
            </para>
            <para>
            The generic <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> class adds to the basic <see cref="T:Microsoft.Research.Science.Data.Variable"/> class
            <see cref="M:Microsoft.Research.Science.Data.Variable`1.Append(`0)"/> method to append a single value and a
            typed indexer <see cref="P:Microsoft.Research.Science.Data.Variable`1.Item(System.Int32[])"></see> obtaining a single value from the data array.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <see cref="T:Microsoft.Research.Science.Data.DataSet"/>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable">
             <summary>    
             Represents a single array or a scalar value with attached metadata.
             </summary>
             <remarks>
             <para>
             <see cref="T:Microsoft.Research.Science.Data.Variable"/> represents a single array or a scalar value with attached metadata. 
             <see cref="T:Microsoft.Research.Science.Data.Variable"/> cannot exist separately but always belongs to some <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance. 
             Typically, a variable does not completely load all underlying data into memory, 
             and performs on-demand data access. But in common it depends on a particular 
             implementation of a variable which varies for different <see cref="T:Microsoft.Research.Science.Data.DataSet"/> providers. 
             </para>
             <para>
             Each variable has unique <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/>, <see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> (optional and not unique), <see cref="P:Microsoft.Research.Science.Data.Variable.TypeOfData"/> (i.e. type of an element of variable’s array), 
             <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> (number of dimensions of the array), and shape (<see cref="M:Microsoft.Research.Science.Data.Variable.GetShape"/>; lengths of all array’s dimensions). 
             Type of data and rank are specified when variable is created and cannot be modified afterwards. 
             If a variable is not read-only (see <see cref="P:Microsoft.Research.Science.Data.Variable.IsReadOnly"/>), shape is changing as a user puts data into a variable 
             (i.e. into an underlying array). It is important that the Scientific DataSet model doesn’t limit 
             any dimension, i.e. all dimensions are unbounded. In other words, it is possible to extend 
             a variable by each dimension. But a particular <see cref="T:Microsoft.Research.Science.Data.DataSet"/> providers still may force extra constraints. 
             Methods <see cref="M:Microsoft.Research.Science.Data.Variable.GetShape(Microsoft.Research.Science.Data.SchemaVersion)"/> should be used to get a recent shape of a variable.
             </para>
             <para>
             The <see cref="T:Microsoft.Research.Science.Data.Variable"/> supports types given in the table below.
             An attempt to create a variable for a type not listed in the table, 
             leads to an exception <see cref="T:System.InvalidOperationException"/>.
             The static method <see cref="M:Microsoft.Research.Science.Data.DataSet.IsSupported(System.Type)"/> makes dynamic check whether 
             a type is supported or not.
             <list type="bullet">
             <item><description><see cref="T:System.Double"/></description></item>
             <item><description><see cref="T:System.Single"/></description></item>
             <item><description><see cref="T:System.Int16"/></description></item>
             <item><description><see cref="T:System.Int32"/></description></item>
             <item><description><see cref="T:System.Int64"/></description></item>
             <item><description><see cref="T:System.UInt64"/></description></item>
             <item><description><see cref="T:System.UInt32"/></description></item>
             <item><description><see cref="T:System.UInt16"/></description></item>
             <item><description><see cref="T:System.Byte"/></description></item>
             <item><description><see cref="T:System.SByte"/></description></item>
             <item><description><see cref="T:System.DateTime"/></description></item>
             <item><description><see cref="T:System.String"/></description></item>
             <item><description><see cref="T:System.Boolean"/></description></item>
             </list>
             Note that <see cref="T:System.Char"/> is not supported!
             </para>
             <para>
             Not read-only variable may be renamed at any time through the <see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> property. 
             The property updates the proposed name of the variable, which becomes actual only after committing. 
             To get the proposed name, use <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> accessor for the <see cref="F:Microsoft.Research.Science.Data.SchemaVersion.Proposed"/> version.
             </para>
             <para>Besides a name, a variable has an integer <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> that is given on definition and cannot be modified. 
             The ID is unique inside its <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and can be used for identification of a variable 
             after it’s been renamed. Note that
             several variables with same name within a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> are allowed, but the <see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> is unique.
             </para>
             <para>As mentioned above, along with an array a variable contains metadata attached to the data. 
             Metadata is a dictionary of keys and values represented as an instance of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> class
             and available through the <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> property. 
             Please see remarks for the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> class to read about constraints on metadata.
             </para>
             <para>
             In fact, the name of a variable is just a metadata entry with name defined in
             <see cref="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForName"/>. The same is for a missing value.
             Therefore, properties <see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> and <see cref="P:Microsoft.Research.Science.Data.Variable.MissingValue"/>
             just refer the <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> collection. 
             </para>
             <para>
             List of coordinate systems, attached to a variable, is available through the <see cref="P:Microsoft.Research.Science.Data.Variable.CoordinateSystems"/> collection.
             </para>
             <para>
             How to . . .
             <list type="table">
             <listheader>
             <term>Action</term>
             <description>Solution</description>
             </listheader>
             <item>
             <term>
             Add new variable.
             </term>
             <description>
             <para>
             Methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class, starting with <c>AddVariable...</c>.
             For example, <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/>.	
             </para>
             <para>
             See also <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByReference(Microsoft.Research.Science.Data.Variable,System.String[])"/>,
             <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariableByValue(Microsoft.Research.Science.Data.Variable,System.String,System.String[])"/>.
             </para>
             </description>
             </item>
             <item>
             <term>
             Put data into a variable.
             </term>
             <description>
             Methods <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Array)"/> and <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)"/>
             put an array into a variable. Methods <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)"/>,
             <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.Int32)"/> and <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.String)"/> puts an
             array at the end of the varaible by a certain dimension.
             </description>
             </item>
             <item>
             <term>
             Get data from a variable.
             </term>
             <description>
             Method <see cref="M:Microsoft.Research.Science.Data.Variable.GetData"/> returns entire array of the variables.
             Methods <see cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])"/> and 
             <see cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[],System.Int32[])"/> return a part of the data.
             Generic class <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> also has
             an indexer returning a single value for specified indices:
             <code>
             Variable&lt;int&gt; v = (Variable&lt;int&gt;)dataSet["var"];
             int i = v[new int[] { 0 }]; // gets the value at the index { 0 }
             </code>
             </description>
             </item>
             <item>
             <term>
             Work with metadata.
             </term>
             <description>
             Use a <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> collection available through
             the <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> property.
             <code>
             Variable v = dataSet["var"];
             v.Metadata["Units"] = "m/s";
             . . .
             string units = (string)v.Metadata["Units"];
             </code>
             </description>
             </item>
             </list>
             </para>
             <para>
             Zero-rank variables (also called scalar variables) have <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> 
             equal to zero and can contain a single value. To create a scalar variable, common methods like
             <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/> should be used. 
             To put data or get data from such
             variable, methods like <see cref="M:Microsoft.Research.Science.Data.Variable.GetData"/> and <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Array)"/>
             should be used. The value is represented as a one-dimensional array with a single element.
             Please note, the <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)"/> doesn't support scalars and 
             throws an exception if is invoked for a scalar variable.
             Another way to put data or get data from scalar variable is to use typed indexer
             from the <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> (as in the example below).
             In all these methods, an <c>origin</c> parameter (if it is required) must be either null, an array of <see cref="T:System.Int32"/>
             or special constant <see cref="P:Microsoft.Research.Science.Data.Variable.DefaultIndices"/>.
             <example>
             <code>
            	Variable&lt;double&gt; scalarDbl = ds.AddVariable&lt;double&gt;("scalarDbl", new string[0]);
            	Assert.IsTrue(scalarDbl.Rank == 0);
            	ds.Commit();
            
            	Debug.WriteLine("Default: " + scalarDbl[null]); // prints "Default: 0"
            
            	// Using PutData and GetData methods:
            	scalarDbl.PutData(new double[] { Math.PI });
            	ds.Commit();
            	Assert.AreEqual(1, scalarDbl.GetData().Length); // contains only one element
            	Assert.AreEqual(Math.PI, ((double[])scalarDbl.GetData())[0]); // true
            	
            	// Using indexer:
            	scalarDbl[Variable.DefaultIndices] = 2*Math.PI;
            	ds.Commit();
            	Assert.AreEqual(2*Math.PI, scalarDbl[Variable.DefaultIndices]); // true
             </code>
             </example>
             </para>
             </remarks>    
             <example>
             <code>
            using(DataSet ds = DataSet.Open("msds:memory"))
            {
             ds.IsAutocommitEnabled = false;
             double[] a = new double[] { 12, 34, 43, 67 };
             double[,] b = new double[,] { { 4, 5 }, { 3, 4 }, { 5, 4 } };
             double[] x = new double[] { 100, 101, 102 };
             
             Variable&lt;double&gt; va = ds.AddVariable&lt;double&gt;("a", a, "x");
             Variable&lt;double&gt; vb = ds.AddVariable&lt;double&gt;("b", b, "x", "t");
            
             vb.PutData(new int[] { 1, 1 }, new double[,] { { 8, 9 }, { 13, 14 }, { 15, 14 } });
            
             ds.Commit();
            
             #region Modifying data in variables
            
             double[] suba = (double[])va.GetData(new int[] { 1 }, null);
             double[,] subb = (double[,])vb.GetData(new int[] { 0, 1 }, new int[] { 2, 2 });
            
             #endregion
            
             Print(ds);
             ds.Commit();
            
             vnames.Append(new string[] { "A", "B", "C", "D" });
             vx.PutData(new int[] { 1, 2, 3 });
            
             Print(vx);
             ds.Commit();
            }
            </code>
             </example>
             <seealso cref="T:Microsoft.Research.Science.Data.Variable`1"/>
             <seealso cref="T:Microsoft.Research.Science.Data.DataSet"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckReversibility(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Checks whether the variable is reversible.
            </summary>
            <param name="version">Version of the variable to check.</param>
            <returns>Returns true if the variable is reversible.</returns>
            <remarks>
            <para>
            One of the ScientificDataSet consistency constraints is the constraint on axis data: 
            each axis of numeric and DateTime values must be reversible and an axis of any other type must have 
            no duplicate values. The constraint enables the reversing mechanism which makes it possible to get 
            a value from a variable not only by its indices but also by its coordinate values 
            (for details see remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>). 
            The current release of the library provides a mechanism of the constraint check 
            only for one-dimensional axis and only for numeric and DateTime values. 
            This is the only implemented check for performance reasons.
            </para>
            <para>
            The check is implemented at the level of the <see cref="T:Microsoft.Research.Science.Data.Variable`1"></see> class, 
            the base class for all variables. Therefore each variable inherently enables the reversibility 
            check by default. </para>
            <para>
            There are two methods declared as abstract in the <see cref="T:Microsoft.Research.Science.Data.Variable"/> class and 
            implemented in the <see cref="T:Microsoft.Research.Science.Data.Variable`1"></see> class: 
            public method <see cref="M:Microsoft.Research.Science.Data.Variable.CheckReversibility(Microsoft.Research.Science.Data.SchemaVersion)"/> and internal method <see cref="M:Microsoft.Research.Science.Data.Variable.IndicesOf(System.Object)"/>.</para>
            <para>
            The <see cref="M:Microsoft.Research.Science.Data.Variable.CheckReversibility(Microsoft.Research.Science.Data.SchemaVersion)"/> method makes a check for the given schema version of 
            the variable and returns either true or false depending whether data is reversible or not. 
            The check is actually performed only for one-dimensional variables having a numeric or 
            DateTime data type. For any other case the method just returns true without a check. 
            The method is called in the commit procedure (at the precommit stage; see remarks for 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>) 
            as a part of the CheckConstaints logic of the CoordinateSystem class. 
            This means that it is called at the committing for each variable of a data set being an axis. 
            If the method returns false, the check failed.
            </para>
            <para>
            The current data stored in the data set’s underlying storage is always considered as a consistent, 
            hence when a variable is initialized as an axis on a data set loading, 
            it is also considered as satisfying of all constraints including reversibility 
            without actual check of its persistent data. If the committed variable 
            (that is not an axis) is added as an axis to a coordinate system, 
            then in the next constraint check (i.e. in the nearest commit procedure) 
            all persistent data of the variable is loaded and checked on reversibility. 
            The new data arrays those have been put to the variable are checked during the commit procedure. 
            All these arrays must have the same order and they are also checked in the context of 
            the already committed data (if needed, one value to the left and one to the right 
            of the proposed data array are loaded from the persistent storage and they must 
            be in accordance with the array order itself). The result of the check is cached, 
            so in the next commit the only proposed data arrays are checked.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckReversibility(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Checks whether the variable including the given changes is reversible .
            </summary>
            <param name="changes"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.IndicesOf(System.Object)">
            <summary>
            Returns indices of the variable's element corresponding to the given value.
            </summary>
            <param name="value">The value which index is to be returned.</param>
            <returns>If the value is not found and it is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element 
            that is larger than value. If value is not found and value is greater than 
            any of the elements in array, a negative number which is the bitwise complement of 
            (the index of the last element plus 1).</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable`1.IndicesOf(`0)"/>.
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.changeSetId">
            <summary>
            Current changeset of the variable (not data set!)
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.dimensions">
            <summary>
            Committed array of dimensions.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.csystems">
            <summary>Collection of coordinate systems of the variable.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.changes">
            <summary>Represents changes made in the recent transaction (including schema and data).</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.commitStage">
            <summary>Determines the current stage of the committing process.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetCoordinateSystems(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the specified version of read-only collection of coordinate systems attached to the variable.
            </summary>
            <param name="version">The version of schema to take CoordinateSystems from.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.IsAxis(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the value indicating whether this variable belongs to some coordinate system or not.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.#ctor(Microsoft.Research.Science.Data.DataSet,System.String[],System.Boolean)">
            <summary>
            Initializes an instance of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.#ctor(Microsoft.Research.Science.Data.DataSet,System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Initialize">
            <summary>
            This method must be called by derived class AT THE END of their constructors.
            </summary>
            <remarks>
            The method initializes the schema of the variable.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.FireEventCoordinateSystemAdded(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            Fires the CoordinateSystemAdded event.
            </summary>
            <param name="cs"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.FireEventVariableChanged(Microsoft.Research.Science.Data.VariableChangeAction)">
            <summary>
            Fires the Variable.Changed event.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.FireEventVariableCommitting(Microsoft.Research.Science.Data.Variable.Changes,System.Exception@)">
            <summary>
            Returns false if it is required cancel the committing.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.FireEventVariableChanging(Microsoft.Research.Science.Data.VariableChangeAction,Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Fires the <see cref="E:Microsoft.Research.Science.Data.Variable.Changing"/> event and
            returns false if it is required to cancel changing.
            </summary>
            <param name="proposedChanges"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.OnMetadataChanged(System.Object,Microsoft.Research.Science.Data.VariableMetadataChangedEventArgs)">
            <summary>
            The method is invoked when variable's metadata is changed.
            </summary>
            <remarks>
            The method is invoked every time variable's <see cref="P:Microsoft.Research.Science.Data.Variable.Metadata"/> is changed.
            It starts new transaction (see <see cref="M:Microsoft.Research.Science.Data.Variable.StartChanges"/> method).
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.OnMetadataChanging(System.Object,Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs)">
            <summary>
            The method is invoked before variable's metadata is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetUntypedValue(System.Object[])">
            <summary>Returns the value in specified point in the coordinate system.</summary>
            <remarks>
            Returns the value in specified point in the coordinate system.
            First coordinate system is used as default. 
            Index selection mode is Exact.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetUntypedValue(Microsoft.Research.Science.Data.ReverseIndexSelection,System.Object[])">
            <summary>Returns the value in specified point in the coordinate system.</summary>
            <param name="coords"></param>
            <param name="mode"></param>
            <returns></returns>
            <remarks>
            Returns the value in specified point in the coordinate system.
            First coordinate system is used as default. 
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetUntypedValue(Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            Returns the value in specified point in the coordinate system.
            </summary>
            <param name="cs"></param>
            <param name="coords"></param>
            <returns></returns>
            <remarks>
            Returns the value in specified point in the coordinate system.
            Index selection mode is Exact.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetUntypedValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            Returns the value for the specified point in the coordinate system.
            </summary>
            <param name="mode"></param>
            <param name="cs"></param>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.InnerGetUntypedValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            This method is a bridge to the typed implementation of the method in the <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> class.
            </summary>
            <param name="mode"></param>
            <param name="cs"></param>
            <param name="coords"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])">
            <summary>
            Gets the data for the variable from specified rectangular region.
            </summary>
            <param name="origin">The origin of the rectangle (left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the rectangle. Null means maximal shape.</param>
            <returns>An array of data from specified rectangle.</returns>
            <remarks>
            <para>
            A variable is not a data storage itself; 
            it is just a representation of an array and its metadata stored in the underlying data storage, 
            and it provides an on-demand access to that storage. 
            This enables work with very large arrays, stored in some format, when a researcher might need 
            only a part of the data in memory.
            </para><para>
            To get a committed shape (i.e. vector of lengths by each dimension) of the underlying array the 
            <see cref="M:Microsoft.Research.Science.Data.Variable.GetShape"/> methods should be used. 
            </para>
            <para>
            The method <see cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])"/> enables retrieving a sub-array of the array. 
            Its parameters specify a rectangle of indices that defines which part of the array 
            should be retrieved. First parameter is an <paramref name="origin"/> of the rectangle, 
            which is an index vector. 
            Second parameter defines <paramref name="shape"/> of the rectangle, 
            which is a vector of lengths of the rectangle by each dimension. 
            Lengths of both <paramref name="origin"/> and <paramref name="shape"/> parameters 
            must be equal to the <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> of the variable, 
            i.e. the method doesn’t reduce the dimensionality of an array. </para>
            <para>
            Requested rectangle must be less or equal to the entire shape of a variable (<see cref="M:Microsoft.Research.Science.Data.Variable.GetShape"/>). 
            If the <paramref name="origin"/> is null, it will be considered as a vector of zeros.  
            If the <paramref name="shape"/> is null, the maximum available shape will be used. 
            For instance, <c>GetData(null, null)</c> returns entire array.
            </para>
            <para>
            The GetData methods always get committed data, even if the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> has changes.
            </para>
            <para>For scalar variables <paramref name="origin"/> and <paramref name="shape"/> should be 
            either null or has zero length. For scalar variables GetData returns one dimensional array 
            with one item.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Gets the data for the variable from specified stridden slices.
            </summary>
            <param name="origin">The origin of the rectangle (left-bottom corner). Null means all zeros.</param>
            <param name="count">The shape of the rectangle.</param>
            <param name="stride">Steps to stride the variable.</param>
            <returns>An array of data from specified rectangle.</returns>
            <remarks>
            <para>
            Resulting array contains values from the <see cref="T:Microsoft.Research.Science.Data.Variable"/> and has the same <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> as the variable does. 
            Shape of the resulting array is equal to <paramref name="count"/>,
            except when the <paramref name="count"/> is null. In this case,
            the real shape of the stridden array is "as much as possible" depending on the shape of the 
            variable (<see cref="M:Microsoft.Research.Science.Data.Variable.GetShape"/>).
            If <paramref name="start"/> is null, an integer array with all zeros is inferred.
            The <paramref name="stride"/> contains a step to stride values of the variable.
            For 1d variables, value of a stridden variable with the index <c>i</c> corresponds
            to the value with index <c>start[0] + i*stride[0]</c> of the variable.
            For multidimensional variables, the principle is similar.
            </para>
            <para>
            See also remarks for <see cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])"/>.
            </para>
            <example>
            <code>
            using (DataSet target = CreateDataSet())
            {
            	/* Preparing the data set */
            	Variable&lt;int&gt; v1d = target.AddVariable&lt;int&gt;("test1d", "x");
            	v1d.PutData(new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 });
            	
            	Array arr = v1d.GetData(new int[] { 1 }, new int[] { 2 }, null);
            	
            	Assert.IsTrue(helper_Compare(arr, new int[] { 1, 3, 5, 7, 9 })); // true
            }
            </code>
            </example>
            <para>For scalar variables <paramref name="origin"/>, <paramref name="count"/> and 
            <paramref name="stride"/> should be either null or has zero length. For scalar variables GetData returns one dimensional array 
            with one item.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetStride(System.Array,System.Int32[],System.Int32[])">
            <summary>
            Subsets the array with given strides and count parameters.
            </summary>
            <param name="a"></param>
            <param name="stride"></param>
            <param name="outputCount"></param>
            <returns>An array that is a subset of the source array.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetData">
            <summary>
            Gets the entire data for the variable.
            </summary>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)">
             <summary>
             Puts the data to the variable starting with specified origin indices.
             </summary>
             <param name="origin">Indices to start adding of data. Null means all zeros.</param>
             <param name="data">Data to put to the variable.</param>        
             <remarks>
             <para>If a variable is not read-only (see <see cref="P:Microsoft.Research.Science.Data.Variable.IsReadOnly"/>), 
             then data (that is an array of a correct type and rank) 
             can be put into a variable at any time. All dimensions of a variable are unbounded, 
             so it is possible to extend it by any dimension.
             </para>
             <para>If a variable is defined using <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.Array,System.String[])"/> 
             method that accepts an array as a 
             parameter, the given array is an initial data for that variable. Otherwise 
             initial data of a variable is an empty array.
             </para>
             <para>Usually, an SDS provider doesn’t write affected changes into the underlying storage 
                 immediately (but its behavior still depends on a particular implementation). 
                 To perform it, after all planned actions with the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> are completed, commit 
                 changes as described in remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>.
             </para>
             <para>Important: all arrays as parameters in the PutData methods must have a rank equal 
             to the variable’s rank (see <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/>).
             </para>
             <para>The method <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Array)"/> of the <see cref="T:Microsoft.Research.Science.Data.Variable"/> allows putting an array into variable 
             starting with zero indices.
             </para>
             <para>
             Another method <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)"/> puts data into a rectangle 
             defined by a shape of a given array and 
             an <paramref name="origin"/> parameter, which is an index vector of the starting 
             corner of the rectangle to place data in.
             </para>
             <para>If the variable was not empty, then overlapping values are replaced 
             by values from the proposed array. If new array is larger than existing, 
             variable’s shape is extended. In this case, 
             there can be areas those are not overlapped by both existing data and proposed.</para>
             <para>
             Append methods allow appending an array to existing data. See more in remarks for
             <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.String)"></see>.
             </para>
             <para>For scalar variables <paramref name="origin"/> should be either null or has zero length. 
             Array <paramref name="data"/> should be one dimensional array containing one item.</para>
             </remarks>
             <example>
             <code>
            void DemoAppendPut(DataSet sds)
            {
             Variable&lt;int&gt; var = sds.AddVariable&lt;int&gt;("demoVar", 1);
             // var contains an empty array at the moment
            
             var.PutData(new int[] { 1, 2, 3 } );
             // var contains: 1, 2, 3
            
             var.PutData(new int[] { 4 }, new int[] { 3, 2, 1 });
             // var contains: 1, 2, 3, 0, 3, 2, 1
            
             var.PutData(new int[] { 3 }, new int[] { -1 });
             // var contains: 1, 2, 3, -1, 3, 2, 1
            
             var.Append(new int[] { 0, 0, 0 });
             // var contains: 1, 2, 3, -1, 3, 2, 1, 0, 0, 0
            }
            </code>
            <para>
            Don’t forget either commit changes to make them actual or enable autocommit
            (see <see cref="P:Microsoft.Research.Science.Data.DataSet.IsAutocommitEnabled"/>).
            </para>
             </example>
             <seealso cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.String)"/> 
             <seealso cref="M:Microsoft.Research.Science.Data.Variable.GetData(System.Int32[],System.Int32[])"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/>
             <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
             <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
             <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
             <exception cref="T:System.ArgumentNullException"><paramref name="data"/> is null.</exception>
             <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
             <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.PutData(System.Array)">
            <summary>
            Puts the data to the variable starting with zero indices.
            </summary>
            <param name="a">Data to add to the variable.</param>
            <remarks>See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)"></see>.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)">
            <summary>
            Appends the data to the variable by first dimension.
            </summary>
            <param name="a">Data to append to the variable.</param>
            <remarks>See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.String)"></see>.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.String)">
            <summary>
            Appends the data to the variable by specified dimension.
            </summary>
            <param name="a">Data to append to the variable.</param>
            <param name="dimToAppend">Recent name of the dimension to append by.</param>
            <remarks>
            <para>
            Append methods allow appending an array to existing data. The simplest version of the method
            <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)"/> accepts only an array and appends 
            a variable by its first dimension (i.e. a dimension with index 0).
            </para>
            <para>
            The other Append methods allow to specify either index of a dimension to append by or 
            its name (if dimensions names have been explicitly specified on a definition of the variable, 
            see remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.AddVariable``1(System.String,System.String[])"/>).
            </para>
            <para>
            All changes becomes actual only after committing (<see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>).
            </para>
            <para>
            Note that an array <paramref name="a"/> may have the same rank as the variable does or
            rank of <paramref name="a"/> may be one less than variable.
            So if you need to append a single slice to a variable, 
            it can be presented as an array of rank <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> or
            as an array of rank <see cref="P:Microsoft.Research.Science.Data.Variable.Rank"/> minus one.
            <code>
            // 1 4     7
            // 2 5  +  8 :
            // 3 6     9
            Variable&lt;int&gt; v = dataSet.AddVariable&lt;int&gt;("v", "1", "2");
            v.PutData(new int[2,3] { {1,2,3}, {4,5,6} });
            v.Append(new int[1,3] { { 7, 8, 9 } }); // OK
            v.Append(new int[3] { 7, 8, 9 }); // OK
            </code>
            </para>
            </remarks>
            <example>
            See the example for <see cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)"/>.
            </example>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.PutData(System.Int32[],System.Array)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.Int32)">
            <summary>
            Appends the data to the variable by specified dimension.
            </summary>
            <param name="a">Data to append to the variable. Rank of this array should be equal or be one less than
            rank of the variable</param>
            <param name="dimToAppend">Zero-based index of the dimension to append by.</param>
            <remarks>See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array,System.Int32)"></see>.</remarks>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.SetCompleteReadOnly">
            <summary>
            Sets the read only flag.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckOnAddCoordinateSystem(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            This methods is called when the coordinate system is to be added to the variable.
            </summary>
            <remarks>
            It is possible to override this method to filter out coordinate systems, and
            it is enough to throw an exception to reject the coordinate system.
            Default implementation prohibits add of non-native coordinate systems.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.AddCoordinateSystem(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            Adds the coordinate system to the list of coordinate systems corresponded with the variable.		
            </summary>
            <param name="cs">A coordinate system of the same DataSet.</param>
            <remarks>
            <para>
            Coordinate system must be attached to the same data set as the variable does.
            </para>
            <para>
            Adding of a coordinate system to a variable
            means that the variable is defined in that coordinate system. 
            See also remarks for 
            <see cref="M:Microsoft.Research.Science.Data.DataSet.CreateCoordinateSystem(System.String,Microsoft.Research.Science.Data.Variable[])"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ReadShape">
            <summary>
            Returns the actual shape of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetShape">
            <summary>
            Gets the shape of the variable.
            </summary>
            <remarks>
            <para>Shape of the variable is the array of number of elements in each dimension.</para>
            <para>The method returns the committed shape of the variable.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.GetShape(Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetShape(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Computes and returns the specific version of a shape for the variable.
            </summary>
            <remarks>
            <para>Shape of the variable is the array of number of elements in each dimension.</para>
            <para>The method returns the shape of the variable for the given schema version.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.GetShape"/>
            <seealso cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetDimensions(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the dimension list of the variable for the specified schema version.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Rollback">
            <summary>
            Rolls back variable changes.
            </summary>
            <remarks>
            Rolls back changes for this variable. <see cref="T:Microsoft.Research.Science.Data.DataSet"/> remains modified.
            See also <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/>.
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.Variable.HasChanges"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DoCheckConstraints(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Makes checks of internal constraints.
            </summary>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckCoordinateSystems(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Set of dimensions for each CS must be equal to the set of dimensions for the variable.
            </summary>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>		
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckConstraints(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            If the variable needs for some extra checks before committing this method must be overriden.
            </summary>
            <remarks>
            It shall throw an exception in case of a check failure.
            </remarks>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.OnPrecommit(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the precommit stage of the variable. 
            </summary>
            <remarks>
            At Precommit stage it is required to change the state.
            Override it if you want to perform precommit stage for the variable on your own way in addition to basic.
            On errors an exception should be thrown.
            </remarks>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"></exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.OnCommit(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the commit stage of the variable.
            </summary>
            <remarks>
            At Commit stage it is required to commit the change of state.
            Override it if you want to perform commit stage for the data set on your own way in addition to basic.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Undo">
            <summary>
            The method is called when the precommit fails. Providers can cancel possible preparations for committed.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.OnRollback(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the the rollback stage of the variable.
            </summary>
            <remarks>
            At Rollback stage it is required to rollback the change of state.
            Override it if you want to perform rollback stage for the data set on your own way in addition to basic.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CheckChangeset(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>Checks constraints for the given changeset.</summary>
            <remarks>
            Checks all constraints related to variable for given changeset and returns
            true if all of them are satisfied. No events are thrown during the process.
            </remarks>
            <param name="changeset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.PrecommitLocalChanges">
            <summary>
            Uses data set's local changes to checks constraints.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Precommit(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Checks both internal and external constraints and, if successful,
            changes the state of the variable in accordance with requests (including data writing).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.FinalCommit(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            This method is called after all variables has changed their state successfully and
            commits the state of the variable, so it cannot be rolled back any more.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ApplyChanges(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Applies given changeset to the variable.
            </summary>
            <param name="datasetChanges"></param>
            <remarks>
            The process includes both precommit and final commit stages.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.StartChanges">
            <summary>
            Initiates new change transaction (if it isn't started yet).
            </summary>
            <remarks>
            This concerns changeset accumulated within the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetChanges">
            <summary>
            Gets a copy of the Variable that contains all changes made to it since last committing.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetInnerChanges">
            <summary>
            Gets the inner representation of changes made to the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetSchema">
            <summary>
            Gets the variable schema.
            </summary>
            <remarks>
            <para>The <see cref="T:Microsoft.Research.Science.Data.VariableSchema"/> describes the structure of the <see cref="T:Microsoft.Research.Science.Data.Variable"/>.</para>
            <para>The method returns the committed version of the schema. 
            Read more about version in remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>.
            To get a custom version of the schema, use <see cref="M:Microsoft.Research.Science.Data.Variable.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets specified version of the variable schema.
            </summary>
            <param name="version">Version of the schema to return.</param>
            <remarks>
            <para>The <see cref="T:Microsoft.Research.Science.Data.VariableSchema"/> describes the structure of the <see cref="T:Microsoft.Research.Science.Data.Variable"/>.</para>
            <para>The method returns the specified <paramref name="version"/> of the schema. 
            Read more about version in remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.GetSchema"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CaptureCommittedSchema">
            <summary>
            Builds committed schema for the data set and saves it in the
            field committedSchema.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ResetCommitStage">
            <summary>
            Resets the commit stage to "Committed".
            It makes it possible to restart committing process for the variable anew.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ClearChanges">
            <summary>
            Clears all variable changes.
            </summary>
            <remarks>
            The metohod makes <see cref="P:Microsoft.Research.Science.Data.Variable.HasChanges"/> equal to false.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ChangesUpdateShape(Microsoft.Research.Science.Data.Variable.Changes,System.Int32[])">
            <summary>
            Enables provider implementation to update a shape within changes instance.
            </summary>
            <param name="changes">Existing changes.</param>
            <param name="shape">New shape.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ChangesUpdateMetadataChanges(Microsoft.Research.Science.Data.Variable.Changes,Microsoft.Research.Science.Data.MetadataDictionary)">
            <summary>
            Enables provider implementation to update a metadata changes within changes instance.
            </summary>
            <param name="changes">Existing changes.</param>
            <param name="metadataChanges">New metadata changes dictionary.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ChangesUpdateAffectedRect(Microsoft.Research.Science.Data.Variable.Changes,Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Enables provider implementation to update the affected rectangle within changes instance.
            </summary>
            <param name="changes">Existing changes.</param>
            <param name="affectedRect">New affected rectangle.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ToString">
            <summary>
            Represents the <see cref="T:Microsoft.Research.Science.Data.Variable"/> as a string.
            </summary>
            <remarks>
            <para>
            See remarks for the <see cref="M:Microsoft.Research.Science.Data.DataSet.ToString"/> method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.ToString(System.String)">
            <summary>
            Produces a string with given prefix.
            </summary>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Finalize">
            <summary>
            Finalizes the instance.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Dispose">
            <summary>
            Disposes the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Microsoft.Research.Science.Data.Variable"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
            <remarks>
            <para>This method is called by the public Dispose method and the Finalize method. 
            Dispose invokes the protected Dispose method with the disposing parameter set to true. 
            Finalize invokes Dispose with disposing set to false.
            </para>
            <para>Notes to Inheritors
            </para>
            <para>Dispose can be called multiple times by other objects. 
            When overriding Dispose, be careful not to reference objects that have been previously disposed of in an earlier call to Dispose.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.CreateMetadata">
            <summary>
            Creates metadata collection via the default constructor.
            </summary>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>.</returns>
            <remarks><see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> has internal constructor therefore
            this method should be used by derived classes to create the metadata dictionary.</remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.DataSet">
            <summary>
            Gets the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance the <see cref="T:Microsoft.Research.Science.Data.Variable"/> belongs to.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.TypeOfData">
            <summary>
            Gets the data type for the <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Name">
            <summary>
            Gets the committed name or sets the new name of the <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
            </summary>
            <remarks>
            <para>
            Name of a variable is a custom string (possibly, empty).
            </para>
            <para>Changing the property changes the proposed version of the name of the variable.
            If the variable has just been added to a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>, there is only a proposed 
            version of the name, therefore it will be updated.</para>
            <para>The method never throws an exception. If the variable has no name, it returns empty string.</para>
            </remarks>	
            <seealso cref="P:Microsoft.Research.Science.Data.Variable.ProposedName"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.ProposedName">
            <summary>
            Gets the proposed name if it exists. If not, gets the committed name.
            </summary>
            <see cref="P:Microsoft.Research.Science.Data.Variable.Name"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Version">
            <summary>
            Gets the current version number of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Rank">
            <summary>
            Gets the rank of the variable.
            </summary>
            <remarks>
            Returns non-negative value. Zero means scalar variable.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Dimensions">
            <summary>
            Gets the dimensions list of the <see cref="T:Microsoft.Research.Science.Data.Variable"/>.
            </summary>
            <remarks>
            <para>The property returns committed dimensions.
            To get proposed dimensions, use <see cref="M:Microsoft.Research.Science.Data.Variable.GetSchema(Microsoft.Research.Science.Data.SchemaVersion)"/> method.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Metadata">
            <summary>
            Gets the metadata associated with the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.CoordinateSystems">
            <summary>
            Gets the read-only collection of coordinate systems attached to the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.ID">
            <summary>
            Gets the ID of the variable.
            </summary>
            <remarks>
            It is guaranteed that (1) the ID is unique within the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and
            (2) it is constant for each variable during life time of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>. 
            Since a variable might be renamed, the ID should be used for indexing instead of the name
            to be confident of correct identification of a variable.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.IsReadOnly">
            <summary>
            Gets the value indicating whether the variable is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.ReadOnly">
            <summary>
            Gets the value indicating whether the variable is read-only.
            </summary>
            <remarks>
            <para>
            The property is obsolete. Use the propery <see cref="P:Microsoft.Research.Science.Data.Variable.IsReadOnly"/> instead.
            </para>
            </remarks>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.CoordinateSystemAdded">
            <summary>
            Occurs when a coordinate system has been added to the variable.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.RolledBack">
            <summary>
            Occurs when the variable is rolled back.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.Changed">
            <summary>
            Occurs on every change of the variable (i.e. a change in the *proposed* schema, not *committed*).
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.Committing">
            <summary>
            Occurs when the variable is committing.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.Committed">
            <summary>
            Occurs when the variable has been committed successully.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.Variable.Changing">
            <summary>
            Occurs when the variable is changing.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.MissingValue">
            <summary>
            Gets or sets a value to be considered as a missing value for the variable's data.
            </summary>
            <remarks>
            <para>Type of the value must be same as the vatiable's <see cref="P:Microsoft.Research.Science.Data.Variable.TypeOfData"/>.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.HasChanges">
            <summary>
            Gets the value indicating whether the variable is modified.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Research.Science.Data.Variable"/> is modified, if a user changed its metadata or data.
            If a variable becomes modified, all <see cref="T:Microsoft.Research.Science.Data.DataSet"/> becomes modified, too
            (see <see cref="P:Microsoft.Research.Science.Data.DataSet.HasChanges"/>).
            To commit changes, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/> method.
            To roll changes back, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> method.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.DefaultIndices">
            <summary>
            Gets the default indices array that doesn't depend on a variable's rank.
            </summary>
            <remarks>
            The property always returns null. 
            This value that can be used as an origin in put/get data operation with scalar variables;
            also, if used as an origin in all PutData operations, it means "all zeros" array.
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable.Changes">
            <summary>
            Represents changes in the variable schema.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.changeSet">
            <summary>
            Version of the changeset.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.id">
            <summary>
            Variable id.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.metadataChanges">
            <summary>
            Changed/added attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.coordinateSystems">
            <summary>
            Proposed coordinate systems list.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.shape">
            <summary>
            Proposed shape of the variable.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.affectedRectangle">
            <summary>
            Rectangle affected by data changes.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.Changes.initialSchema">
            <summary>
            Committed schema that is being changed.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Changes.#ctor(System.Int32,Microsoft.Research.Science.Data.VariableSchema,Microsoft.Research.Science.Data.MetadataDictionary,Microsoft.Research.Science.Data.CoordinateSystemCollection,System.Int32[],Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            
            </summary>
            <param name="version"></param>
            <param name="initialSchema"></param>
            <param name="metadataChanges"></param>
            <param name="css"></param>
            <param name="shape"></param>
            <param name="affectedRect"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Changes.GetDimensionList">
            <summary>
            Builds and returns the read only dimension list using
            its fields with dimensions names and proposed shape.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.Changes.Clone">
            <summary>Clones all changes.</summary>
            <returns>Exact copy of changes.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.ChangeSet">
            <summary>
            Gets the new version number.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.ID">
            <summary>
            Gets the ID of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.MetadataChanges">
            <summary>
            Gets added and updated metadata attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.CoordinateSystems">
            <summary>Gets collection of added coordinate systems.</summary>
            <remarks>This collection may contain added coordinate systems only,
            because a coordinate system is immutable after it is committed.</remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.Shape">
            <summary>
            Gets the new shape of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.AffectedRectangle">
            <summary>
            Gets the rectangle in the index space where data is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.InitialSchema">
            <summary>
            Gets the schema of the previous version.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.Changes.ChangeType">
            <summary>
            Gets the value describing what is changed in the variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable.DataChanges">
            <summary>
            Represents changes both in schema and data for the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DataChanges.#ctor(System.Int32,Microsoft.Research.Science.Data.VariableSchema,Microsoft.Research.Science.Data.MetadataDictionary,Microsoft.Research.Science.Data.CoordinateSystemCollection,System.Int32[],Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            
            </summary>
            <param name="version"></param>
            <param name="initialSchema"></param>
            <param name="metadataChanges"></param>
            <param name="css"></param>
            <param name="shape"></param>
            <param name="affectedRect"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DataChanges.#ctor(System.Int32,Microsoft.Research.Science.Data.VariableSchema,Microsoft.Research.Science.Data.MetadataDictionary,Microsoft.Research.Science.Data.CoordinateSystemCollection,System.Int32[],Microsoft.Research.Science.Data.Rectangle,System.Collections.Generic.List{Microsoft.Research.Science.Data.Variable.DataPiece})">
            <summary>
            
            </summary>
            <param name="version"></param>
            <param name="initialSchema"></param>
            <param name="metadataChanges"></param>
            <param name="css"></param>
            <param name="shape"></param>
            <param name="affectedRect"></param>
            <param name="data"></param>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.DataChanges.dataPieces">
            <summary>Contains proposed data arrays put with PutData or AppendData methods.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DataChanges.Clone">
            <summary>Clones all changes.</summary>
            <returns>Exact copy of changes.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.DataChanges.Data">
            <summary>
            Gets the list of proposed data pieces.
            </summary>
            <remarks>
            Contains proposed data arrays put with PutData or AppendData methods.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable.DataChanges.HasData">
            <summary>
            Gets the value indicating whether the changeset has proposed data or not.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable.ChangeTypes">
            <summary>
            Describes what is actually changed in a variable.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.ChangeTypes.None">
            <summary>No changes.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.ChangeTypes.DataUpdated">
            <summary>Data of a variable is updated.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.ChangeTypes.MetadataUpdated">
            <summary>Metadata of a variable is updated.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable.DataPiece">
            <summary>
            Represents an array that is a subarray of an entire array, arbitrary positioned.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.DataPiece.Origin">
            <summary>
            Origin is the indices to put the data.
            </summary>
            <remarks>
            Append operations prodices pieces containing all zeros except one element,
            which is -1.
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable.DataPiece.Data">
            <summary>
            Data to put.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DataPiece.UpdateAppendedOrigin(System.Int32[],System.Int32[])">
            <summary>
            Fills the origin with real values if it is a part of append procedure.
            </summary>
            <param name="origin"></param>
            <param name="shape">Real shape of the data.</param>
            <exception cref="T:System.ArgumentException">Origin is a part of append but is incorrect.</exception>
            <returns>Updated origin</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable.DataPiece.UpdateAppendedOrigin(System.Int32[],System.Func{System.Int32,System.Int32})">
            <summary>
            Fills the origin with real values if it is a part of append procedure.
            </summary>
            <param name="origin"></param>
            <param name="shape">Real shape of the data: returns length for given dimension.</param>
            <exception cref="T:System.ArgumentException">Origin is a part of append but is incorrect.</exception>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable`1.committedOrder">
            <summary>
            The current order of the data (this allows not to check all data from a storage each time and cache the result).
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Variable`1.proposedOrder">
            <summary>
            The current order of the proposed data (this allows not to check all data from a storage each time and cache the result).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.OnVariableChanged(System.Object,Microsoft.Research.Science.Data.VariableChangedEventArgs)">
            <summary>
            Resets proposedOrder on put data
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.IndicesOf(System.Object)">
            <summary>
            Returns indices of the variable's element corresponding to the given value.
            </summary>
            <param name="value">The value which index is to be returned.</param>
            <returns>If the value is not found and it is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element 
            that is larger than value. If value is not found and value is greater than 
            any of the elements in array, a negative number which is the bitwise complement of 
            (the index of the last element plus 1).</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.Variable`1.IndicesOf(`0)"/>.
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.IndicesOf(`0)">
            <summary>
            Returns indices of the variable's element corresponding to the given value.
            </summary>
            <param name="value">The value which index is to be returned.</param>
            <returns>If the value is not found and it is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first element 
            that is larger than value. If value is not found and value is greater than 
            any of the elements in array, a negative number which is the bitwise complement of 
            (the index of the last element plus 1).</returns>
            <remarks>
            <para>
            The method accepts a value and returns the corresponding indices vector of the element 
            containing the given value. 
            Please note that the method works with the committed data only. </para>
            <para>
            If the value is not found and it is less than one or more elements in array, 
            a negative number which is the bitwise complement of the index of the first 
            element that is larger than value. If value is not found and value is greater 
            than any of the elements in array, a negative number which is the bitwise complement of 
            (the index of the last element plus 1). </para>
            <para>
            The method is used in <see cref="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])"/>
            methods of the <see cref="T:Microsoft.Research.Science.Data.Variable`1"/> retrieving a value by given coordinate values.  
            The method is implemented for 1d-variables only and for any other rank it throws the 
            <see cref="T:System.NotSupportedException"/>. The method uses the order of an array computed by the
            <see cref="M:Microsoft.Research.Science.Data.Variable`1.CheckReversibility(Microsoft.Research.Science.Data.Variable.Changes)"/> method during the constraints check.</para>
            <para>
            Each index in the returned array corresponds to the dimension with the same index
            from the collection <see cref="P:Microsoft.Research.Science.Data.Variable.Dimensions"/>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.CheckReversibility(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Checks whether the variable is reversible.
            </summary>
            <param name="changes">Changes to be applied to the variable.</param>
            <returns>Returns true if the variable is reversible.</returns>
            <remarks>
            The method makes actual check for 1d variables only. 
            For any other rank it just returns true without the check.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetOrder1d(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            <para>Gets the order of the variable (works for 1d variables only).</para>
            <para>Affects committedOrder and proposedOrder fields.</para>
            <para>Returns Ascendant, Descendant, Unknown or None.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.IndexOfDataPieceContaining(Microsoft.Research.Science.Data.Variable.DataChanges,System.Int32)">
            <summary>
            Gets the index of the data piece containg specified index or -1.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String[],System.Boolean)">
            <summary>
            Initializes an instance of the variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.Initialize">
            <summary>
            Initializes the schema of the variable.
            </summary>
            <remarks>
            This method shall be called by derived class AT THE END of their constructors.
            It initializes the schema of the variable.
            Start changes of the variable.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.InnerGetUntypedValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            This method is a bridge to the typed implementation of the method in the Variable{DataType} class.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetValue(System.Object[])">
            <summary>
            Returns the typed value in specified point in the coordinate system.
            </summary>
            <remarks>
            First coordinate system is used as default. 
            Index selection mode is Exact.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,System.Object[])">
            <summary>
            Returns the typed value in specified point in the coordinate system.
            </summary>
            <remarks>
            First coordinate system is used as default. 
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            Returns the typed value in specified point in the coordinate system.
            </summary>
            <remarks>
            First coordinate system is used as default. 
            Index selection mode is Exact.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetValue(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.CoordinateSystem,System.Object[])">
            <summary>
            Returns the typed value in specified point in the coordinate system.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetIndex1d(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.Variable,System.Object)">
            <summary>
            Returns index (or two nearest indices) in the given axis for specified coordinate value.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.GetValue1d(Microsoft.Research.Science.Data.ReverseIndexSelection,Microsoft.Research.Science.Data.Variable,System.Object)">
            <summary>
            Returns value in the given axis for specified coordinate value.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Variable`1.Append(`0)">
            <summary>
            For one dimensional variables appends a single value.
            </summary>
            <param name="value">A value to append.</param>
            <seealso cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable`1.TypeOfData">
            <summary>
            Gets the data type for the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Variable`1.Item(System.Int32[])">
            <summary>
            Gets or sets single value.
            </summary>
            <param name="indices">Indices of a postion to get or set value</param>
            <returns>Single variable value</returns>
            <remarks>No input out optimization is done when getting/setting single values of a variable.
            In general, it is more efficient to get values in arrays using GetData overloads.</remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Variable`1.GetValueIndex">
            <summary>
            Stores a pair of indices and interpolation coefficient.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ITransformedVariable">
            <summary>
            Untyped representation of a transform variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformedVariable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="dims"></param>
            <param name="dataSet"></param>
        </member>
        <member name="F:Microsoft.Research.Science.Data.PureComputationalVariable`1.shape">
            <summary>Committed shape of the variable.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.PureComputationalVariable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="sds"></param>
            <param name="dims"></param>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.PureComputationalVariable`1.ReadShape">
            <summary>
            Returns shape looking for length of dimemsions of other variable of data set.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.PureComputationalVariable`1.Metadata">
            <summary>
            Gets the metadata collection of the computational variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.TransformationVariable`2">
            <summary>
            Represents an abstract computational variable performing
            a reversible or non-reversible transformation of a single source variable.
            </summary>
            <typeparam name="SourceDataType">Type of data for the underlying variable.</typeparam>
            <typeparam name="ResultDataType">Type of data for the output variable.</typeparam>
            <remarks>
            <para>TransformationVariable "mirrors" the data in underlying variable. 
            All requests to data translate to corresponding requests for underlying variable.
            Changes to underlying variable generate corresponding events for the transformation variable, etc.</para>
            <para>If transformation is reversible, the data is "mirrored" in both ways. 
            Calls to Variable.PutData() overloads or setting the Variable[indices] property 
            translate to corresponding changes of underlying variable data.</para>
            <para>
            Metadata of the underilying variable propagate to metadata for the TransformationVariable except some
            certain entries, name and the provenance being an example of such exception. Therefore, changes of the replicated
            entries in this variable update the same entries in the underlying variable and vice versa.
            The extra parameters in the constuctor allow specifying the list of independent entries.
            See more in remarks for the constructor.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.TransformationVariable`2.sourceVariable">
            <summary>
            The variable this computational variable is based on.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.TransformationVariable`2.metadata">
            <summary>
            The metadata collection is based on the source variable.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.TransformationVariable`2.proposedChangesList">
            <summary>Collection of proposed changes currently being handled. This collection should
            enable correct concurrent work on simultaneous changing of the underlying and this variables.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,Microsoft.Research.Science.Data.Variable{`1},System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="sds"></param>
            <param name="name"></param>
            <param name="dims"></param>
            <param name="sourceVariable">The variable this computational variable is based on.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,Microsoft.Research.Science.Data.Variable{`1},System.String[],System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="hiddenEntries">Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</param>
            <param name="readonlyEntries">Collection of keys that cannot be changed through this collection.</param>
            <param name="name"></param>
            <param name="dims"></param>
            <param name="dataSet"></param>
            <param name="sourceVariable">The variable this computational variable is based on.</param>
            <remarks>
            <para>The <paramref name="hiddenEntries"/> and <paramref name="readonlyEntries"/> parameters 
            allow to make some metadata entries indpendent from the metadata of the underlying variable.
            These parameters can be null and this will be considered as an empty collection.</para>
            <para>Two entries are always independent from the underlying metadata. These are
            the name and the provenance entries of the variable's metadata.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.Transform(System.Int32[],System.Array)">
            <summary>
            Transforms underlying data from rawData array to TransformedVariable data
            </summary>
            <param name="origin">Origin of rawData in underlying variable.</param>
            <param name="rawData">Data to be transformed.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.TransformIndexRectangle(Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Transforms the underlying variable's rectangle into the rectangle 
            for this transformation variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.ReverseTransform(System.Int32[],System.Array)">
            <summary>
            Transforms TransformedVariable data back into underlying variable
            </summary>
            <param name="origin">Origin of data in TransformedVariable.</param>
            <param name="data">Data to be transformed back into underlying variable.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.ReverseTransformIndexRectangle(Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Transforms the transformation variable's rectangle into the rectangle 
            for its underlying variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TransformationVariable`2.ReadShape">
            <summary>
            Returns the shape that is a result of transformation of source variable's shape through the 
            <see cref="M:Microsoft.Research.Science.Data.TransformationVariable`2.TransformIndexRectangle(Microsoft.Research.Science.Data.Rectangle)"/> method.
            </summary>
            <returns>The committed shape of the variable.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.TransformationVariable`2.SourceVariable">
            <summary>
            Gets the underlying variable that is being transformed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.TransformationVariable`2.Metadata">
            <summary>
            Gets the metadata collection of the computational variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.MetadataChanges">
            <summary>
            Stores changes of the metadata dictionary.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.MetadataDictionary">
            <summary>
            Represents a dictionary of attributes attached to a variable.
            </summary>
            <remarks>
            <para>
            Variable metadata is a dictionary of keys and values.
            Key is always a string with length limited by 256 characters.
            Metadata key cannot be null or an empty string.
            It cannot contain following Unicode symbols: <c>'/'</c>, <c>'0x00'-'0x1F'</c>, <c>'0x7F'-'0xFF'</c>.
            Value is an instance of any of supported type, listed in the table below: 
            <list type="bullet">
            <item><description>all supported data types (listed in the remarks for <see cref="T:Microsoft.Research.Science.Data.Variable"/>);</description></item>
            <item><description>one-dimensional array of supported data types.</description></item>
            </list>
            </para>   
            <para>
            There are two predefined keys to be used for a variable name (<see cref="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForName"/>)
            and a missing value attribute (<see cref="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForMissingValue"/>). 
            The <see cref="T:Microsoft.Research.Science.Data.Variable"/> class has appropriate properties to get an access to these values.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
            <seealso cref="P:Microsoft.Research.Science.Data.Variable.Name"/>
            <seealso cref="P:Microsoft.Research.Science.Data.Variable.MissingValue"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForName">
            <summary>Key for the Name entry.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.MetadataDictionary.KeyForMissingValue">
            <summary>Key for the MissingValue entry.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.MetadataDictionary.dictionary">
            <summary>Committed metadata attributes.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.MetadataDictionary.modified">
            <summary>Modified attributes (added or changed). May be null.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.#ctor">
            <summary>
            Creates an instance of the MetadataDictionary class.
            </summary>
            <remarks>
            The new instance enables both reading and changing.
            <para>
            To create, consider use factories: Variable.CreateMetadata(),
            DataSet.CreateMetadata().</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the MetadataDictionary class.
            </summary>
            <param name="readOnly">If true, returned collection is read only.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.#ctor(System.Boolean,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an instance of the MetadataDictionary class.
            </summary>
            <param name="readOnly"></param>
            <param name="dict"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.AreEquals(System.Object,System.Object)">
            <summary>
            Compares two metadata values (either null, scalars, or 1d-array).
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.CheckValue(System.Object)">
            <summary>
            Checks whether the value satisfies constraints.
            If not, throws an exception.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.CheckKey(System.String)">
            <summary>
            Checks whether the key satisfies constraints.
            If not, throws an exception.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the metadata contains the committed entry with the given <paramref name="key"/>.
            </summary>
            <param name="key">The case sensitive key to locate in the collection.</param>
            <returns><value>true</value> if the collection contains an entry with the given key.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)">
            <summary>
            Determines whether the metadata contains the committed entry with the given <paramref name="key"/>.
            </summary>
            <param name="key">The key to locate in the collection.</param>
            <param name="ignoreCase">The value indicating whether the method should ignore the case of the key or not.</param>
            <returns><value>true</value> if the collection contains an entry with the given key.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Determines whether the metadata contains the committed entry with the given <paramref name="key"/>.
            </summary>
            <param name="key">The case sensitive to locate in the collection.</param>
            <param name="version">Version of the schema to locate the key in.</param>
            <returns><value>true</value> if the collection contains an entry with the given key; otherwise, <value>false</value>.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)">
            <summary>
            Determines whether the metadata contains the committed entry with the given <paramref name="key"/>.
            </summary>
            <param name="key">The case sensitive to locate in the collection.</param>
            <param name="version">Version of the schema to locate the key in.</param>
            <param name="ignoreCase">The value indicating whether the method should ignore the case of the key or not.</param>
            <returns><value>true</value> if the collection contains an entry with the given key; otherwise, <value>false</value>.</returns>
            <remarks>
            <example>
            <code>
            dataSet.IsAutocommitEnabled = false;
            . . .
            
            Variable v = dataSet["var"];
            v.Metadata["custom"] = 10;
            
            Console.WriteLine(v.Metadata.ContainsKey("custom", SchemaVersion.Proposed)); // prints "True"
            dataSet.Commit();
            
            //Console.WriteLine(v.Metadata.ContainsKey("custom", SchemaVersion.Proposed)); // throws an exception
            Console.WriteLine(v.Metadata.ContainsKey("custom")); // prints "True"
            Console.WriteLine(v.Metadata.ContainsKey("Custom")); // prints "False"
            Console.WriteLine(v.Metadata.ContainsKey("Custom", false)); // prints "True"
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ForEach(System.Action{System.Collections.Generic.KeyValuePair{System.String,System.Object}},Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Performs the specified action on each element of the metadata collection. 
            </summary>
            <param name="action">The Action{KeyValuePair{string,object}} to perform on each element of array.</param>
            <param name="version">The version of the metadata schema to get elements from.</param>
            <remarks>
            <example>
            Prints to the console all metadata entries of the variable with name "var":
            <code>
            Variable v = dataSet.Variables["var"];
            v.Metadata.ForEach( entry => Console.WriteLine(entry.Key + ": " + entry.Value), SchemaVersion.Committed );
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.GetComittedOtherwiseProposedValue``1(System.String)">
            <summary>
            If there is a committed version for the given key, the method returns it.
            If not, it returns the proposed version (or throws an exception if there is no one).
            </summary>
            <typeparam name="VType">Type of the resulting value for the given key.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.GetComittedOtherwiseProposedValue``1(System.String,``0)">
            <summary>
            If there is a committed version for the given key, the method returns it.
            If not, it returns the proposed version (or returns specified default value).
            </summary>
            <typeparam name="VType">Type of the resulting value for the given key.</typeparam>
            <param name="key">Key to get value for.</param>
            <param name="defaultValue">If the key not found returns this value.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.AsDictionary(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Represents the metadata collection as a Dictionary{string,object}.
            </summary>
            <param name="version">Version of the schema to get elements from.</param>
            <returns>An instance of a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing 
            all elements from the metadata collection.</returns>
            <remarks>
            <para>
            The method creates new instance of the <see cref="T:System.Collections.Generic.Dictionary`2"/> and
            copies all elements from the specified version of the metadata collection into
            that instance. Therefore, modification of the dictionary will not affect the metadata
            collection and vice versa.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.AsDictionary"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.AsDictionary">
            <summary>
            Represents the metadata collection as a <b>Dictionary{string,object}</b>.
            </summary>
            <returns>An instance of a <see cref="T:System.Collections.Generic.Dictionary`2"/> containing 
            all elements from the metadata collection.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.MetadataDictionary.AsDictionary(Microsoft.Research.Science.Data.SchemaVersion)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.AsDictionary(Microsoft.Research.Science.Data.SchemaVersion)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.AsReadOnly">
            <summary>
            Wraps committed elements of the metadata collection into 
            new read-only instance of the <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> class.
            </summary>
            <returns>Read-only <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> instance containg same inner collection.</returns>
            <remarks>
            <para>
            The returned metadata collection and the current one share the same inner collection
            of the committed elements. Therefore, after the source metadata collection is committed,
            new elements become available from the returned instance.
            </para>
            <para>
            The goal of the method is to create a read-only copy of the existing metadata collection that is always
            up-to-date.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.Clone(Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.Clone(Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)">
            <summary>
            Creates a shallow copy of the metadata collection.
            </summary>
            <param name="version">The version of the schema to clone.</param>
            <param name="readOnly">The value that determines that the resulting 
            collection is read only or not.</param>
            <returns>MetadataDictionary instance containing the metadata copy.</returns>
            <remarks>
            <para>
            If the <paramref name="version"/> is SchemaVersion.Proposed or SchemaVersion.Recent and
             the collection is modified, resulting collection contains both committed elements and
             proposed and is unchanged.
            </para>
            <para>
            If the <paramref name="version"/> is SchemaVersion.Proposed and the collection has no changes,
            an exception is thrown.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.AsReadOnly"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.Commit">
            <summary>
            Commits accumulated changes.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.ApplyChanges(Microsoft.Research.Science.Data.MetadataDictionary)">
            <summary>
            Applies given collection of changes (both committed and modified parts of its).
            </summary>
            <param name="proposedChanges"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.Rollback">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.IsValidKey(System.String)">
            <summary>Determines whether specified key is valid for the metadata collection.</summary>
            <param name="key">The strings to determine whether it can be a key.</param>
            <returns><value>true</value> if name is valid or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.IsValidFirstNameSymbolCategory(System.Globalization.UnicodeCategory)">
            <summary>Checks whether specified Unicode category is valid for first indentifier 
            symbol according to Python 3 specification</summary>
            <param name="cat">Unicode category</param>
            <returns>True for valid category or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.IsValidFirstNameSymbol(System.Char)">
            <summary>Checks whether specified symbol can be used as first indentifier 
            symbol according to Python 3 specification</summary>
            <param name="ch">Character</param>
            <returns>True for valid symbol or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.IsValidNextNameSymbol(System.Char)">
            <summary>Checks whether specified symbol can be used as non-first indentifier 
            symbol according to Python 3 specification</summary>
            <param name="ch">Character</param>
            <returns>True for valid symbol or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.MetadataDictionary.GetModified">
            <summary>
            Iterates through modified entries of the metadata dictionary.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Microsoft.Research.Science.Data.MetadataDictionary.Changed">
            <summary>
            Occurs after an entry has been added or changed.
            </summary>
        </member>
        <member name="E:Microsoft.Research.Science.Data.MetadataDictionary.Changing">
            <summary>
            Occurs before an entry is about to be added or changed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.ReadOnly">
            <summary>
            Gets the value indicating whether the metadata collection is read only or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.HasChanges">
            <summary>
            Gets the value indicating whether the metadata collection has changes or not.
            </summary>
            <remarks>
            If a user changes metadata collection of a variable, the metadata collection,
            the variable and the DataSet become modified (i.e. their property HasChanges returns true).
            To commit changes, use <see cref="M:Microsoft.Research.Science.Data.DataSet.Commit"/>; to rollback them, use
            <see cref="M:Microsoft.Research.Science.Data.DataSet.Rollback"/> or <see cref="M:Microsoft.Research.Science.Data.Variable.Rollback"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.Count">
            <summary>
            Gets the number of metadata entries contained in the dictionary.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the metadata value for the given key and schema version.
            </summary>
            <param name="key">The name of the metadata entry to get.</param>
            <param name="version">Version of the DataSet schema.</param>
            <returns>Value corresponding to the given key.</returns>
            <remarks>
            <para>
            Type of the key is always <see cref="T:System.String"/>.
            Type of the property value is <see cref="T:System.Object"/>, but supported metadata value types 
            are constrained. See documentation for <see cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/> for the
            specification.
            </para>
            <para>
            Gets the value of the metadata entry corresponding to the given <paramref name="key"/>.
            The value is taken from the specified version of the schema (see <see cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>).
            If the <paramref name="version"/> is SchemaVersion.Proposed and the collection has no changes,
            an exception is thrown.
            If the <paramref name="version"/> is SchemaVersion.Committed and the entry is just added
            to the collection and is not committed yet, an exception is thrown.
            </para>
            <para>
            If the given <paramref name="key"/> not found in the collection, an exception
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/> is thrown.
            </para>
            <example>
            <code>
            dataSet.IsAutocommitEnabled = false;
            . . .
            Variable v = dataSet["var"];
            v.Metadata["custom"] = 10;
            dataSet.Commit();
            
            Console.WriteLine(v.Metadata["custom"]); // prints "10"
            
            v.Metadata["custom"] = 11;
            /* Now: v.HasChanges, v.Metadata.HasChanges and dataSet.HasChanges are true */
            
            Console.WriteLine(v.Metadata["custom"]); // prints committed value "10"
            Console.WriteLine(v.Metadata["custom", SchemaVersion.Proposed]); // prints "11"
            
            dataSet.Rollback();
            Console.WriteLine(v.Metadata["custom"]); // prints "10"
            // Console.WriteLine(v.Metadata["custom", SchemaVersion.Proposed]); // would throw an exception
            </code>
            </example>
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,System.Boolean)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,System.Boolean)">
            <summary>
            Gets the metadata value or sets new value for the given key (possibly case-insensitive).
            </summary>
            <param name="key">The name of the metadata attribute to get.</param>
            <param name="ignoreCase">The value determines whether the key is case-insensitive or not.</param>
            <returns>Value corresponding to the given key.</returns>
            <remarks>
            <para>
            The indexer returns committed values.
            See also remarks for <see cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>.
            </para>
            <example>
            The example demonstrates the capabilities of the indexer:
            <code>
            MetadataDictionary metadata = . . . ;
            
            metadata["Units"] = "meters";
            
            if(metadata.ContainsKey("units", true)) // case-insensitive
            {
            	Console.WriteLine(metadata["Units"]); // prints "meters"
            	Console.WriteLine(metadata["units"]); // throws an exception KeyNotFoundException
            	Console.WriteLine(metadata["units", true]); // prints "meters"
            	Console.WriteLine(metadata["UNITS", true]); // prints "meters"
            	Console.WriteLine(metadata["UnitS", true]); // prints "meters"		
            }
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion,System.Boolean)">
            <summary>
            Gets the metadata value or sets new value for the given key (possibly case-insensitive).
            </summary>
            <param name="key">The name of the metadata attribute to get.</param>
            <param name="ignoreCase">The value determines whether the key is case-insensitive or not.</param>
            <param name="version">Version of the DataSet schema.</param>
            <returns>Value corresponding to the given key.</returns>
            <remarks>
            <para>
            See remarks for <see cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            and example for <see cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,System.Boolean)"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.MetadataDictionary.ContainsKey(System.String,System.Boolean)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,System.Boolean)"/>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String)">
            <summary>
            Gets the metadata value or sets new value for the given key.
            </summary>
            <param name="key">The name of the metadata attribute to get.</param>
            <returns>Value corresponding to the given key.</returns>
            <remarks>
            <para>
            The indexer returns committed values.
            See remarks for <see cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>.
            </para>
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.MetadataDictionary.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.SchemaVersion"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Variable"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.MetadataChanges.Item(System.String)">
            <summary>
            Gets the attribute value for the given <paramref name="key"/>.
            </summary>
            <param name="key">Key of the attribute to get.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="T:Microsoft.Research.Science.Data.MetadataContainerVariable">
            <summary>
            Designated to contain metadata dictionary without data.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableMetadataChangedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableMetadataChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableMetadataChangedEventArgs.#ctor(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangedEventArgs.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangedEventArgs.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableMetadataChangingEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="proposed"></param>
            <param name="old"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs.ProposedValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs.OldValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableMetadataChangingEventArgs.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Range">
            <summary>
            Represents non-negative integer range with stride.
            </summary>
            <remarks>
            <para>An instance of the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct can be instantiated
            using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class:
            <list type="table">
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32)"/></term>
            <description>Single index to choose.</description></item>
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32,System.Int32)"/></term>
            <description>A range of indices from "from" up to "to".</description></item>
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.Range(System.Int32,System.Int32,System.Int32)"/></term>
            <description>A range of indices with specified step.</description></item>
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.FromToEnd(System.Int32)"/></term>
            <description>A range of indices from "from" up to the maximum index for a given dimension.</description></item>
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.FromToEnd(System.Int32,System.Int32)"/></term>
            <description>A range of indices from "from" up to the maximum index for a given dimension with the specified step.</description></item>
            <item><term><see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/></term>
            <description>Single index to choose and reduce this dimension so that the rank of the resulting array is less than the rank of the variable is read from.</description></item>
            </list>
            </para>
            <para>
            Ranges are used in the procedural API available as extensions methods for the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>
            class. See <see cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Range.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="stride"></param>
            <param name="count"></param>
            <remarks>
            <para>
            Negative count means that it is unlimited.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Range.ToString">
            <summary>
            Gets the string representation of the range.
            </summary>
            <returns></returns>
            <remarks>
            It is either "(empty)" or "([start]:[stride]:[final])"
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Range.Equals(System.Object)">
            <summary>
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Range.GetHashCode">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.IsReduced">
            <summary>
            Gets the value indicating that the related dimension is to be reduced.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.Origin">
            <summary>
            Gets the starting value of the range.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.Stride">
            <summary>
            Gets the stride value.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.Count">
            <summary>
            Gets the number of values in the range.
            </summary>
            <remarks>
            <para>If the range <see cref="P:Microsoft.Research.Science.Data.Range.IsUnlimited"/>, gets -1.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.Last">
            <summary>
            Gets the last value of the range.
            </summary>
            <remarks>
            <para>If the range <see cref="P:Microsoft.Research.Science.Data.Range.IsUnlimited"/>, the property throws an exception.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.IsUnlimited">
            <summary>
            Gets the value indicating whether the range is unlimited.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Range.IsEmpty">
            <summary>
            Gets the value indicating that the range contains no values.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.PointToPointTransformationVariable`2">
            <summary>
            Represents an abstract computational variable performing a reversible or not reversible
            point-to-point transformation of a source variable.
            </summary>
            <typeparam name="SourceDataType">Type of data for the underlying variable.</typeparam>
            <typeparam name="ResultDataType">Type of data for the output variable.</typeparam>
        </member>
        <member name="M:Microsoft.Research.Science.Data.PointToPointTransformationVariable`2.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,Microsoft.Research.Science.Data.Variable{`1},System.String[])">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="sourceVariable">The variable this computational variable is based on.</param>
            <param name="dims"></param>
            <param name="name"></param>
            <param name="sds">
            </param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.PointToPointTransformationVariable`2.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,Microsoft.Research.Science.Data.Variable{`1},System.String[],System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes an instance of the variable.
            </summary>
            <param name="hiddenEntries">Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</param>
            <param name="readonlyEntries">Collection of keys that cannot be changed through this collection.</param>
            <param name="sourceVariable">The variable this computational variable is based on.</param>
            <param name="sds"></param>
            <param name="name"></param>
            <param name="dims"></param>
            <remarks>
            <para>The <paramref name="hiddenEntries"/> and <paramref name="readonlyEntries"/> parameters 
            allow to make some metadata entries indpendent from the metadata of the underlying variable.
            These parameters can be null and this will be considered as an empty collection.</para>
            <para>Two entries are always independent from the underlying metadata. These are
            the name and the provenance entries of the variable's metadata.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystem">
            <summary>
            CoordinateSystem maps an index from a space of dimensions into coordinate values
            constructed from axis variables.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.Research.Science.Data.CoordinateSystem"/> class cannot be modified after it is committed.
            Therefore, all axes should be added to the coordinate system before the <see cref="P:Microsoft.Research.Science.Data.CoordinateSystem.DataSet"/>
            is committed.
            <example>
            The followin example creates a coordinate system with a time axis
            and adds a variable defined in the coordinate system.
            <code>
            DataSet ds = . . . ;
            ds.IsAutocommitEnabled = false;
            
            // Creates a variable "time", adds it into the DataSet and then uses it as an axis for the cs:
            Variable&lt;DateTime&gt; time = ds.AddVariable&lt;DateTime&gt;("time", "t");    
            CoordinateSystem cs = ds.CreateCoordinateSystem("cs", time);
            
            // Temperature variable also depends on "t" for it is defined for each time moment.
            Variable&lt;double&gt; temperature = ds.AddVariable&lt;double&gt;("temperature", "t");
            
            // Each value of temperature variable has corresponded time moment from the "time".
            temperature.AddCoordinateSystem(cs);
            
            ds.Commit();
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.CoordinateSystem.axes">
            <summary>
            The field stores axes during initialization of the cs.
            After commit, it is null.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.Commit">
            <summary>
            Commits all changes of the coordinate system. 
            </summary>
            <remarks>
            After committing no changes in the coordinate system are allowed.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.GetSchema">
            <summary>
            Gets the schema for the coordinate system describing its structure.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.AddAxis``1(Microsoft.Research.Science.Data.Variable{``0})">
            <summary>
            Adds the variable to the coordinate system as an axis.
            </summary>
            <remarks>
            The variable <paramref name="var"/> must belong to the same data set as the coordinate system does.
            </remarks>
            <param name="var">The variable that is to be considered as an axis.</param>
            <typeparam name="DataType">Data type of the axis.</typeparam>
            <returns>The variable just added as an axis.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.AddAxis(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Adds the variable to the coordinate system as an axis.
            </summary>
            <remarks>
            The variable <paramref name="var"/> must belong to the same data set as the coordinate system does.
            </remarks>
            <param name="var">The variable that is to be considered as an axis.</param>
            <returns>The variable just added as an axis.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.AddAxis``1(System.String,System.String[])">
            <summary>
            Creates and adds the variable as an axis to the coordinate system and related data set.
            </summary>
            <param name="name">Name of the new variable.</param>
            <param name="dims">Names of dimensions the variable depends on.</param>
            <typeparam name="DataType">Data type of the axis.</typeparam>
            <returns>The variable just created and added as an axis.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.GetDimensions">
            <summary>
            Returns committed version of the dimensions list for the coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.GetDimensions(Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Returns specified version of the dimensions list for the coordinate system.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.GetDimensions(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Returns the dimensions list for the coordinate system base on given changeset.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.ToString">
            <summary>Converts this object to string</summary>
            <returns>String with brief information about coordinate system</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystem.CheckConstraints(Microsoft.Research.Science.Data.DataSet.Changes)">
            <summary>
            Checks the constraints and throws an exception if the check failed.
            </summary>
            <exception cref="T:System.Exception">Constraints are not satisfied.</exception>
            <remarks>
            <para>The method checks the constraints and throws an exception if the check failed.</para>
            <para>
            The constraint of a coordinate system means reversibility of its every axes' data. 
            Common variable provides an access to its values by an integer index or a vector of indices, 
            but an axis should allow finding an index (or a vector of indices) by a coordinate value 
            from that axis. This is a reversed index selection operation which enables retrieving a value 
            from a variable by its coordinate values in a given coordinate system 
            (see <see cref="M:Microsoft.Research.Science.Data.Variable`1.GetValue(System.Object[])"/>). 
            The constraint in the one-dimensional case is just a claim for data to be strictly monotonic 
            for numeric and date/time data types, or contain no duplicate values for others 
            (for instance, strings).
            </para>
            </remarks>
            <exception cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.Name">
            <summary>
            Gets the name of the coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.Axes">
            <summary>
            Gets the collection of the coordinate system's axes.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.AxesArray">
            <summary>
            Gets the collection of axes as an array, i.e. indexed not by variable's ID but index.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.AxesCount">
            <summary>
            Gets the number of axes in the coordinate system.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.HasChanges">
            <summary>
            Gets the value indicating whether the coordinates system has already been committed or not.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystem.DataSet">
            <summary>
            Gets the Scientific Data Set instance the coordinate system is attached to.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase">
            <summary>Provides abstract base class for CoordinateSystem collections.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Contains(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>Checks whether collection contains specified coordinate system</summary>
            <param name="cs">Coordinate system to locate in collection</param>
            <returns>True, if coordinate system is in the collection or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Contains(System.String)">
            <summary>Checks whether collection contains coordinate system with specified name</summary>
            <param name="name">Name of coordinate system to locate in collection</param>
            <returns>True, if coordinate system is in the collection or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Contains(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>Checks whether specified version of collection contains coordinate system with specified name</summary>
            <param name="name">Name of coordinate system to locate in collection</param>
            <param name="version">Version of collection to look in</param>
            <returns>True, if coordinate system is in the collection or false otherwise</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.ToString">
            <summary>Returns string with brief information about all coordinate systems in collection</summary>
            <returns>A String that represents the current collection.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Item(System.Int32)">
            <summary>
            Gets the committed coordinate system with the given index.
            </summary>
            <param name="index">Zero-based index of the coordinate system to get.</param>
            <returns>The coordinate system.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The exception is thrown if 
            the index is out of range.</exception>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Item(System.String)">
            <summary>
            Gets the committed coordinate system with the given name.
            </summary>
            <param name="name">Name of the coordinate system to get.</param>
            <returns>The coordinate system.</returns>
            <exception cref="T:Microsoft.Research.Science.Data.ValueNotFoundException">The exception is thrown if 
            the coordinate system is not found.</exception>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the coordinate system with the given name from the specified schema version.
            </summary>
            <param name="name">Name of the coordinate system to get.</param>
            <param name="version">Version of the schema to look in.</param>
            <returns>The coordinate system.</returns>
            <exception cref="T:Microsoft.Research.Science.Data.ValueNotFoundException">The exception is thrown if 
            the coordinate system is not found.</exception>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Count">
            <summary>Gets count of coordinate systems in the collection.</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.Collection">
            <summary>
            Provides an access to internal collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollectionBase.IsReadOnly">
            <summary>Gets a value indicating whether the this collection is read-only.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReadOnlyCoordinateSystemCollection">
            <summary>
            Represents a read-only coordinate system collection with supporting routines.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyCoordinateSystemCollection.Collection">
            <summary>
            Gets the access to the internal collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyCoordinateSystemCollection.IsReadOnly">
            <summary>Gets a value indicating whether the this collection is read-only.</summary>
            <remarks>Always returns true</remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystemCollection">
            <summary>
            Represents a dynamic coordinate system collection with supporting routines.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.#ctor">
            <summary>Initializes an instance of CoordinateSystemCollection with no elements</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.#ctor(Microsoft.Research.Science.Data.CoordinateSystemCollectionBase)">
            <summary>Initializes an instance of CoordinateSystemCollection with contents taken from 
            specified collection</summary>
            <param name="collection">Collection to copy items from</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.GetReadOnlyCollection">
            <summary>
            Wraps the collection into read-only collection and returns it.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.Add(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            Adds the coordinate system to the collection.
            </summary>
            <param name="cs"></param>
            <exception cref="T:System.Exception">If the collection already contains coordinate system with the same name.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.AddRange(Microsoft.Research.Science.Data.CoordinateSystemCollection)">
            <summary>
            Adds a range of coordinate systems to the collection.
            </summary>
            <param name="coordinateSystemCollection"></param>
            <exception cref="T:System.Exception">If the collection already contains coordinate system with the same name.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.AsNameArray">
            <summary>
            Returns an array of strings with names of coordinate systems.
            </summary>
            <returns>Array of names of coordinate systems.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.AsArray">
            <summary>
            Represents the collection as an array.
            </summary>
            <returns>Array of coordinate systems.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemCollection.Clear">
            <summary>
            Removes all coordinate systems from the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollection.Collection">
            <summary>
            Provides direct access to the inner collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemCollection.IsReadOnly">
            <summary>
            Gets the value indicating whether the collection is read only.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataAccessVariable`1">
            <summary>
            Base class for variables granting an access to various data storages.
            </summary>
            <typeparam name="DataType">Type of data for the variable.</typeparam>
            <remarks>
            The class contains logic for data acquiring and updating in related data storage.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,System.String[])">
            <summary>
            Initializes a DataAccessVariable.
            </summary>
            <param name="dataSet">The owner of the variable.</param>
            <param name="name">Name of the variable.</param>
            <param name="dims">Dimensions of the variable.</param>
            <remarks>
            Method creates metadata collection and initializes the Name.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,System.String[],System.Boolean)">
            <summary>
            Initializes a DataAccessVariable.
            </summary>
            <param name="dataSet">The owner of the variable.</param>
            <param name="name">Name of the variable.</param>
            <param name="dims">Dimensions of the variable.</param>
            <param name="assignID">Assign ID automatically or not.</param>
            <remarks>
            Method creates metadata collection and initializes the Name.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.OnPrecommit(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the precommit stage of the variable. 
            </summary>
            <remarks>
            <see cref="T:Microsoft.Research.Science.Data.DataAccessVariable`1"/> opens a write-transaction and actually updates the related storage with
            accumulated changes.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.OnCommit(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the commit stage of the variable. 
            </summary>
            <remarks>
            <see cref="T:Microsoft.Research.Science.Data.DataAccessVariable`1"/>
            closes a write-transaction thus confirming its success.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.OnRollback(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            The method is called at the rollback stage of the variable.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Research.Science.Data.DataAccessVariable`1"/> rolls an open transaction back, thus eliminating all changes since last successful committing.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.BeginWriteTransaction(Microsoft.Research.Science.Data.Variable.DataChanges)">
            <summary>
            Opens new write-transaction and thus prepares to a sequence of <see cref="M:Microsoft.Research.Science.Data.DataAccessVariable`1.WriteData(System.Int32[],System.Array)"/>.
            </summary>
            <remarks>
            If the variable can support write-transactions it shall override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.OnWriteFinished(Microsoft.Research.Science.Data.Variable.DataChanges)">
            <summary>
            The methods is called right after all data in transaction is written with <see cref="M:Microsoft.Research.Science.Data.DataAccessVariable`1.WriteData(System.Int32[],System.Array)"/>
            and before the call of Commit().
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.CommitWrite(Microsoft.Research.Science.Data.Variable.DataChanges)">
            <summary>
            Commits a sequence of write-operations performed as a part of a transaction.
            </summary>
            <remarks>
            If the variable can support write-transactions it shall override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.RollbackWrite">
            <summary>
            Rolls back a sequence of write-operations performed as a part of a transaction.
            </summary>
            <remarks>
            If the variable can support write-transactions it shall override this method.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.ReadData(System.Int32[],System.Int32[])">
            <summary>
            Actually reads the data from the variable's underlying storage.
            </summary>
            <param name="origin">The origin of the rectangle (e.g., the left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the corned. Null means maximal possible shape.</param>
            <returns>An array of data from the specified rectangle.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.ReadData(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Actually reads the data from the variable's underlying storage.
            </summary>
            <param name="origin">The origin of the rectangle (e.g., the left-bottom corner). Null means all zeros.</param>
            <param name="stride">The steps to get slices from the array.</param>
            <param name="count">The shape of the corned. Null means maximal possible shape.</param>
            <returns>An array of data from the specified rectangle.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.WriteData(System.Int32[],System.Array)">
            <summary>
            Writes the data to the variable's underlying storage starting with the specified origin indices.
            </summary>
            <remarks>
            <para>
            Each operation is a part of a transaction, opened with the <see cref="M:Microsoft.Research.Science.Data.DataAccessVariable`1.BeginWriteTransaction(Microsoft.Research.Science.Data.Variable.DataChanges)"/> method.
            *It is called in the precommit stage*
            </para>
            <para>A sequence of such outputs with same transaction can be either committed by <see cref="M:Microsoft.Research.Science.Data.DataAccessVariable`1.CommitWrite(Microsoft.Research.Science.Data.Variable.DataChanges)"/> or
            rolled back by <see cref="M:Microsoft.Research.Science.Data.DataAccessVariable`1.RollbackWrite"/>.</para>
            <para>Parameter <paramref name="origin"/> for data piece produced by <see cref="M:Microsoft.Research.Science.Data.Variable.Append(System.Array)"/> operation
            is transformed and contains actual values.</para>
            </remarks>
            <param name="origin">Indices to start adding of data. Null means all zeros.</param>
            <param name="data">Data to add to the variable.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.GetData(System.Int32[],System.Int32[])">
            <summary>
            Gets the data for the variable in specified rectangular region.
            </summary>
            <param name="origin">The origin of the rectangle (left-bottom corner). Null means all zeros.</param>
            <param name="shape">The shape of the region. Null means maximal shape.</param>
            <returns>An array of data from specified rectangle.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataAccessVariable`1.GetData(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Gets the data for the variable from specified stridden slices.
            </summary>
            <param name="origin">The origin of the rectangle (left-bottom corner). Null means all zeros.</param>
            <param name="count">The shape of the result.</param>
            <param name="stride">Steps to stride the variable.</param>
            <returns>An array of data from specified rectangle.</returns>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String)"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataAccessVariable`1.Metadata">
            <summary>
            Gets the metadata associated with the variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Dimension">
            <summary>
            Represents a dimension of a variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Dimension.#ctor(System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="length"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Dimension.ToString">
            <summary>
            Represents the dimension as a text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Dimension.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Dimension.Name">
            <summary>
            Gets the name of the dimension.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Dimension.Length">
            <summary>
            Gets the length of the dimension.
            </summary>
            <remarks>
            This is a length of data of all variables depending on it, by the corresponding dimension.
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DimensionList">
            <summary>
            List of dimensions.
            </summary>
            <seealso cref="T:Microsoft.Research.Science.Data.Dimension"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.#ctor(System.Collections.Generic.IList{Microsoft.Research.Science.Data.Dimension})">
            <summary>
            
            </summary>
            <param name="dims"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.Add(Microsoft.Research.Science.Data.Dimension)">
            <summary>
            Adds a dimension to the list.
            </summary>
            <param name="dim"></param>
            <remarks>
            <para>
            If the dimension with the same name as the <paramref name="dim"/> is alredy
            contained in the list, and their lengths differ, then
            the length of the dimension with this name is reset to -1.
            No exception is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.FindIndex(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.AddRange(System.Collections.Generic.IList{Microsoft.Research.Science.Data.Dimension})">
            <summary>
            
            </summary>
            <param name="dims"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.IsSubsetOf(Microsoft.Research.Science.Data.DimensionList)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.GetLength(System.String)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.AsStringArray">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.IndexOf(System.String)">
            <summary>
            
            </summary>
            <param name="dim"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.ToArray">
            <summary>
            Represents the list as an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.Clone">
            <summary>
            Makes a copy of the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.op_Equality(Microsoft.Research.Science.Data.DimensionList,Microsoft.Research.Science.Data.DimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.op_Inequality(Microsoft.Research.Science.Data.DimensionList,Microsoft.Research.Science.Data.DimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DimensionList.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DimensionList.Count">
            <summary>
            Gets the count of dimensions.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DimensionList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DimensionList.Item(System.String)">
            <summary>
            Gets the dimension by its name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReadOnlyDimensionList">
            <summary>
            Read-only collection of dimensions.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.FindIndex(System.String)">
            <summary>
            Finds a dimension with the given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns>The index of the dimension in the list if found; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.AsNamesArray">
            <summary>
            Returns an array of names of dimensions.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.AsShape">
            <summary>
            Returns the shape as an array of lengths.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.op_Equality(Microsoft.Research.Science.Data.ReadOnlyDimensionList,Microsoft.Research.Science.Data.ReadOnlyDimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.op_Inequality(Microsoft.Research.Science.Data.ReadOnlyDimensionList,Microsoft.Research.Science.Data.ReadOnlyDimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.op_Equality(Microsoft.Research.Science.Data.DimensionList,Microsoft.Research.Science.Data.ReadOnlyDimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.op_Inequality(Microsoft.Research.Science.Data.DimensionList,Microsoft.Research.Science.Data.ReadOnlyDimensionList)">
            <summary>
            
            </summary>
            <param name="dl1"></param>
            <param name="dl2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyDimensionList.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyDimensionList.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyDimensionList.Item(System.String)">
            <summary>
            Gets the dimension with a given <paramref name="name"/>.
            </summary>
            <param name="name"></param>
            <returns></returns>
            <exception cref="T:System.Exception">Dimension not found.</exception>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyDimensionList.Count">
            <summary>
            Gets the number of dimensions.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CannotPerformActionException">
            <summary>
            Represents an error that occurs when an action cannot be performed.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetException">
            <summary>
            The exception that is thrown when a DataSet-related exceptional case occurs.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetException.#ctor">
            <summary>
            Initializes a new instance of the DataSetException class.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataSetException class.
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataSetException class.
            </summary>
            <param name="innerException"></param>
            <param name="message">Error message</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Research.Science.Data.DataSetException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CannotPerformActionException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CannotPerformActionException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CannotPerformActionException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ValueNotFoundException">
            <summary>
            Represents an error that occurs when there is no corresponded value or it cannot be calculated.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ValueNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ValueNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ValueNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReadOnlyException">
            <summary>
            Represents an error when someone tries to modify a read only instance.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetCreateException">
            <summary>
            The exception that is thrown when the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> fails to create a DataSet.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetCreateException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetCreateException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetCreateException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetCreateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetCreateException.FailedUri">
            <summary>
            Gets the costruction URI that caused the exception.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ProviderNotRegisteredException">
            <summary>
            The exception that is thrown when the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> fails to create a DataSet 
            because it is not registered.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ProviderNotRegisteredException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ProviderNotRegisteredException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ProviderNotRegisteredException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="uri">Uri that caused the exception.</param>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ProviderNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DistributedCommitFailedException">
            <summary>
            The exception that is thrown if during distributed commit of DataSets linked by reference
            variables, some of these DataSets failed to commit its changes.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DistributedCommitFailedException.#ctor(Microsoft.Research.Science.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="failedDataSet"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DistributedCommitFailedException.#ctor(Microsoft.Research.Science.Data.DataSet,System.Exception)">
            <summary>
            
            </summary>
            <param name="failedDataSet"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DistributedCommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DistributedCommitFailedException.FailedDataSet">
            <summary>
            Gets the data set that is unable to commit.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReverseIndexSelection">
            <summary>
            Experimental; currently unused.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ReverseIndexSelection.Exact">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ReverseIndexSelection.Nearest">
            <summary>
            
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ReverseIndexSelection.Interpolation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Rectangle">
            <summary>
            Represents multidimensional integer rectangle.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Initialies an instance of the class.
            </summary>
            <param name="origin"></param>
            <param name="shape"></param>
            <remarks>
            <paramref name="origin"/> and <paramref name="shape"/> cannot be null.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="shape"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="rank"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.CombineWith(Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Combines two rectangle returning the mimimal rectangle containg both rectangles.
            </summary>
            <param name="r"></param>
            <exception cref="T:System.ArgumentException">Different ranks.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.HasIntersection(Microsoft.Research.Science.Data.Rectangle,Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Checks whether two rectangles intersect or not.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.Combine(Microsoft.Research.Science.Data.Rectangle,Microsoft.Research.Science.Data.Rectangle)">
            <summary>
            Combines two rectangle returning the mimimal rectangle containg both rectangles.
            </summary>
            <param name="r1"></param>
            <param name="r2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Rectangle.EntireShape(System.Int32[])">
            <summary>
            Gets the rectangle with zero origin and given shape.
            </summary>
            <param name="shape">Shape of the resulting rectangle.</param>
            <returns>The rectangle.</returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Rectangle.IsEmpty">
            <summary>
            Gets the value indicating whether the rectangle is empty or not.
            </summary>
            <remarks>
            <para>
            Rectangle is empty if its shape is null or contains only zeros.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Rectangle.Origin">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Rectangle.Shape">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Rectangle.Rank">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Rectangle.EmptyRectangle">
            <summary>
            Gets an empty rectangle (i.e. its origin and shape are null).
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.RefVariable`1">
            <summary>
            RefVariable is a special kind of variables whose purpose is to refer another variable.
            <remarks>
            It enables adding of a variable to not native data set.
            Data operation applied to the reference are translated to the target variable.
            Both target and reference variables share the data changing as the change of its inner state.
            Both target and reference variables share the metadata collection.
            Names of dimensions might change independently and don't cause another variable to be changed.
            RefVariable allows to extend a collection of coordinate systems of the target variable with its own coordinate system.
            </remarks>
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.IRefVariable">
            <summary>
            Provides non-generic access to the reference variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.IRefVariable.UpdateChanges(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Updates the reference variable on the basis of custom changes of
            its referenced variable.
            </summary>
            <param name="changes"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.IRefVariable.ReferencedVariable">
            <summary>
            Gets the referenced variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariable`1.PutData(System.Int32[],System.Array)">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="a"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariable`1.ReadShape">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariable`1.GetData(System.Int32[],System.Int32[])">
            <summary>
            
            </summary>
            <param name="origin"></param>
            <param name="shape"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariable`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariable`1.Microsoft#Research#Science#Data#IRefVariable#UpdateChanges(Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            Updates the reference variable on the basis of custom changes of
            its referenced variable.
            </summary>
            <param name="customChanges"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.RefVariable`1.ReferencedVariable">
            <summary>
            Gets the refenced variable instance.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.RefVariable`1.Metadata">
            <summary>
            Gets the shared metadata collection.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.RefVariableMetadata">
            <summary>
            RefVariableMetadata is a wrapper of an existing variable's metadata with 
            some additional capabilities.
            </summary>
            <remarks>
            <para>The <paramref name="hiddenEntries"/> and <paramref name="readonlyEntries"/> parameters 
            allow to make some metadata entries indpendent from the metadata of the underlying variable.
            These parameters can be null and this will be considered as an empty collection.</para>
            <para>Two entries are always independent from the underlying metadata. These are
            the name and the provenance entries of the variable's metadata.</para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.MetadataDictionary"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.RefVariableMetadata.target">
            <summary>The target variable that contains referred metadata.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.RefVariableMetadata.hiddenEntries">
            <summary>Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.RefVariableMetadata.readonlyEntries">
            <summary>Collection of keys that cannot be changed through this collection.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.RefVariableMetadata.proposedMetadataEntries">
            <summary>Collection of entries currently being handled. This collection should
            enable correct concurrent work on simultaneous changing of the target and this collections.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariableMetadata.#ctor(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Creates an instance of the RefVariableMetadata class.
            </summary>
            <param name="var">The target variable that contains referred metadata.</param>
            <remarks>
            See remarks for the <see cref="T:Microsoft.Research.Science.Data.RefVariableMetadata"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariableMetadata.#ctor(Microsoft.Research.Science.Data.Variable,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates an instance of the RefVariableMetadata class.
            </summary>
            <param name="var">The target variable that contains referred metadata.</param>
            <param name="hiddenEntries">Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</param>
            <remarks>
            See remarks for the <see cref="T:Microsoft.Research.Science.Data.RefVariableMetadata"/> class.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.RefVariableMetadata.#ctor(Microsoft.Research.Science.Data.Variable,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Creates an instance of the RefVariableMetadata class.
            </summary>
            <param name="var">The target variable that contains referred metadata.</param>
            <param name="hiddenEntries">Collection of keys which are not to be inherited from the underlying metadata.
            These entries are changed independently.</param>
            <param name="readonlyEntries">Collection of keys that cannot be changed through this collection.</param>
            <remarks>
            See remarks for the <see cref="T:Microsoft.Research.Science.Data.RefVariableMetadata"/> class.
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ScaledVariable`2">
            <summary>
            Represents a variable which values are linear function of another underlying variable.
            </summary>
            <typeparam name="DataType">Natural data representation: Single, Double or DateTime</typeparam>
            <typeparam name="RawType">Storage data representation: Single, Double, or any integer type except Decimal and UInt64</typeparam>
            <remarks>
            <para>Changes to this variable propagate to the underlying variable. 
            Changes to the underlying variable are reflected in this variable.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ScaledVariable`2.#ctor(Microsoft.Research.Science.Data.Variable{`1},`0,`0,System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes an instance of ScaledVariable.
            </summary>
            <param name="rawVariable">Underlying storage variable</param>
            <param name="scale">Scale factor</param>
            <param name="offset">Offset</param>
            <param name="name">Scaled variable name</param>
            <param name="hiddenEntries">Attributes that are not shared with the source variable.</param>
            <param name="readonlyEntries">Shared with source variable attributes that cannot be changed through this variable.</param>
            <remarks>
            <para>Only limited set of primitive blittable type parameters are supported by this generic variable. 
            Use <see cref="T:Microsoft.Research.Science.Data.LambdaTransformVariable`2"/> for other data types.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableSchema">
            <summary>Provides structure information for a variable.</summary>
            <remarks>This class is intended to be immutable, but metadata field
            and corresponding property allow modify operations.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableSchema.ToString">
            <summary>
            Represents the schema as string in short.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.ID">
            <summary>
            Gets the ID of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.ChangeSet">
            <summary>
            Gets the changeset of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.Name">
            <summary>
            Gets the name of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.TypeOfData">
            <summary>
            Gets the data type of the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.Dimensions">
            <summary>
            Gets the read onlt dimension lists the variable depends on.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.CoordinateSystems">
            <summary>
            Gets the coordinate systems the variable is defined in.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.Metadata">
            <summary>
            Gets the metadata collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableSchema.Rank">
            <summary>
            Gets the rank of the variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystemSchema">
            <summary>Provides structure information for a coordinate system.</summary>
            <remarks>This class is immutable.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemSchema.#ctor(System.String,System.Int32[])">
            <summary>Creates an instance of the CoordinateSystemSchema</summary>
            <param name="name">Name of the coordinate system.</param>
            <param name="axes">IDs of variables those are axes for the coordinate system.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemSchema.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemSchema.Name">
            <summary>Gets the name of the coordinate system.</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemSchema.AxesID">
            <summary>Gets an array of the IDs of the variables those are axes for the coordinate system.</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemSchema.AxesCount">
            <summary>Gets the number of axes in the coordinate system.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetSchema">
            <summary>Provides structure information for a <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</summary>
            <remarks>This class is immutable.</remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetSchema.GetDimensions">
            <summary>
            Gets an array of dimensions of the DataSet.
            </summary>
            <returns>An array of <see cref="T:Microsoft.Research.Science.Data.Dimension"/>.</returns>
            <remarks>
            If the schema corresponds to the proposed version of the DataSet and
            some dimension differs for different variables, in the returning array the dimension
            has length equal to <c>-1</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.DataSetGuid">
            <summary>
            Gets the unique identifier of the DataSet.
            </summary>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.DataSetGuid"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.Version">
            <summary>
            Gets the changeset number of the DataSet.
            </summary>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.Version"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.URI">
            <summary>
            Gets the DataSet URI.
            </summary>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSet.URI"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.ConstructionString">
            <summary>
            Gets the DataSet URI.
            </summary>
            <remarks>
            The property is obsolete. Use <see cref="P:Microsoft.Research.Science.Data.DataSetSchema.URI"/> instead.</remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.Variables">
            <summary>
            Gets an array of the variables contained in the DataSet.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetSchema.CoordinateSystems">
            <summary>
            Gets an array of the coordinate systems contained in the DataSet.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.SchemaVersion">
            <summary>
            Specifies the schema version.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.SchemaVersion.Committed">
            <summary>
            Represents committed unmodified elements.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.SchemaVersion.Proposed">
            <summary>
            Represents modified or added elements.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.SchemaVersion.Recent">
            <summary>If the Proposed version is available, it is used; otherwise, the Committed version is used.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.OrderedArray1d.IndexOf(System.Object)">
            <summary>
            Works as Array.BinarySearch()
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.OrderedArray1d.IsOrdered(System.Array)">
            <summary>
            Determines the order of the array.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.OrderedArray1d.IsOrdered``1(``0[])">
            <summary>
            Determines the order of the array.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.OrderedArray1d.GetOrder(System.Array)">
            <summary>
            <para>Positive: ascend</para>
            <para>Negative: descend</para>
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.OrderedArray1d.GetOrder``1(``0[])">
            <summary>
            <para>Positive: ascend</para>
            <para>Negative: descend</para>
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ArrayOrder">
            <summary>
            Describes an order of an array.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayOrder.None">
            <summary>
            An array is not ordered.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayOrder.NotChecked">
            <summary>
            An array is not checked for an order.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayOrder.Unknown">
            <summary>
            An array is ordered, but its order is still unknown.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayOrder.Ascendant">
            <summary>
            An array has an ascendant order.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ArrayOrder.Descendant">
            <summary>
            An array has a descendant order.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.StriddenVariable`1">
            <summary>
            The computational variable that represents a result of striding of another variable.
            </summary>
            <typeparam name="DataType">Type of a data element.</typeparam>
        </member>
        <member name="T:Microsoft.Research.Science.Data.IStriddenVariable">
            <summary>
            Represents a stridden transformation variable.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.IStriddenVariable.SetIndexSpaceOrigin(System.Int32[])">
            <summary>
            Updates the origin parameter of the striding.
            </summary>
            <param name="origin">Starting indices for a stridden variable.</param>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.StriddenVariable`1.#ctor(Microsoft.Research.Science.Data.DataSet,System.String,System.String[],Microsoft.Research.Science.Data.Variable{`0},System.Int32[],System.Int32[],System.Int32[],System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})">
            <summary>
            Instantiates and returns a StriddenVariable object.
            </summary>
            <param name="dataSet"></param>
            <param name="dims"></param>
            <param name="name"></param>
            <param name="sourceVariable">The variable that is a data source for the computation.</param>
            <param name="origin">origin indices for striding.</param>
            <param name="stride">A stride.</param>
            <param name="count">A number of values to get from the source variable. If null, always takes as much as possible.</param>
            <param name="hiddenEntries">Attributes that are not shared with the source variable.</param>
            <param name="readonlyEntries">Shared with source variable attributes that cannot be changed through this variable.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.StriddenVariable`1.PrepareHiddenEntries(System.Collections.Generic.IList{System.String})">
            <summary>
            Adds special metadata attributes describing the striding. See also StriddenVariableKeys class.
            </summary>
            <param name="hiddenEntries"></param>
            <returns>Updates entries.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.StriddenVariable`1.PrepareReadonlyEntries(System.Collections.Generic.IList{System.String})">
            <summary>
            Adds special metadata attributes describing the striding. See also StriddenVariableKeys class.
            </summary>
            <param name="readonlyEntries"></param>
            <returns>Updates entries.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.StriddenVariable`1.InnerUpdateChanges(Microsoft.Research.Science.Data.DataSet.Changes,System.Int32[])">
            <summary>
            Completely updates shape and affected rect when "origin" changes and 
            possibly source variable changed.
            </summary>
            <param name="changes"></param>
            <param name="origin"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.StriddenVariableKeys">
            <summary>
            Contains metadata attributes names for a stridden variable those
            describe a striding.
            </summary>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.StriddenVariableKeys.KeyForOrigin">
            <summary>
            Name of an attribute describing the origin parameter of striding.
            </summary>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.StriddenVariableKeys.KeyForStride">
            <summary>
            Name of an attribute describing the string parameter of striding.
            </summary>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.StriddenVariableKeys.KeyForCount">
            <summary>
            Name of an attribute describing the count parameter of striding.
            </summary>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="F:Microsoft.Research.Science.Data.StriddenVariableKeys.KeyForSourceDims">
            <summary>
            Name of an attribute containing dimensions names of the source variable.
            </summary>
            <remarks>
            <para>Read more in <see cref="M:Microsoft.Research.Science.Data.DataSet.StrideVariable``1(Microsoft.Research.Science.Data.Variable{``0},System.Int32[],System.Int32[],System.Int32[],System.String,System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.String})"/></para>
            </remarks>
        </member>
        <member name="T:Microsoft.Research.Science.Data.TypeUtils">
            <summary>
            Contains utilties facilitating work with <see cref="T:System.Type"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsRealNumber(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsIntegerNumber(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsDateTime(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsNumeric(System.Type)">
            <summary>
            Checks whether the type is an integer or float number.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsEnum(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.Subtract(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.GetDefaultMissingValue(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.Parse(System.String,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="missingValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.Parse(System.String,System.Type,System.Object,System.IFormatProvider)">
            <summary>
            Converts a string into a type specified.
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="missingValue"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.Parse(System.String,System.Type)">
            <summary>
            Converts a string into a type specified.
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.Parse(System.String,System.Type,System.IFormatProvider)">
            <summary>
            Converts a string into a type specified.
            </summary>
            <param name="s"></param>
            <param name="type"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.SerializeToString(System.Object,System.Char)">
            <summary>
            Represents an object as a string. 
            If the object is IEnumerable, elements are separated
            with given separator.
            </summary>
            <param name="o"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsDateTime(System.String,System.IFormatProvider)">
            <summary>
            Checks the type of the value in string.
            </summary>
            <param name="s"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsInt(System.String,System.IFormatProvider)">
            <summary>
            Checks the type of the value in string.
            </summary>
            <param name="s"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsDouble(System.String,System.IFormatProvider)">
            <summary>
            Checks the type of the value in string.
            </summary>
            <param name="s"></param>
            <param name="formatProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.IsBool(System.String)">
            <summary>
            Checks the type of the value in string.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.TypeUtils.GetElementType(System.Array)">
            <summary>
            Checks the type of the value in string.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystemAddedEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.CoordinateSystemAddedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.CoordinateSystemAddedEventArgs.#ctor(Microsoft.Research.Science.Data.CoordinateSystem)">
            <summary>
            
            </summary>
            <param name="cs"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.CoordinateSystemAddedEventArgs.CoordinateSystem">
            <summary>
            Gets the coordinate system that has been added.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableChangeAction">
            <summary>
            Kind of changes in a variable.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.VariableChangeAction.PutData">
            <summary>Data array of a variable is changed.</summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.VariableChangeAction.UpdateMetadata">
            <summary>Metadata of a variable is changed.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableCommittingEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableCommittingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCommittingEventArgs.#ctor(Microsoft.Research.Science.Data.Variable,Microsoft.Research.Science.Data.Variable.Changes)">
            <summary>
            
            </summary>
            <param name="var"></param>
            <param name="changes"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCommittingEventArgs.ProposedChanges">
            <summary>
            Get the proposed changes to be applied to the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCommittingEventArgs.Variable">
            <summary>
            Gets the variable that is being committed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCommittingEventArgs.Cancel">
            <summary>
            Gets or sets the value which indicates whether to cancel the commit or not.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableRolledBackEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableRolledBackEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableRolledBackEventArgs.Variable">
            <summary>
            Gets the variable that has just been rolled back.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCommittedEventArgs.CommittedChanges">
            <summary>
            Gets the changes that have just been applied to the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCommittedEventArgs.Variable">
            <summary>
            Gets the variable that has just been committed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangedEventArgs.Variable">
            <summary>
            Gets the variable that is changed (but not committed yet).
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangedEventArgs.Action">
            <summary>
            Gets the kind of the change.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangedEventArgs.Changes">
            <summary>
            Get the proposed changes to be applied to the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangingEventArgs.Action">
            <summary>
            Gets the kind of the change.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangingEventArgs.ProposedChanges">
            <summary>
            Get the proposed changes to be applied to the variable.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangingEventArgs.Variable">
            <summary>
            Gets the variable that is being committed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableChangingEventArgs.Cancel">
            <summary>
            Gets or sets the value which indicates whether to cancel the commit or not.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.StrideRange">
            <summary>
            Represents a stride range which is a set of numbers 
            Xn = X0 + s*n, where 0 &lt;= n &lt; N.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.StrideRange.#ctor(System.Int32)">
            <summary>
            Creates a range with the only value <param name="singleValue"></param>.
            </summary>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.StrideRange.ToString">
            <summary>
            Returns the range as a string in the format "start:stride:end".
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.StrideRange.Start">
            <summary>
            Start value for the range.
            </summary>		
        </member>
        <member name="P:Microsoft.Research.Science.Data.StrideRange.Stride">
            <summary>
            Stride value for the range.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.StrideRange.Count">
            <summary>
            Number of values in the range.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.StrideRange.End">
            <summary>
            Last value of the range.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableCollection">
            <summary>
            Represents a dynamic variable collection with notifications.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Research.Science.Data.Variable})">
            <summary>
            
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.GetByID(System.Int32)">
            <summary>
            Gets the variable by its ID.        
            </summary>
            <remarks>
            An exception is thrown if the variable is not found.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.VariableCollection.TryGetById(System.Int32,Microsoft.Research.Science.Data.Variable@)"/> 
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.Contains(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Returns the value, indicating whether the collection contains specified variable
            (references are included to search).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.TryGetById(System.Int32,Microsoft.Research.Science.Data.Variable@)">
            <summary>
            Gets the variable by its ID.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.InsertFirst(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Adds the variable to the beggining of the collection.
            </summary>
            <param name="var"></param>
            <remarks>
            Adds the variable to the beginning of the collection so it is stored in the inverse order.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.Add(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Adds the variable to the collection.
            </summary>
            <param name="var"></param>
            <remarks>
            Adds the variable to the collection.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.Clear">
            <summary>
            Removes all the elements from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.GetReadOnlyCollection">
            <summary>
            Makes the read only copy of the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.CopyTo(Microsoft.Research.Science.Data.Variable[],System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableCollection.Remove(Microsoft.Research.Science.Data.Variable)">
            <summary>
            This implementation always throws NotSupportedException.
            </summary>
            <param name="item"></param>
        </member>
        <member name="E:Microsoft.Research.Science.Data.VariableCollection.CollectionChanged">
            <summary>
            Fires when the collection is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollection.Count">
            <summary>
            Gets the number of variables in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollection.Item(System.Int32)">
            <summary>
            Gets the variable by its zero-based index.        
            </summary>
            <remarks>
            An exception is thrown if the variable is not found.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.VariableCollection.TryGetById(System.Int32,Microsoft.Research.Science.Data.Variable@)"/>     
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollection.Item(System.String)">
            <summary>
            Gets the variable with specified committed name.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollection.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the variable with specified name for specified version of schema.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollection.IsReadOnly">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableCollectionChangedEventArgs.AddedVariable">
            <summary>
            Gets the added variable.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableCollectionChangedAction">
            <summary>
            Determines the type of changes.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.VariableCollectionChangedAction.Clear">
            <summary>
            All variables removed from the collection.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.VariableCollectionChangedAction.Add">
            <summary>
            A variable is added to the collection.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ReadOnlyVariableCollection">
            <summary>
            Represents a read-only variable collection with supporting routines.
            </summary>
            <remarks>
            <para>
            The collection hides some variables from a user. These are: a variable to
            store global metadata (<see cref="P:Microsoft.Research.Science.Data.DataSet.Metadata"/>) and hidden variables.
            To get all variables, use <see cref="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.All"/> property.
            Also note, the <see cref="M:Microsoft.Research.Science.Data.DataSet.GetSchema"/> methods return a schema
            containing description of all variables, including hidden and a global metadata variable.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.ToArray">
            <summary>
            Returns the array of variables.
            </summary>
            <returns></returns>
            <remarks>
            <para>
            A variable containing global metadata is excluded from the array.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.GetByID(System.Int32)">
            <summary>
            Gets the variable by its ID.
            </summary>
            <remarks>
            An exception is thrown if not found.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.TryGetByID(System.Int32,Microsoft.Research.Science.Data.Variable@)"/>  
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable not found.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.TryGetByID(System.Int32,Microsoft.Research.Science.Data.Variable@)">
            <summary>
            Tries to get the variable by its ID.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Contains(Microsoft.Research.Science.Data.Variable)">
            <summary>
            Returns the value, indicating whether the collection contains specified variable
            (references are included to search).
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>
            Doesn't enumerate global metadata variable.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Add(Microsoft.Research.Science.Data.Variable)">
            <summary>
            This implementation always throws NotSupportedException.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Clear">
            <summary>
            This implementation always throws NotSupportedException.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.CopyTo(Microsoft.Research.Science.Data.Variable[],System.Int32)">
            <summary>
            Copies all variables to the <paramref name="array"/> starting at the <paramref name="arrayIndex"/> .
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
            <remarks>
            The variable containing global metadata is not copied.
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Remove(Microsoft.Research.Science.Data.Variable)">
            <summary>
            This implementation always throws NotSupportedException.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Count">
            <summary>
            Gets the number of variables in the collection.
            </summary>
            <remarks>
            <para>
            This number doesn't include variable containing global metadata.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Item(System.String)">
            <summary>
            Gets the variable with specified committed name.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Item(System.Int32)">
            <summary>
            Gets the variable by its zero-based index.
            </summary>
            <remarks>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.TryGetByID(System.Int32,Microsoft.Research.Science.Data.Variable@)"/>  
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Item(System.String,Microsoft.Research.Science.Data.SchemaVersion)">
            <summary>
            Gets the variable with specified name for specified version of schema.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.Committed">
            <summary>
            Iterates through the collection of committed variables.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.All">
            <summary>
            Enumerates all variables of the collection.
            </summary>
            <remarks>
            The enumeration includes global metadata variable and hidden variables.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.ReadOnlyVariableCollection.IsReadOnly">
            <summary>
            Always returns true.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ConstraintsFailedException">
            <summary>
            The exception that is thrown when the consistency constraints are failed for the data set.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ConstraintsFailedException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/> class. </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ConstraintsFailedException.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/> 
            class with a specified error message. </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ConstraintsFailedException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Exception that causes this exception</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ConstraintsFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Microsoft.Research.Science.Data.ConstraintsFailedException"/> class
            with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data. </param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ResourceNotFoundException">
            <summary>
            The exception that is thrown when a particular resource is not found.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ResourceNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="resourceName"></param>
            <param name="inner"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.ResourceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute">
            <summary>
            Specifies the name of the DataSet provider.
            </summary>
            <remarks>
            <para>
            The name of a provider is referred in the DataSet URI
            (see remarks for the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class).</para>
            <para>
            See remarks for the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> class.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetProviderNameAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute.
            </summary>
            <param name="name">Name of the provider.</param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetProviderNameAttribute.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute">
            <summary>
            Specifies the types of files (extensions) acceptable by the DataSet provider.
            </summary>
            <remarks> 
            See remarks for the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> class.
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute.
            </summary>
            <param name="extension">File extension acceptable by the provider (including ".", e.g. ".dat").</param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute.FileExtension">
            <summary>
            Gets the file extension acceptable by the provider (including ".", e.g. ".dat").
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute">
            <summary>
            Associates a class derived from the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> with
            a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> provider type.
            </summary>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSet"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes the attribute.
            </summary>
            <param name="uriType">Type of the provider.</param>
            <remarks>
            Type <paramref name="uriType"/> must be <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> type or
            be derived from the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class.
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute.UriType">
            <summary>
            Gets the type of the provider.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.FileNamePropertyAttribute">
            <summary>
            Indicates that the target property contains file name.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.FileNamePropertyAttribute.#ctor">
            <summary>
            Instantiates the attribute.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Factory.DataSetFactory">
            <summary>Facilitates creating a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance from a URI.</summary>
            <remarks>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> is designated to enable creating a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance for a
            particular provider from a special URI (see <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/>).
            </para>
            <example>
            These examples demonstrate how to open datasets of different provider type
            from URI.
            <code>
            // If the URI is a simple path to a file, a provider can be determined by the extension: 
            DataSet dataSet = DataSet.Open("csv_for_autotypes.csv"); // ".csv" for CsvDataSet
            
            // If the URI has a schema "msds", a provider name is specified after a colon:
            DataSet dataSet = DataSet.Open("msds:csv?file=csv_for_autotypes.csv");  // "csv" for CsvDataSet
             
            DataSet dataSet = DataSet.Open(@"c:\data\ncfile.nc"); // ".nc" for NetCDFDataSet
            
            DataSet dataSet = DataSet.Open("msds:nc?file=ncfile.nc");  // "nc" for NetCDFDataSet
            
            // URI can contain parameters specific for a particular provider:
            DataSet dataSet = DataSet.Open("msds:as?server=(local)&amp;database=ActiveStorage&amp;integrated security=true&amp;GroupName=mm5&amp;UseNetcdfConventions=true");
            </code>
            </example>
            <para>
            A path also may contain parameters specified at the end after '?' (if the
            provider associated with the extension supports this feature).
            For example, the code:
            <code>
            DataSet ds  = DataSet.Open(@"c:\data\air0.csv?openMode=open&amp;fillUpMissingValues=true&amp;inferInt=true");
            </code>
            does the same as the code:
            <code>
            DataSet ds = DataSet.Open(@"msds:csv?file=c:\data\air0.csv&amp;openMode=open&amp;fillUpMissingValues=true&amp;inferInt=true");
            </code>
            </para>
            <para>
            The <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> type enables a customization of a URI prior to creating a
            DataSet. See <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)"/> for details.
            </para>
            <para>
            Any DataSet provider must be registered in the factory first to enable its instances 
            to be created by the <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)"/> method.
            Attribute <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>,
            applied to a DataSet provider type, associate it with a provider name.
            Attribute <see cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/>
            associates a provider type with one or severial extensions.
            Attribute <see cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/>
            associates a provider type with a type derived from the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            that provides a customization of its URI.
            </para>
            <para>
            The factory control class is a static class 
            <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>. 
            The class allows registering of providers and creating new instances. 
            The class is used by the <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"/> 
            and <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/> methods.
            </para>
            <para>
            There are three ways to register providers. First is a DataSetFactory.Register group of methods. 
            These methods allow both to register provider names and associate extensions 
            to a particular provider. The methods intensively use mentioned attributes 
            <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/> and 
            <see cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/> 
            in the process.
            </para>
            <example>
            <para>For example, the <see cref="T:Microsoft.Research.Science.Data.NetCDF4.NetCDFDataSet"/> 
            provider can be registered in this way:</para>
            <code>
            DataSetFactory.Register(typeof(NetCDFDataSet));
            </code>
            <para>or this:</para>
            <code>
            DataSetFactory.RegisterAssembly("Microsoft.Research.Science.Data.NetCDF4.dll");
            </code>
            </example>
            <para>
            The second way to register providers is the method <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/> 
            that accepts a path and makes a search in that folder for all assemblies 
            containing providers and registers found providers. The method works only
            for code compiled for DEBUG configuration. This makes it convenient for
            development on a machine without Scientific DataSet runtime installation.
            <example>
            <para>In the following example all providers found in assemblies in 
            the current directory are registered:
            </para>
            <code>
            DataSetFactory.SearchFolder(Environment.CurrentDirectory);
            </code>
            </example>
            </para>
            <para>Third way to register provider is to add registration entry to configuration file. 
            <example>
            <para>Example of configuration part is given below</para>
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
              &lt;!-- Declare configuration section named Microsoft.Research.Science.Data --&gt;
              &lt;configSections&gt;
                &lt;section name="Microsoft.Research.Science.Data" type="Microsoft.Research.Science.Data.Factory.FactoryConfigurationSection, Microsoft.Research.Science.Data" /&gt;
                &lt;!-- Declarations of other config sections --&gt;
              &lt;/configSections&gt;
              &lt;Microsoft.Research.Science.Data&gt;
                   &lt;factories&gt;
                     &lt;!-- Register factory by name --&gt;
                     &lt;add name="myProvider" type="MyNamespace.DbxFactory, MyAssembly"/&gt;
                     &lt;!-- Register factory by extension --&gt; 
                     &lt;add ext=".dat" type="MyNamespace.DatProvider, MyAssembly"/&gt;
                   &lt;/factories&gt;
                &lt;/Microsoft.Research.Science.Data&gt;
            &lt;/configuration&gt;
            </code>
            </example>
            </para>
            <para>Registration by name is similar to invocation of 
            <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Type)"/>.
            Registration by extension is similar to invocation of
            <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.String,System.Type)"/>.
            </para>
            <para>DataSet runtime installer adds registration entries to Machine.config files for 
            <see cref="T:Microsoft.Research.Science.Data.NetCDF4.NetCDFDataSet"/> (with provider name <c>"nc"</c>), 
            <see cref="T:Microsoft.Research.Science.Data.CSV.CsvDataSet"/> (with provider name <c>"csv"</c>), 
            <see cref="T:Microsoft.Research.Science.Data.Memory.MemoryDataSet"/> (with provider name <c>"memory"</c>), 
            <see cref="T:Microsoft.Research.Science.Data.Proxy.WCF.RemoteDataSetFactory"/>
            (with provider name <c>"wcf"</c>) and
            <see cref="T:Microsoft.Research.Science.Data.Proxy.Remoting.RemoteDataSetFactory"/>
            (with provider name <c>"remoting"</c>). So
            it is not necessary to register this classes in application code and also 
            makes it possible to instantiate WCF and Remoting proxies 
            via <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)"/> method.
            </para>
            <example>
            The following example creates a proxy connected to the service through the WCF channel
            (please refer documentation for 
            <see cref="T:Microsoft.Research.Science.Data.Proxy.ProxyDataSet">Microsoft.Research.Science.Data.Proxy.ProxyDataSet</see>):
            <code>
            // Creating a storage service for WCF:
            StorageService storage = new StorageService(taskQueue, dataSet);
            StorageServiceHost host = new StorageServiceHost(taskQueue, storage.MainPort);
            
            // Creating proxy:
            DataSet proxy = DataSet.Open("msds:wcf?uri=" + host.Uri); 
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.String,System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.NetCDF4.NetCDFDataSet"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Proxy.WCF.RemoteDataSetFactory"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Factory.DataSetFactory.providersByName">
            <summary>
            Tables of registered providers. Key is the provider name.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.Factory.DataSetFactory.providersByExt">
            <summary>
            Tables of registered providers. Key is the acceptable file extension.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetRegisteredProviders">
            <summary>
            Gets an array of providers names registered in the factory.
            </summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetExtensionsForProvider(System.String)">
            <summary>
            Gets an array of extensions (".ext") for the given provider name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetFactoryConfigurationSection">
            <summary>Tries to load configuration section that is handled by current
            version of DataSet core libraries</summary>
            <returns>Loaded section or null of no section is found</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.LoadConfiguration">
            <summary>Registers all providers from configuration file. Information is taken both 
            from local configuration file (if exists) and Machine.config</summary> 
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.String,System.Type)">
            <summary>
            Registers the file extension acceptable by the provider <paramref name="dataSetProvider"/>.
            </summary>
            <param name="fileExtension">Acceptable extension (including ".", e.g. ".dat").</param>
            <param name="dataSetProvider">The provider type to associate with the extension. 
            This type should be
            either derived from <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and has
            public constructor accepting string or implement 
            <see cref="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory"/></param>
            <returns>Returns true if the extension is registered.</returns>
            <remarks>		
            </remarks>
            <exception cref="T:System.ArgumentException">Type <paramref name="dataSetProvider"/> is not a subclass of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. -- or --
            Type <paramref name="dataSetProvider"/> has no public constructor accepting the URI. -- and --
            Type <paramref name="dataSetProvider"/> does not implement <see cref="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory"/>
            interface.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)">
            <summary>
            Registers file extensions acceptable by the provider <paramref name="dataSetProvider"/>.
            </summary>
            <param name="dataSetProvider">The provider type to associate with the extension.</param>
            <returns>Returns true if the extensions are registered.</returns>
            <exception cref="T:System.ArgumentException">
            Type <paramref name="dataSetProvider"/> is not a subclass of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. -- or --
            Type <paramref name="dataSetProvider"/> has no public constructor accepting the URI.
            </exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Type)">
            <summary>
            Registers the <paramref name="providerName"/> and associates it with the provider <paramref name="dataSetProvider"/>.
            </summary>
            <param name="providerName">Provider name.</param>
            <param name="dataSetProvider">The provider type to associate with the provider name. </param>
            <returns>Returns true if the provider is registered.</returns>
            <remarks>
            If the name <paramref name="providerName"/> is already registered in the factory
            the registration for the provider will be silently skipped and the method will return false.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException">
            Type <paramref name="dataSetProvider"/> is not a subclass of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. -- or --
            Type <paramref name="dataSetProvider"/> has no public constructor accepting the URI. -- and --
            Type <paramref name="dataSetProvider"/> does not implement <see cref="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory"/>
            interface.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.String)">
            <summary>
            Registers the <paramref name="providerName"/> and associates it with the provider <paramref name="dataSet"/>.
            </summary>
            <param name="providerName">Provider name.</param>
            <param name="providerTypeName">The provider type name to associate with the provider name. This type should be
            either derived from <see cref="T:Microsoft.Research.Science.Data.DataSet"/> and has
            public constructor accepting string or implement 
            <see cref="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory"/></param>
            <returns>Returns true if the provider is registered.</returns>
            <remarks>
            If the name <paramref name="providerName"/> is already registered in the factory
            the registration for the provider will be silently skipped and the method will return false.
            </remarks>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.ArgumentNullException">
            Type <paramref name="providerTypeName"/> is not a subclass of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. -- or --
            Type <paramref name="providerTypeName"/> has no public constructor accepting the URI. -- and --
            Type <paramref name="providerTypeName"/> does not implement <see cref="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory"/>
            interface.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Func{System.String,Microsoft.Research.Science.Data.DataSet})">
            <summary>
            Registers the <paramref name="providerName"/> and associates it with the provider constructor <paramref name="ctorFunc"/>.
            </summary>
            <param name="providerName">Provider name.</param>
            <param name="ctorFunc">Function to create DataSet from uri string</param>
            <returns>Returns true if the provider is registered.</returns>
            <remarks>
            If the name <paramref name="providerName"/> is already registered in the factory
            the registration for the provider will be silently skipped and the method will return false.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)">
            <summary>
            Registers the provider <paramref name="dataSetProvider"/> in the factory.
            </summary>
            <param name="dataSetProvider">The provider type to register.</param>
            <returns>Returns true if the provider is registered.</returns>
            <remarks>
            <para>
            Registers the name of the provider and its acceptable extensions in the factory.
            </para>
            <para>
            The name of the provider is taken from its attribute <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>.
            If the provider type contains several attributes all the names specified will be pended for the provider to be
            registered with. If the type has no attribute of this type no exception will be thrown.
            If the name <paramref name="dataSetProvider"/> is already registered in the factory
            the registration for the provider will be silently skipped and the method will return false.
            </para>		
            <para>
            About extensions registering see remarks for the method <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">
            Type <paramref name="dataSetProvider"/> is not a subclass of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class. -- or --
            Type <paramref name="dataSetProvider"/> has no public constructor accepting the URI.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">URI describing the DataSet to create.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            <para>The method creates a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance based on the <paramref name="uri"/>.
            If the uri contains schema definition (i.e. starts with <c>"msds:"</c>) the factory
            tries to find a corresponded provider type from the registered providers table
            (see method <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>). If the provider is not registered,
            an exception will be thrown.</para>
            <para>If the uri has no schema definition, the string is considered as a path and
            the factory looks for provider by the extension of the given path
            (see method <see cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>). If there are more than one
            providers associated with the extension, they will be constructed one by one until
            the data set is created successfully.
            </para>
            <para>
            The path also may contain parameters specified at the end after '?' (if the
            provider associated with the extensions supports this feature).
            For example, the code:
            <code>
            DataSet ds  = DataSet.Open(@"c:\data\air0.csv?openMode=open&amp;fillUpMissingValues=true&amp;inferInt=true");
            </code>
            does the same as the code:
            <code>
            DataSet ds = DataSet.Open(@"msds:csv?file=c:\data\air0.csv&amp;openMode=open&amp;fillUpMissingValues=true&amp;inferInt=true");
            </code>
            </para>
            <para>
            If the <paramref name="uri"/> is null or an empty string, an instance of the 
            <see cref="T:Microsoft.Research.Science.Data.Memory.MemoryDataSet"/> is created.
            </para>
            <para>
            See also remarks for the <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/> class.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.String,System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterExtension(System.String,System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSetUri"/>
            <exception cref="T:Microsoft.Research.Science.Data.ProviderNotRegisteredException">
            DataSet is not registered in the factory.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.DataSetCreateException">
            Particular DataSet provider has thrown an exception at construction.</exception>
            <exception cref="T:System.ArgumentException"/>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance for the specified <paramref name="uri"/>.
            </summary>
            <param name="uri">URI containing provider name and parameters.</param>
            <returns>New instance of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/>.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>.</remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Create(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetProviderNameByExtention(System.String)">
            <summary>
            Gets the provider name that is associated with the extension.
            </summary>
            <param name="extension"></param>
            <returns>The provider name.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetProviderNameByType(System.Type)">
            <summary>
            Gets the provider name that is associated with the type.
            </summary>
            <param name="providerType">Provider type.</param>
            <returns>The provider name, if the type found; or null, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetProviderNamesByType(System.Type)">
            <summary>
            Gets all provider names associated with the type.
            </summary>
            <param name="providerType">Provider type.</param>
            <returns>List of provider names, if the type found; or empty list, otherwise.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance for the <paramref name="providerType"/>.
            </summary>
            <param name="providerType">Type of the provider whose URI is to be created.</param>
            <returns><see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance.</returns>
            <remarks>See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>.</remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.String)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance for the specified <paramref name="uri"></paramref>.
            </summary>
            <param name="uri">Uri containing provider name and probably parameters.</param>
            <returns><see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance.</returns>
            <remarks>
            Creates a class inhereted from DataSetUri. Method looks in registered providers for
            attribute <see cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/> and returns an appropriate class instance. 
            If such class is not found, throws an exception.
            <para>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/> for details.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.CreateUri(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.GetExtension(System.String)">
            <summary>
            Gets an extension (".ext") from the path with support of appended
            parameters through "?".
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)">
            <summary>
            Searches the given file or folder for assemblies containg data set providers 
            and registers found providers.
            </summary>
            <param name="path">Path to the folder or an assembly file to search in.</param>
            <remarks>
            <para>If path specifies a folder, all files with extension ".dll" will be considered.</para>
            <para>The method compiles with condition <c>"DEBUG"</c> only.</para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <exception cref="T:System.ArgumentNullException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.String)">
            <summary>
            Registers all providers found in the given assembly.
            </summary>
            <param name="fileName">The assembly to look for providers in.</param>
            <remarks>The method throws any exception only on loading of the assembly,
            but not after that. Even if there is
            a problem during the registration it silently returns total number
            of successfully registered providers.</remarks>
            <returns>Number of successfully registered providers.</returns>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers all providers found in the given assembly.
            </summary>
            <param name="assembly">The assembly to look for providers in.</param>
            <remarks>The method doesn't throw any exception even if there is
            a problem during the registration and silently returns total number
            of successfully registered providers.</remarks>
            <returns>Number of sucessfully registered providers.</returns>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisterAssembly(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.Register(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.SearchFolder(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.RegisteredToString">
            <summary>
            Represents the table of registered providers as a string.
            </summary>
            <returns>String with providers.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.BuildProviderNotRegisteredException(System.String,System.String)">
            <summary>
            Formats exception message based on uri, traces it and returns the exception.
            </summary>
            <param name="uri"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.BuildDataSetCreateException(System.String,System.Exception)">
            <summary>
            Formats exception message based on uri and innerException, traces it and returns the exception.
            </summary>
            <param name="uri"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactory.BuildDataSetCreateException(System.String,System.String)">
            <summary>
            Formats exception message based on uri and message, traces it and returns the exception.
            </summary>
            <param name="uri"></param>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.DataSetFactoryEntry.CreateDataSet(System.String)">
            <summary>
            Creates an istance of the stored DataSet provider with the given uri.
            </summary>
            <param name="uri"></param>
            <returns></returns>
            <exception cref="T:Microsoft.Research.Science.Data.DataSetCreateException">
            Particular DataSet provider has thrown an exception at construction.</exception>
            <exception cref="T:System.InvalidOperationException"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Factory.DataSetFactoryEntry.Constructor">
            <summary>
            Gets the constructor of the provider accepting a URI.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Factory.DataSetFactoryEntry.DataSetType">
            <summary>
            Gets the type of the provider associated with the name.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Factory.DataSetFactoryEntry.Name">
            <summary>
            Gets the name of the provider.
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Factory.IDataSetFactory">
            <summary>Provides a method to create a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> from a URI.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Factory.IDataSetFactory.Create(System.String)">
            <summary>Creates a <see cref="T:Microsoft.Research.Science.Data.DataSet"/> from the specified URI.</summary>
            <param name="uri">A URI in a format supported by this factory.</param>
            <returns>New DataSet object.</returns>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Factory.FactoryConfigurationElementCollection">
            <summary>Collection of DataSet factory configuration records. It is mostly used by DataSet factories
            infrastructure.</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.VariableReferenceName">
            <summary>This class holds information about referenced variables in a DataSet uri.</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableReferenceName.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.VariableReferenceName.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="alias"></param>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableReferenceName.Name">
            <summary>Gets name of variable in referenced DataSet</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.VariableReferenceName.Alias">
            <summary>Gets alias of referenced variable - name of referenced variable in 
            referencing dataset</summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.DataSetUri">
            <summary>
            The class represents a special kind of URI that is a DataSet identification string.
            </summary>
            <remarks>
            <para>
            DataSet URI consists of mandatory URI schema ‘msds’ and SDS <see cref="P:Microsoft.Research.Science.Data.DataSetUri.ProviderName"/> followed by 
            optional provider parameters.
            The identification string has following syntax:
            </para>
            <para>
            msds:provider?param1=value1&amp;param2=value2&amp;...#include-var1,include-var2
            </para>
            <para>More formally the URI format is: </para>
            <para>DataSetURI ::= msds:provider[?parameters][#include-vars] </para>
            <para>provider ::= provider-identifier</para>
            <para>parameters ::= parameters&amp;parameters|parameter-name=parameter-value</para>
            <para>include-vars := variable-name|variable-name,include-vars</para>
            <para>parameter-name ::= identifier</para>
            <para>parameter-value ::= character-string </para>
            <para>Provider-identifier and set of parameter-names depends on a particular data set provider. 
            Please note that the parameters string can contain duplicate parameter names. 
            </para>
            <para>
            Important: DataSet URI is case-sensitive.
            </para>
            <para>Examples of the DataSet URIs are <c>"msds:csv?file=c:\data\test.csv"</c>,
            <c>"msds:as?server=(local)&amp;database=ActiveStorage&amp;integrated security=true&amp;GroupName=mm5&amp;UseNetcdfConventions=true"</c>.
            </para>
            <para>The <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> class makes verifying and parsing of DataSet URIs and provides methods
            to access parameters of the given URI. It should be used by provider implementators to parse DataSet uri.</para>
            <para>
            A DataSet provider might have a related special type derived from <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> describing
            its parameters. This enables customization of a URI through such class before
            creating the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> instance. See <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            and <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>.
            </para>
            <para>Read also about DataSet factoring here <see cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>.
            </para>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>
            <seealso cref="T:Microsoft.Research.Science.Data.Factory.DataSetFactory"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetUri.DataSetUriScheme">
            <summary>
            The scheme name for the DataSet uri: "msds".
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.DataSetUri.ReservedCharacters">
            <summary>Uri reserved characters according to RFC 2396</summary>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.#ctor(System.String)">
            <summary>
            Initializes the instance of the class.
            </summary>
            <param name="uri">DataSet uri string.</param>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is not data set uri.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null.</exception>
            <exception cref="T:System.UriFormatException"><paramref name="uri"/> is empty or doesn't conform to URI syntax. See <see cref="M:System.Uri.#ctor(System.String)"/> for details.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.#ctor(System.String,System.Type)">
            <summary>
            Initializes the instance of the class.
            </summary>
            <param name="uri">DataSet uri string.</param>
            <param name="providerType">Type of the DataSet provider to check that URI is correct.</param>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is not data set uri.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is null.</exception>
            <exception cref="T:System.UriFormatException"><paramref name="uri"/> is empty or doesn't conform to URI syntax. See <see cref="M:System.Uri.#ctor(System.String)"/> for details.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.#ctor(System.Type)">
            <summary>
            Initializes the instance of the class.
            </summary>
            <param name="providerType">Type of the DataSet provider to create a default URI for.</param>
            <exception cref="T:System.ArgumentNullException"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetProviderName(System.Type)">
            <summary>
            Gets provider name from <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>
            of the type. If the attribute is missing, throws an exception.
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.AssertProviderName(System.String,System.Type)">
            <summary>
            Asserts whether the provider name is associated with the given provider type.
            </summary>
            <param name="providerName">Name of the provider to check.</param>
            <param name="providerType">Provider type.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)">
            <summary>
            Gets the value of the specified parameter.
            </summary>
            <param name="parameter">The name of a parameter.</param>
            <returns>The value for the specified parameter.</returns>
            <remarks>
            <para>Parameter name is case-sensitive.</para>
            <para>If the uri doesn't contain the parameter an exception is thrown.</para>
            <para>
            If there are several parameters with the same name the method returns first one.
            </para>
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The uri doesn't contain the parameter.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.SetParameterValue(System.String,System.String,System.Boolean)">
            <summary>
            Sets the value of the specified parameter.
            </summary>
            <param name="key">The name of a parameter.</param>
            <param name="value">New value of parameter</param>
            <param name="multiplyParams">True if this parameter can occur multiple times in this uri.</param>
            <returns>The value for the specified parameter.</returns>
            <remarks>
            <para>Parameter name <paramref name="key"/> and <paramref name="value"/> are case-sensitive.</para>
            <para>If the uri doesn't contain the parameter an exception is thrown.</para>
            <para>
            If there are several parameters with the same name and <paramref name="multiplyParams"/> is false, 
            the method replaces first one. Otherwise, new parameter added.
            </para>
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The uri doesn't contain the parameter.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.SetParameterValue(System.String,System.String)">
            <summary>
            Sets the value of the specified parameter, each parameter considers as unique.
            </summary>
            <param name="key">The name of a parameter.</param>
            <param name="value">New value of parameter</param>
            <returns>The value for the specified parameter.</returns>
            <remarks>
            <para>Parameter name <paramref name="key"/> and <paramref name="value"/> are case-sensitive.</para>
            <para>If the uri doesn't contain the parameter an exception is thrown.</para>
            <para>
            If there is existing parameter with the same name, the method replaces first one.
            </para>
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The uri doesn't contain the parameter.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)">
            <summary>
            Gets the value of the specified parameter or specified default value, if 
            the uri doesn't contain the parameter.
            </summary>
            <param name="parameter">The name of a parameter.</param>
            <param name="default">Default value that is returned if the uri doesn't contain the parameter.</param>
            <remarks>
            <para>Parameter name is case-sensitive.</para>
            <para>
            If there are several parameters with the same name, the method returns first one.
            </para>
            </remarks>
            <returns>The value for the specified parameter or default value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)">
            <summary>
            Gets the list of values for the specified parameter.
            </summary>
            <param name="parameter">The name of a parameter.</param>
            <returns>The value for the specified parameter.</returns>
            <remarks>
            <para>Parameter name is case-sensitive.</para>
            <para>If the uri doesn't contain the parameter, the output collection is empty.</para>		
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)">
            <summary>
            Gets the list of values for the specified parameter or the default value, if 
            the uri doesn't contain the parameter.
            </summary>
            <param name="parameter">The name of a parameter.</param>
            <param name="default">Default value that is returned if the uri doesn't contain the parameter.</param>
            <remarks>		
            <para>Parameter name is case-sensitive.</para>
            </remarks>
            <returns>The list of values for the specified parameter or a list with the default value only.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterOccurences(System.String)">
            <summary>
            Returns the number of occurences of the parameter in the uri.
            </summary>
            <param name="parameter">The parameter to locate in the uri.</param>
            <returns>Returns the number of occurences.</returns>
            <remarks>
            <para>Parameter name is case-sensitive.</para>
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.ContainsParameter(System.String)">
            <summary>
            Determines whether the uri contains the parameter.
            </summary>
            <param name="parameter">The parameter to locate in the uri.</param>
            <returns>Returns the value indicating whether the uri contains the parameter.</returns>
            <remarks>
            <para>Parameter name is case-sensitive.</para>
            </remarks>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValues(System.String,System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.ToString">
            <summary>
            Converts the URI into a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.GetOpenModeOrDefault(Microsoft.Research.Science.Data.ResourceOpenMode)">
            <summary>
            Returns the open mode if it is specified in the uri; otherwise, returns <paramref name="default"/> value.
            </summary>
            <param name="default">The mode that should be returned if it is not specified in the uri.</param>
            <returns>The open mode.</returns>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.OpenMode"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.IsDataSetUri(System.String)">
            <summary>
            Checks whether the given string is a DataSet uri.
            </summary>
            <param name="uri">The string to check.</param>
            <remarks>
            The method checks whether the string <paramref name="uri"/>
            identifies the data set uri scheme (see <see cref="F:Microsoft.Research.Science.Data.DataSetUri.DataSetUriScheme"/>).
            For example, "msds:csv?file=tests.csv" is a DataSet uri,
            and "http://microsoft.com" or "c:\Data\tests.csv" are not DataSet uri.
            </remarks>
            <returns>True, if the <paramref name="uri"/> is a DataSet uri.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.CreateFromPath(System.String,System.String,System.String)">
            <summary>
            Transforms the given <paramref name="path"/> into a DataSet URI string.
            </summary>
            <param name="path">Path to a resource the DataSet should be created for.</param>
            <param name="providerName">Name of the provider for the DataSetUri.</param>
            <param name="resourceParamName">The parameter name that should be equal to <paramref name="path"/>
            (usually, <c>"file"</c>).</param>
            <returns>A DataSet URI string containing
            a reference to the resource identified by <paramref name="path"/>.</returns>
            <remarks>
            <para>
            The method has to convert a path with possible parameters appended through '?' into
            a DataSet URI string.
            For example, a path <c>c:\data\air0.csv</c> or even <c>c:\data\air0.csv?inferDims=true&amp;culture=ru-RU</c>
            are to be converted into 
            <c>msds:csv?file=c:\data\air0.csv</c> and <c>msds:csv?file=c:\data\air0.csv&amp;inferDims=true&amp;culture=ru-RU</c>,
            if <paramref name="resourceParamName"/> is <c>"file"</c> (the usual name for the parameter
            referring to a DataSet underlying resource file) and <paramref name="providerName"/>
            is <c>"csv"</c>.
            </para>
            <para>All <paramref name="path"/>, <paramref name="providerName"/> and <paramref name="resourceParamName"/>
            cannot be null or an empty string; otherwise an exception is thrown.</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><see cref="!: null"/> or empty string specified as any of the parameters</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance for the specified <paramref name="uri"></paramref>.
            </summary>
            <param name="uri">Uri containing provider name and probably parameters.</param>
            <returns><see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance.</returns>
            <remarks>
            <para>
            Each DataSet provider type can have a related class derived from the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> type
            linked to it through the <see cref="T:Microsoft.Research.Science.Data.DataSetProviderUriTypeAttribute"/> attribute.
            The instance of the class enables a prior customization of parameters specific to the DataSet provider
            through public properties of the class. Then the Uri instance can be used to construct
            a particular DataSet (see <see cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>).
            </para>
            <example>
            <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> can be created from a name of a DataSet provider
            (see <see cref="T:Microsoft.Research.Science.Data.DataSetProviderNameAttribute"/>).
            All parameters have default values.
            <code>
            DataSetUri uri = DataSetUri.Create("msds:csv"); // creates CsvUri
            uri.Separator = Delimiter.Semicolon;  // changing default separator
            uri.FileName = "something.csv"; // specifying file name
            DataSet ds = DataSet.Open(uri); // constructing a data set from the customized uri
            </code>
            <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> can be created from a URI with extra parameters defined:
            <code>
            DataSetUri uri = DataSetUri.Create("msds:csv?file=something.csv");
            uri.Separator = Delimiter.Semicolon;
            uri.SaveHeader = false;
            DataSet ds = DataSet.Open(uri);
            </code>
            <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> can be created from one of extension associated with the DataSet provider
            (see <see cref="T:Microsoft.Research.Science.Data.DataSetProviderFileExtensionAttribute"/>).
            <code>
            DataSet uri = DataSetUri.Create(".csv");
            uri.Separator = Delimiter.Semicolon;
            uri.FileName = "something.csv";
            DataSet ds = DataSet.Open(uri);
            </code>
            <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> can be created from a file path with some extra parameters defined:
            <code>
            DataSetUri uri = DataSetUri.Create("something.csv?separator=tab&amp;openMode=readOnly");
            uri.SaveHeader = false;
            DataSet ds = DataSet.Open(uri);
            </code> 
            <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> can be created from a DataSet provider type:
            <code>
            DataSetUri uri = DataSetUri.Create(typeof(CsvDataSet));
            uri.SaveHeader = false;
            uri.FileName = "something.csv";
            DataSet ds = DataSet.Open(uri);
            </code> 
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.Type)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"></seealso>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(System.String)"></seealso>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance for the <paramref name="providerType"/>.
            </summary>
            <param name="providerType">Type of the provider whose URI is to be created.</param>
            <returns><see cref="T:Microsoft.Research.Science.Data.DataSetUri"/> instance.</returns>
            <remarks>
            See remarks for <see cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>.
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSet.Open(Microsoft.Research.Science.Data.DataSetUri)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.Create(System.String)"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.NormalizeFileNames(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Updates the properties of the <paramref name="uri"/> marked with <see cref="T:Microsoft.Research.Science.Data.FileNamePropertyAttribute"/>
            to contain full paths.
            </summary>
            <param name="uri"></param>
            <remarks>
            <para>
            The method finds all properties of the <paramref name="uri"/> marked
            with <see cref="T:Microsoft.Research.Science.Data.FileNamePropertyAttribute"/> and having value
            that is a relative local path, and then updates these properties
            assigning respective full path using current directory.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.DataSetUri.NormalizeFileName(Microsoft.Research.Science.Data.DataSetUri)">
            <summary>
            Updates the parameter "file" in the <paramref name="uri"/>.
            </summary>
            <param name="uri"></param>
            <remarks>
            <para>
            If the <paramref name="uri"/> contains parameter "file" and its value
            is a relative local path, the method updates the <paramref name="uri"/>,
            assigning to the "file" full path using current directory.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetUri.ProviderName">
            <summary>
            Gets the provider name specified in the uri.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetUri.Item(System.String)">
            <summary>
            Gets or sets the value of the specified parameter.
            </summary>
            <param name="parameter">The name of a parameter.</param>
            <returns>The value for the specified parameter.</returns>
            <remarks>
            <para>Parameter name and value are case-sensitive.</para>
            <para>If the uri doesn't contain the parameter an exception is thrown.</para>
            <para>
            If there are several parameters with the same name the method returns first one.
            While setting value considers that parameter with this name is unique.
            </para>
            </remarks>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The uri doesn't contain the parameter.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.SetParameterValue(System.String,System.String)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.SetParameterValue(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetUri.VariableReferences">
            <summary>Gets an array of referenced variable names.</summary>
            <remarks>
            <para>
            Variable names can be referenced in a uri appended through the '#' mark:
            <c>msds:csv?file=data.csv#a,b,c</c>. In the example, <c>a,b,c</c> are
            variables names referenced in the uri.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetUri.ParameterKeys">
            <summary>
            Gets the keys of the parameters.
            </summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.DataSetUri.OpenMode">
            <summary>
            Gets the open resource mode.
            </summary>
            <remarks>
            <para>
            The property gets the <see cref="T:Microsoft.Research.Science.Data.ResourceOpenMode"/> value representing the flag "openMode"
            in the data set URI.
            </para>
            <para>The flag "openMode" specifies how the data set should open a file, 
            data base or whatever resource it uses to store the data.</para>
            <para>
            Possible values for the flag are (case-sensitive):
            <list type="table">
            	<listheader>
            	<term>Mode</term>
            	<description>Description</description>
            	</listheader>
            	<item>
            	<term>createNew</term>
            	<description>Specifies that the data set should create new resource. If the resource already exists, an exception IOException is thrown.</description>
            	</item>
            	<item>
            	<term>open</term>
            	<description>Specifies that the data set should open an existing resource. If the resource does not exist, an exception ResourceNotFoundException is thrown.</description>
            	</item>
            	<item>
            	<term>create</term>
            	<description>Specifies that the data set should create a new resource. If the resource already exists, it will be re-created.</description>
            	</item>
            	<item>
            	<term>openOrCreate</term>
            	<description>Specifies that the data set should open a resource if it exists; otherwise, a new resource should be created.</description>
            	</item>
            </list>
            </para>
            <example>
            <code>
            DataSet dataSet = DataSet.Open("msds:nc?file=data.nc&amp;openMode=open"); 
            DataSet dataSet = DataSet.Open("msds:as?server=(local)&amp;database=ActiveStorage&amp;integrated security=true&amp;GroupName=mm5&amp;UseNetcdfConventions=true&amp;openMode=createNew");
            </code>
            </example>
            </remarks>
            <seealso cref="M:Microsoft.Research.Science.Data.DataSetUri.GetOpenModeOrDefault(Microsoft.Research.Science.Data.ResourceOpenMode)"/>
        </member>
        <member name="T:Microsoft.Research.Science.Data.ResourceOpenMode">
            <summary>
            The flag "openMode" specifies how the data set should open a file, data base or whatever resource it uses to store the data.
            </summary>
            <seealso cref="P:Microsoft.Research.Science.Data.DataSetUri.OpenMode"/>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ResourceOpenMode.CreateNew">
            <summary>
            Specifies that the data set should create new resource. If the resource already exists, an exception IOException is thrown.  
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ResourceOpenMode.Create">
            <summary>
            Specifies that the data set should create a new resource. If the resource already exists, it will be re-created.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ResourceOpenMode.Open">
            <summary>
            Specifies that the data set should open an existing resource. If the resource does not exist, an exception ResourceNotFoundException is thrown.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ResourceOpenMode.OpenOrCreate">
            <summary>
            Specifies that the data set should open a resource if it exists; otherwise, a new resource should be created.
            </summary>
        </member>
        <member name="F:Microsoft.Research.Science.Data.ResourceOpenMode.ReadOnly">
            <summary>
            Specified that the data set should open an existing resource in read-only mode
            </summary>
        </member>
        <member name="T:Microsoft.Research.Science.Data.Factory.FactoryConfigurationSection">
            <summary>Class that corresponds to root section for DataSet factories configuration. 
            Typically you don't need to create instances of this class. It is mostly used
            by DataSet factories infrastructure</summary>
        </member>
        <member name="P:Microsoft.Research.Science.Data.Factory.FactoryConfigurationSection.Factories">
            <summary>Gets collection of configured factories</summary>
        </member>
    </members>
</doc>
