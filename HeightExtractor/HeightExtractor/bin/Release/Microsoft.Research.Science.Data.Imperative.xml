<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Research.Science.Data.Imperative</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Research.Science.Data.Imperative.DataSetExtensions">
            <summary>
            Provides a set of extensions methods enabling work with <see cref="T:Microsoft.Research.Science.Data.DataSet"/> in a way close
            to a procedural API.
            </summary>
            <remarks>
            <para>
            The goal of the extensions is to enable simple data operations with minimum amount of code. 
            Additionally, it unifies the API with other languages like C, R, Python etc. 
            Note that these are just helper methods which will in fact call universal object model API.
            </para>
            </remarks>
            <seealso cref="T:Microsoft.Research.Science.Data.DataSet"/>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Add``1(Microsoft.Research.Science.Data.DataSet,System.String,``0,System.String[])">
            <summary>
            Creates new variable with initial data and adds it to the data set.
            </summary>
            <typeparam name="D">An array of variable rank and data type, or a type for scalar variable.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName">Name of the new variable.</param>
            <param name="data">Initial data of the variable.</param>
            <param name="dimensionNames">Names of new variable's dimensions.</param>
            <returns>New variable.</returns>
            <remarks>
            <para>
            If <paramref name="dimensionNames"/> are absent, the 
            <typeparamref name="D"/> type parameter must be an array type of proper rank. 
            E.g. <c>ds.Add&lt;double[,]&gt;("mat", new double[,]{{1},{2}})</c> creates a variable named "mat" 
            of type double and of rank 2.
            </para>
            <para>
            It is still possible to specify type parameter and dimensions of the variable:
            <c>ds.Add&lt;double[,]&gt;("mat", new double[,]{{1},{2}}, "x", "y")</c> also creates a variable named "mat" 
            of type double and of rank 2. 
            The syntax <c>ds.Add&lt;double&gt;("mat", new double[,]{{1},{2}}, "x", "y")</c> 
            is incorrect, but <c>ds.Add&lt;double&gt;("mat", 10.0)</c> creates a scalar variable with value 10.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Add``1(Microsoft.Research.Science.Data.DataSet,System.String,System.String[])">
            <summary>
            Creates new variable and adds it to the data set.
            </summary>
            <typeparam name="D">A variable data type or an array of variable rank and data type.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName">Name of the new variable.</param>
            <param name="dimensionNames">Names of new variable's dimensions.</param>
            <returns>New variable.</returns>
            <remarks>
            <para>
            If <paramref name="dimensionNames"/> are absent, the 
            <typeparamref name="D"/> type parameter must be an array type of proper rank. 
            E.g. <c>ds.Add&lt;double[,]&gt;("mat")</c> creates a variable named "mat" 
            of type double and of rank 2.
            </para>
            <para>
            It is still possible to specify just type parameter and dimensions of the variable:
            <c>ds.Add&lt;double&gt;("mat", "x", "y")</c> also creates a variable named "mat" 
            of type double and of rank 2. The syntax <c>ds.Add&lt;double[,]&gt;("mat", "x", "y")</c> 
            is correct, too.
            </para>
            <example>
            <code>
            // Creates new data set:
            var ds = DataSet.Open("test.csv?openMode=create");
            // Adds new string scalar variable with name "str" to the data set:
            ds.Add&lt;string&gt;("str"); 
            // Data of the variable "str" is "data string":
            ds.PutData("str", "data string");
            // Adds new variable with name "int1" that is a 1d-array of int and depends on dimension "idx".
            // id2 contains unique identifier of the new variable.
            int id2 = ds.Add&lt;int[]&gt;("int1", "idx").ID;
            // Data of the variable "int1" is { 9, 8, 7, 6 }:
            ds.PutData(id2, new int[] { 9, 8, 7, 6 });
            // Adds new variable "double2" depending on two dimensions:
            ds.Add&lt;double&gt;("double2", "i1", "i2");
            // Adds new variable "double3" depending on 3 default dimensions:
            ds.Add&lt;double[, ,]&gt;("double3");
            // Prints the data set brief description:
            Console.WriteLine(ds);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)">
            <summary>
            Replaces all the variable data with a new one.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to put data in.</param>
            <param name="data">New data of the variable.</param>
            <remarks>
            <para>The shape of the data must be greater or equal to the current shape of the variable.</para>
            <example>
            <code>
            // Creates new data set:
            var ds = DataSet.Open("test.csv?openMode=create");
            // Adds new string scalar variable with name "str" to the data set:
            ds.Add&lt;string&gt;("str"); 
            // Data of the variable "str" is "data string":
            ds.PutData("str", "data string");
            // Adds new variable with name "int1" that is a 1d-array of int and depends on dimension "idx".
            // id2 contains unique identifier of the new variable.
            int id2 = ds.Add&lt;int[]&gt;("int1", "idx").ID;
            // Data of the variable "int1" is { 9, 8, 7, 6 }:
            ds.PutData(id2, new int[] { 9, 8, 7, 6 });
            // Adds new variable "double2" depending on two dimensions:
            ds.Add&lt;double&gt;("double2", "i1", "i2");
            // Adds new variable "double3" depending on 3 default dimensions:
            ds.Add&lt;double[, ,]&gt;("double3");
            // Prints the data set brief description:
            Console.WriteLine(ds);
            </code>
            </example>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)"/>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)">
            <summary>
            Replaces all the variable data with a new one.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target DataSet.</param>
            <param name="predicate">Determines the variable to put data in.</param>
            <param name="data">New data of the variable.</param>
            <remarks>
            <para>The shape of the data must be greater or equal to the current shape of the variable.</para>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Updates a variable that satisfies the predicate:
            ds.PutData(v =&gt; v.Metadata["action"] == "toUpdate", 
            			new int[] { 9, 8, 7, 6 });
            </code>
            </example>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot unambiguously identify a variable in the data set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)"/>			
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)">
            <summary>
            Replaces all the variable data with a new one.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target DataSet.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to put data in.</param>
            <param name="data">New data of the variable.</param>
            <remarks>
            <para>The shape of the data must be greater or equal to the current shape of the variable.</para>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and put the data into it.
            If a variable is not found or there are several variables with the name, an exception is thrown.</para>
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Updates a one-dimensional variable with name "int1" and type of data int:
            ds.PutData("int1", new int[] { 9, 8, 7, 6 });
            </code>
            </example>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot unambiguously identify a variable in the data set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)"/>		
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0,System.Int32[])">
            <summary>
            Sets one value in the variable data.
            </summary>
            <typeparam name="D">Must be a scalar type.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to put data in.</param>
            <param name="data">New value.</param>
            <param name="indices">Indices of the value to put.</param>
            <remarks>
            <example>
            <code>
            // Creates new data set:
            var ds = DataSet.Open("test.csv?openMode=create");
            // Adds new string scalar variable with name "str" to the data set:
            ds.Add&lt;string&gt;("str"); 
            // Data of the variable "str" is "data string":
            ds.PutData("str", "data string");
            // Adds new variable with name "int1" that is a 1d-array of int and depends on dimension "idx".
            // id2 contains unique identifier of the new variable.
            int id2 = ds.Add&lt;int[]&gt;("int1", "idx").ID;
            // Sets first element of the id2 to 7:
            ds.PutData(id2, 7, 0);		
            </code>
            </example>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)"/>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0,System.Int32[])">
            <summary>
            Sets one value in the variable data.
            </summary>
            <typeparam name="D">Must be a scalar type.</typeparam>
            <param name="dataset">Target DataSet.</param>
            <param name="predicate">Determines the variable to put data in.</param>
            <param name="data">New value.</param>
            <param name="indices">Indices of the value to put.</param>
            <remarks>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>	
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot unambiguously identify a variable in the data set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)"/>			
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0,System.Int32[])">
            <summary>
            Sets one value in the variable data.
            </summary>
            <typeparam name="D">Must be a scalar type.</typeparam>
            <param name="dataset">Target DataSet.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to put data in.</param>
            <param name="data">New value.</param>
            <param name="indices">Indices of the value to put.</param>
            <remarks>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and put the data into it.
            If a variable is not found or there are several variables with the name, an exception is thrown.</para>
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Updates a one-dimensional variable with name "int1" and type of data int and
            // sets its first element value to 7:
            ds.PutData("int1", 7, 0);
            </code>
            </example>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Cannot unambiguously identify a variable in the data set.
            </exception>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)"/>
            <seealso cref="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)"/>		
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0,Microsoft.Research.Science.Data.Range[])">
            <summary>
            Puts a range of values into a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to put data in.</param>
            <param name="data">Data to put.</param>
            <param name="range">Range of the data to set.</param>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the input data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0,Microsoft.Research.Science.Data.Range[])">
            <summary>
            Puts a range of values into a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to put data in.</param>
            <param name="data">Data to put.</param>
            <param name="range">Range of the data to set.</param>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the input data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutData``1(Microsoft.Research.Science.Data.DataSet,System.String,``0,Microsoft.Research.Science.Data.Range[])">
            <summary>
            Puts a range of values into a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get data from.</param>        /// <param name="data">Data to put.</param>
            <param name="range">Range of the data to set.</param>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the input data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and gets the data from it.
            If a variable is not found, an exception is thrown.</para>	
            </remarks>
            <example>
            <code>
            // Let variable "var2d" has rank 2
            ds.PutData&lt;double[]&gt;( "var2d", new double[] { 1, 2, 3 }, 
             DataSet.Range(0,2), // 1st dim: from 0 to 2
             DataSet.ReduceDim(1)); // 2nd dim is reduced in the input data set and its index is 1
            </code>
            </example>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to append.</param>
            <param name="data">Data to append.</param>
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>
            <example>
            <code>
            // Creates new data set:
            var ds = DataSet.Open("test.csv?openMode=create");
            // Adds new variable with name "int1" that is a 1d-array of int and depends on dimension "idx".
            // id2 contains unique identifier of the new variable.
            int id2 = ds.Add&lt;int[]&gt;("int1", "idx").ID;
            // Data of the variable "int1" is { 9, 8, 7, 6 }:
            ds.PutData(id2, new int[] { 9, 8, 7, 6 });
            // Adds one more value to the end of the variable:
            ds.Append(id2, 5);
            // Now id2 contains { 9, 8, 7, 6, 5 }
            </code>
            </example>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to append.</param>
            <param name="data">Data to append.</param>
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.String,``0)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to put data in.</param>
            <param name="data">Data to append.</param>
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0,System.Int32)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to append.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Zero-based index of the variable's dimension to append by.</param>	
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0,System.Int32)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to append.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Zero-based index of the variable's dimension to append by.</param>	
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.String,``0,System.Int32)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to put data in.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Zero-based index of the variable's dimension to append by.</param>	
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Int32,``0,System.String)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to append.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Name of the variable's dimension to append by.</param>	
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},``0,System.String)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to append.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Name of the variable's dimension to append by.</param>	
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.Append``1(Microsoft.Research.Science.Data.DataSet,System.String,``0,System.String)">
            <summary>
            Appends a variable with data.
            </summary>
            <typeparam name="D">Must be an array type with rank one less the variable rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to put data in.</param>
            <param name="data">Data to append.</param>
            <param name="dimension">Name of the variable's dimension to append by.</param>	
            <remarks>
            <para>The shape of the variable grows along the first dimension. 
            For example, for a matrix (row,column) this will be adding more rows.</para>	
            </remarks>
            <exception cref="T:System.ObjectDisposedException">DataSet is disposed.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.ReadOnlyException">Variable is read-only.</exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException">Arguments are incorrect.</exception>
            <exception cref="T:Microsoft.Research.Science.Data.CannotPerformActionException">Cannot put data into the variable.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Variable is not found.</exception>	
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Int32)">
            <summary>
            Gets all data from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to get data from.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Gets a value from a scalar variable of type double with given id:
            int varID = ...;
            double val = ds.GetData&lt;double&gt;(varID); 
            // Gets an array from a 1d-variable of type string:
            int var2ID = ...;
            string[] strings = ds.GetData&lt;string[]&gt;(var2ID);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean})">
            <summary>
            Gets all data from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to get data from.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.String)">
            <summary>
            Gets all data from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type for a variable of rank 0 and an array type for other ranks.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get data from.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and gets the data from it.
            If a variable is not found or there are several variables with the name, an exception is thrown.</para>	
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Gets a value from a scalar variable named "str" of type string:
            string val = ds.GetData&lt;double&gt;("str"); 
            // Gets an array from a 1d-variable named "int1" of type int:
            int[] data = ds.GetData&lt;int[]&gt;("int1");
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,System.Int32[])">
            <summary>
            Gets a single value from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type equal to the variable data type.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to get data from.</param>
            <param name="indices">Indices of the value to get.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <para>Number of indices must be equal to the rank of a variable. For a scalar variable,
            <paramref name="indices"/> can be either null or int[0].</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},System.Int32[])">
            <summary>
            Gets a single value from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type equal to the variable data type.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to get data from.</param>
            <param name="indices">Indices of the value to get.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <para>Number of indices must be equal to the rank of a variable. For a scalar variable,
            <paramref name="indices"/> can be either null or int[0].</para>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.String,System.Int32[])">
            <summary>
            Gets a single value from a variable.
            </summary>
            <typeparam name="D">Must be a scalar type equal to the variable data type.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get data from.</param>
            <param name="indices">Indices of the value to get.</param>
            <returns>Data of the variable.</returns>
            <remarks>
            <para>Number of indices must be equal to the rank of a variable. For a scalar variable,
            <paramref name="indices"/> can be either null or int[0].</para>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and gets the data from it.
            If a variable is not found, an exception is thrown.</para>	
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Gets a value from a scalar variable named "str" of type string:
            string val = ds.GetData&lt;double&gt;("str"); 
            // Gets the 3rd (index starts from zero) value from a 1d-variable named "int1" of type int:
            int data = ds.GetData&lt;int&gt;("int1", 2);
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Int32,Microsoft.Research.Science.Data.Range[])">
            <summary>
            Get a range of values from a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to get data from.</param>
            <param name="range">Range of the data to get.</param>
            <returns>Requested data.</returns>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the result data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},Microsoft.Research.Science.Data.Range[])">
            <summary>
            Get a range of values from a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to get data from.</param>
            <param name="range">Range of the data to get.</param>
            <returns>Requested data.</returns>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the result data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>    
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetData``1(Microsoft.Research.Science.Data.DataSet,System.String,Microsoft.Research.Science.Data.Range[])">
            <summary>
            Get a range of values from a variable.
            </summary>
            <typeparam name="D">D must a scalar or an array of a proper rank.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get data from.</param>
            <param name="range">Range of the data to get.</param>
            <returns>Requested data.</returns>
            <remarks>
            <para>
            Number of <paramref name="range"/> elements must be equal to the rank of a variable.
            </para>
            <para>
            Type <typeparamref name="D"/> is a type of the result data. Its rank depends on rank
            of the variable and how many "reduce" ranges are presented in the <paramref name="range"/>
            (see also <see cref="M:Microsoft.Research.Science.Data.DataSet.ReduceDim(System.Int32)"/>).
            </para>
            <para>
            <see cref="T:Microsoft.Research.Science.Data.Range"/> can be created using static methods of the <see cref="T:Microsoft.Research.Science.Data.DataSet"/> class.
            Read remarks for the <see cref="T:Microsoft.Research.Science.Data.Range"/> struct.
            </para>
            <para>The method finds a variable with name <paramref name="variableName"/>, given rank and
            type of data (determined from the arguments) and gets the data from it.
            If a variable is not found, an exception is thrown.</para>	
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr(Microsoft.Research.Science.Data.DataSet,System.Int32,System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to get metadata attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr(Microsoft.Research.Science.Data.DataSet,System.String,System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get metadata attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
            <remarks>
            <para>The method finds a variable with name <paramref name="variableName"/>
            and gets the attribute from it.
            If a variable is not found or there are several variables with the name, 
            an exception is thrown.</para>	
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Gets attribute "range" from variable "var":
            object range = ds.GetAttr("var", "range"); 
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to get attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
            <remarks>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr``1(Microsoft.Research.Science.Data.DataSet,System.Int32,System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <typeparam name="T">Type of the attribute value.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to get metadata attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr``1(Microsoft.Research.Science.Data.DataSet,System.String,System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <typeparam name="T">Type of the attribute value.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to get metadata attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
            <remarks>
            <para>The method finds a variable with name <paramref name="variableName"/>
            and gets the attribute from it.
            If a variable is not found or there are several variables with the name, 
            an exception is thrown.</para>	
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Gets attribute "range" from variable "str":
            int[] range = ds.GetAttr&lt;int[]&gt;("str", "range"); 
            int min = range[0];
            int max = range[1];
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.GetAttr``1(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},System.String)">
            <summary>
            Gets a metadata attribute value.
            </summary>
            <typeparam name="T">Type of the attribute value.</typeparam>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to get attribute from.</param>
            <param name="attributeName">The name of the metadata attribute to get.</param>
            <returns>The attribute value.</returns>
            <remarks>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutAttr(Microsoft.Research.Science.Data.DataSet,System.Int32,System.String,System.Object)">
            <summary>
            Sets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="variableId"><see cref="P:Microsoft.Research.Science.Data.Variable.ID"/> of the variable to set metadata attribute.</param>
            <param name="attributeName">The name of the metadata attribute to set.</param>
            <param name="value">Value of the attribute.</param>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutAttr(Microsoft.Research.Science.Data.DataSet,System.String,System.String,System.Object)">
            <summary>
            Sets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="variableName"><see cref="P:Microsoft.Research.Science.Data.Variable.Name"/> of the variable to set metadata attribute.</param>
            <param name="attributeName">The name of the metadata attribute to set.</param>
            <param name="value">Value of the attribute.</param>
            <remarks>
            <para>The method finds a variable with name <paramref name="variableName"/>
            and sets its attribute.
            If a variable is not found or there are several variables with the name, 
            an exception is thrown.</para>	
            <example>
            <code>
            // Opens a data set:
            var ds = DataSet.Open("test.csv?openMode=open");		
            // Sets attribute "range" of variable "var":
            ds.SetAttr("var", "range", new int[] { 0, 100 }); 
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.Research.Science.Data.Imperative.DataSetExtensions.PutAttr(Microsoft.Research.Science.Data.DataSet,System.Func{Microsoft.Research.Science.Data.Variable,System.Boolean},System.String,System.Object)">
            <summary>
            Sets a metadata attribute value.
            </summary>
            <param name="dataset">Target data set.</param>
            <param name="predicate">Determines the variable to set attribute.</param>
            <param name="attributeName">The name of the metadata attribute to set.</param>
            <param name="value">Value of the attribute.</param>
            <remarks>
            <para><paramref name="predicate"/> must select only one variable within the DataSet.
            Otherwise, an exception is thrown.</para>
            </remarks>
        </member>
    </members>
</doc>
